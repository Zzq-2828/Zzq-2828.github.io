<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>project_in_meituan_02</title>
    <url>/2022/05/20/project-in-meituan-02/</url>
    <content><![CDATA[<p>一个较为复杂的需求</p>
<span id="more"></span>





<h3 id="明确需求"><a href="#明确需求" class="headerlink" title="明确需求"></a>明确需求</h3><h4 id="M端"><a href="#M端" class="headerlink" title="M端"></a>M端</h4><p>新增【渠道来源奖励】：</p>
<ul>
<li>点击【新建来源奖励】和删除：增删交互同banner区，新增条目为【来源N】和【来源配置】</li>
<li>每一条配置右侧展示所配置的来源参数，多条目下便于识别</li>
<li>点击【来源配置】，拉起二级配置窗口</li>
<li>当前最多支持配置10条</li>
<li>删除：需要重置该来源的总领取上限和每日上限</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;retainWindow&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;popSwitch&quot;</span><span class="punctuation">:</span><span class="keyword">true</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="attr">&quot;crowdConfig&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;crowdType&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>  </span><br><span class="line">          <span class="attr">&quot;crowdIds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">111</span><span class="punctuation">,</span><span class="number">222</span><span class="punctuation">,</span><span class="number">333</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span>   </span><br><span class="line">    <span class="attr">&quot;sourceAward&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//新增字段</span></span><br><span class="line">        <span class="attr">&quot;newSourceConfigList&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span> <span class="comment">//来源配置</span></span><br><span class="line">                <span class="attr">&quot;crowdConfig&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;crowdType&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>   <span class="comment">//人群类型 0:&quot;不限制&quot;， 3:&quot;按人群限制&quot;</span></span><br><span class="line">                    <span class="attr">&quot;crowdIds&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">111</span><span class="punctuation">,</span><span class="number">222</span><span class="punctuation">,</span><span class="number">333</span><span class="punctuation">]</span> <span class="comment">//crmid list</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;totalLimit&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span>   <span class="comment">//每人总领取上限，-1代表不限制次数</span></span><br><span class="line">                <span class="attr">&quot;eachDayLimit&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span>  <span class="comment">//每日次数限制，不可填-1</span></span><br><span class="line">                <span class="attr">&quot;userSource&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;aaa&quot;</span><span class="punctuation">,</span> <span class="comment">//链接来源参数，最长30字符</span></span><br><span class="line">                <span class="attr">&quot;orderAwardConfig&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;rewardNumType&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//奖励数值模型</span></span><br><span class="line">                    <span class="attr">&quot;lotteryId&quot;</span> <span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span> <span class="comment">//发放奖励</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;popUpFigure&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1.gif&quot;</span> <span class="comment">//上传图片支持gif，尺寸[w590,h790]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Advanced topics in electrical and electronic engineering</title>
    <url>/2022/05/19/ELEC7078/</url>
    <content><![CDATA[<p>Hong Kong University 2022 summer semester class review —— ELEC7078 Advanced topics in electrical and electronic engineering</p>
<span id="more"></span>



<h3 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h3><h4 id="1-1-Distributed-System"><a href="#1-1-Distributed-System" class="headerlink" title="1.1 Distributed System"></a>1.1 Distributed System</h4><ul>
<li>A distributed system is defined as a collection of autonomous computers linked by a network with software designed to produce an integrated computing facility.</li>
<li>A distributed system is a collection of independent computers that appear to the system as a single computer.</li>
<li>Distributed System &#x3D; Collection of computers + Communication Network + Transparency</li>
</ul>
<img src="https://pic.imgdb.cn/item/628532c40947543129f036da.jpg" style="zoom: 50%;" />

<h4 id="1-2-Advantages-of-Distributed-Systems"><a href="#1-2-Advantages-of-Distributed-Systems" class="headerlink" title="1.2 Advantages of Distributed Systems"></a>1.2 Advantages of Distributed Systems</h4><ul>
<li>Price&#x2F;performance<ul>
<li>A cost-effective way to build larger system is to use a larger number of cheap CPUs.</li>
</ul>
</li>
<li>Nature of some applications<ul>
<li>Some applications are inherently distributed (e.g. banking and supermarket chain).</li>
</ul>
</li>
<li>Reliability<ul>
<li>If one machine crashes, the system as a whole can still survive.</li>
</ul>
</li>
<li>Incremental growth    <ul>
<li>Computing power can be added in small increments.</li>
</ul>
</li>
<li>Data sharing<ul>
<li>It allows many users access to a common database;</li>
</ul>
</li>
<li>Device sharing<ul>
<li>It allows many users to share expensive peripherals;</li>
</ul>
</li>
<li>Communication<ul>
<li>It provides communication facilities;</li>
</ul>
</li>
<li>Flexibility    <ul>
<li>It spreads the workload over the available machines in the most cost-effective way.</li>
</ul>
</li>
</ul>
<h4 id="1-3-Characteristics"><a href="#1-3-Characteristics" class="headerlink" title="1.3 Characteristics"></a>1.3 Characteristics</h4><h5 id="Resource-Sharing"><a href="#Resource-Sharing" class="headerlink" title="Resource Sharing"></a>Resource Sharing</h5><ul>
<li>What to share?<ul>
<li>Hardware devicesData</li>
</ul>
</li>
<li>How to share?<ul>
<li>Resources are stored in workstations and can be accessed via communications by a resource manager</li>
</ul>
</li>
<li>Resource Manager<ul>
<li>A program that offers a communication interface enabling the resource to be accessed, manipulated and updated reliably and consistently.</li>
</ul>
</li>
</ul>
<img src="https://pic.imgdb.cn/item/628533b60947543129f0a7a2.jpg" style="zoom:80%;" />

<h5 id="Openness"><a href="#Openness" class="headerlink" title="Openness"></a>Openness</h5><ul>
<li>Characteristic that determines whether the system can be extended in various ways</li>
<li>Hardware: Additional peripherals, memory or communication interfaces;</li>
<li>Software: Additional operating system features, communication protocols and resource-sharing services.</li>
</ul>
<h5 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h5><ul>
<li>In a distributed system with M computers (cores) , up to M processes can be executed in parallel.</li>
<li>Parallel executions occur for two reasons:<ul>
<li>More than one users simultaneously invoke commands or interact with application programs</li>
<li>Many server processes run concurrently, each responding to different requests from client processes.</li>
</ul>
</li>
</ul>
<h5 id="Scalability"><a href="#Scalability" class="headerlink" title="Scalability"></a>Scalability</h5><ul>
<li>DS can be existed in different scale:</li>
<li>The smallest: 2 workstations + 1 file server</li>
<li>Local area network (LAN): <ul>
<li>hundreds workstations </li>
<li>Several file servers</li>
<li>Print servers</li>
</ul>
</li>
<li>Internetwork:<ul>
<li>Several LANS interconnected</li>
</ul>
</li>
</ul>
<h5 id="Fault-Tolerance"><a href="#Fault-Tolerance" class="headerlink" title="Fault Tolerance"></a>Fault Tolerance</h5><ul>
<li>The design of fault-tolerant computer systems is based on:<ul>
<li>Hardware redundancy: the use of redundant components</li>
<li>Software recovery: the design of programs to tolerate (process group) or recover from faults</li>
</ul>
</li>
</ul>
<h5 id="Transparency"><a href="#Transparency" class="headerlink" title="Transparency"></a>Transparency</h5><ul>
<li>Hidden from the user (application) programmer of separation of components;</li>
<li>Achieve a single system image to make everyone into thinking that the collection of machines is simply an old-fashioned time-sharing system.</li>
<li>Access transparency <ul>
<li>Enable local and remote information to be accessed using identical operations.</li>
</ul>
</li>
<li>Location transparency <ul>
<li>Enable the information objects to be accessed without knowledge of their location (users need not tell where resources are located).</li>
</ul>
</li>
<li>Concurrency transparency <ul>
<li>Enable several processes to operate concurrently using shared information objects without interference (multiple users can share resources automatically).</li>
</ul>
</li>
<li>Replication transparency <ul>
<li>Enable multiple replicas to be used to increase reliability and performance without user knowledge of how many replicas exist.</li>
</ul>
</li>
<li>Failure transparency <ul>
<li>Enable concealment of faults, allowing users to complete their tasks despite the failure of hardware or software components.</li>
</ul>
</li>
<li>Migration transparency <ul>
<li>Allow information objects move within a system without changing their name or affecting users.</li>
</ul>
</li>
<li>Performance transparency <ul>
<li>Allow the system to be configured to improve performance as loads vary.</li>
</ul>
</li>
<li>Scaling transparency <ul>
<li>Allow the system and applications to expand in scale without change to the system structure or the application algorithms.</li>
</ul>
</li>
<li>Parallelism transparency <ul>
<li>Allow the program to be executed in parallel without users knowledge.</li>
</ul>
</li>
</ul>
<h4 id="1-4-User-Requirements"><a href="#1-4-User-Requirements" class="headerlink" title="1.4 User Requirements"></a>1.4 User Requirements</h4><h5 id="Functionality"><a href="#Functionality" class="headerlink" title="Functionality"></a>Functionality</h5><p>A distributed system should bring an improvement over the services provided by any single computer through enhancements of:</p>
<ul>
<li>Sharing across a network can bring access to a richer variety of resources.</li>
<li>Parallel and Fault-tolerant applications.</li>
</ul>
<p>How to migrate a multi-user centralized computing to distributed computing? </p>
<ul>
<li>Adapt existing operating systems<ul>
<li>Continue to use existing operating system software that has been adapted for networking.</li>
<li>e.g. add servers to UNIX or Sun Network File System.</li>
</ul>
</li>
<li>Move to an entirely new operating system designed specifically for distributed system.<ul>
<li>Existing software becomes unusable.</li>
</ul>
</li>
<li>Emulation<ul>
<li>Move to a new OS designed for DS which can emulate one or more existing OS.</li>
<li>Existing and new distribution software can run side-by-side.</li>
</ul>
</li>
</ul>
<h5 id="Re-configurability"><a href="#Re-configurability" class="headerlink" title="Re-configurability"></a>Re-configurability</h5><ul>
<li>Short-term<ul>
<li>A failed process, computer or network component is replaced by another, working counterpart.</li>
<li>Overload is shifted from over-loaded to less-loaded machines to increase the total throughput of the DS.</li>
<li>To reduce network communications, data are moved from a machines to the others to make the data accessible.</li>
</ul>
</li>
<li>Medium&#x2F;long term evolution<ul>
<li>To accommodate heterogeneous components and assign new task or to upgrade the existing machines.</li>
</ul>
</li>
</ul>
<h5 id="Quality-of-Service"><a href="#Quality-of-Service" class="headerlink" title="Quality of Service"></a>Quality of Service</h5><ul>
<li>Performance<ul>
<li>Speed up the response of software components in a distributed system;</li>
</ul>
</li>
<li>Reliability and availability<ul>
<li>Fault-tolerance;</li>
</ul>
</li>
<li>Security<ul>
<li>Apply a reasonable degree of security applied to the data stored and transmitted with a distributed system.</li>
</ul>
</li>
</ul>
<h4 id="1-5-Basic-Design-Issues"><a href="#1-5-Basic-Design-Issues" class="headerlink" title="1.5 Basic Design Issues"></a>1.5 Basic Design Issues</h4><ul>
<li>Naming<ul>
<li>Name resources or objects in order to access them.</li>
</ul>
</li>
<li>Communication<ul>
<li>Optimize the communication implementations in distributed systems while retaining a high level programming model for its use.</li>
</ul>
</li>
<li>Software structure<ul>
<li>Define interface and good abstraction of data and services.</li>
</ul>
</li>
<li>Workload allocation<ul>
<li>Deploy computers and communications to achieve optimum performance and use of resources.</li>
</ul>
</li>
<li>Consistency maintenance<ul>
<li>How to balance consistency &amp; performance?</li>
</ul>
</li>
<li>Security<ul>
<li>How to secure message transfer in a distributed system?</li>
</ul>
</li>
</ul>
<h3 id="2-Inter-process-Communication"><a href="#2-Inter-process-Communication" class="headerlink" title="2. Inter-process  Communication"></a>2. Inter-process  Communication</h3><p>Why we need Inter-process Communication (IPC)?</p>
<ul>
<li>The components of a distributed system are both logically and physically separated</li>
<li>They must communicate in order to interact.</li>
</ul>
<img src="https://pic.imgdb.cn/item/628537cb0947543129f29b82.jpg" style="zoom:67%;" />

<h4 id="2-1-Communication-Patterns"><a href="#2-1-Communication-Patterns" class="headerlink" title="2.1 Communication Patterns"></a>2.1 Communication Patterns</h4><ul>
<li><p>Client-server communication </p>
<ul>
<li>request and reply messages provide the basis for communication between clients and servers.</li>
<li>The idea of the model is to structure the distributed systems as a group of cooperating processes, i.e. the servers, that offer services to the users, namely, the clients.</li>
</ul>
<img src="C:\Users\win10\AppData\Roaming\Typora\typora-user-images\image-20220519024605386.png" alt="image-20220519024605386" style="zoom:67%;" />
</li>
<li><p>Group communication</p>
<ul>
<li><p>some messages are sent to several processes in a group.</p>
</li>
<li><p>Applications are composed of large numbers of peer processes running on separate computers and the pattern of communication between them depends entirely on application requirements.</p>
<img src="https://pic.imgdb.cn/item/62853f710947543129f5f028.jpg" style="zoom: 50%;" /></li>
</ul>
</li>
</ul>
<h4 id="2-2-Data-Passing"><a href="#2-2-Data-Passing" class="headerlink" title="2.2 Data Passing"></a>2.2 Data Passing</h4><ul>
<li>For any two computers to exchange data value, we need to map data structures and data items to messages.</li>
<li>Data structure must be flattened before transmission and rebuilt on arrival.  (I.e., flattening of structured data into a sequence of basic data)</li>
<li>On receiving data stream, the data structure must be rebuilt.</li>
<li>Marshalling<ul>
<li>the process of taking a collection of data items and assembling them into a form suitable for transmission in a message;</li>
</ul>
</li>
<li>Unmarshalling<ul>
<li>the process of disassembling them on arrival to produce an equivalent collection of data items at the destination;</li>
</ul>
</li>
<li>Usually a language preprocessor (interface compiler) can be used to generate marshalling &#x2F; unmarshalling operations automatically.</li>
<li>When an IPC primitive is encountered involving data item of the above type, the preprocessor generates code to do the marshalling (for a send) or unmarshalling (for a receive) based on the type description.</li>
</ul>
<p><strong>JSON (JavaScript Object Notation)</strong></p>
<img src="https://pic.imgdb.cn/item/628540bd0947543129f678bf.jpg" style="zoom:67%;" />

<h4 id="2-3-Synchronization"><a href="#2-3-Synchronization" class="headerlink" title="2.3 Synchronization"></a>2.3 Synchronization</h4><ul>
<li>A central issue in the communication structure;</li>
<li>2 types of operations<ul>
<li>Blocking: the invocation blocks the execution of its invoker.</li>
<li>Non-blocking: the invocation does not block the execution of its invoker.</li>
</ul>
</li>
</ul>
<p><strong>Blocking</strong></p>
<ul>
<li><p>Blocking Send</p>
<ul>
<li>Issuing process blocks (i.e., control is not passed back) until the message has been sent and received.</li>
</ul>
</li>
<li><p>Blocking Receive</p>
<ul>
<li>Issuing process blocks until a message has arrived and passed to the process.</li>
</ul>
<img src="https://pic.imgdb.cn/item/6285420d0947543129f6f1cc.jpg" style="zoom: 67%;" /></li>
</ul>
<h5 id="Blocking-vs-Non-blocking"><a href="#Blocking-vs-Non-blocking" class="headerlink" title="Blocking vs. Non-blocking"></a>Blocking vs. Non-blocking</h5><p><strong>Non-blocking</strong></p>
<ul>
<li><p>Non-blocking send</p>
<ul>
<li>Issuing process continues (i.e. control is passed back) execution after the message has been copied out of the process’s environment.</li>
</ul>
</li>
<li><p>Non-blocking receive</p>
<ul>
<li>Issuing process continues if there is no message waiting to be received. Receiver process will have to be notified later on message arrival, either by polling or interrupt mechanism.</li>
</ul>
<img src="C:\Users\win10\AppData\Roaming\Typora\typora-user-images\image-20220519030126394.png" alt="image-20220519030126394" style="zoom: 67%;" /></li>
</ul>
<h5 id="Synchronous-vs-Asynchronous-Communication"><a href="#Synchronous-vs-Asynchronous-Communication" class="headerlink" title="Synchronous vs. Asynchronous Communication"></a>Synchronous vs. Asynchronous Communication</h5><ul>
<li>Drawback: Can lead to inefficiency due to waiting<ul>
<li>high overhead and less efficiency.</li>
</ul>
</li>
<li>Solution: time-out<ul>
<li>Receive (A, msg, TO);<ul>
<li>If a message is not arrived in TO seconds, the process will be unblocked (and the receive operation aborted).</li>
</ul>
</li>
<li>Send (B, msg, TO)<ul>
<li>Sender blocks and if the message is not received in TO seconds, the process will be unblocked.</li>
</ul>
</li>
</ul>
</li>
<li>Synchronous communication<ul>
<li>Blocking send and blocking receive;</li>
<li>Sender and receiver synchronize at point of message transfer.</li>
<li>Advantage: <ul>
<li>Can make definite assumptions on message send and receipt </li>
<li>Easy design and control of the distributed processes</li>
</ul>
</li>
</ul>
</li>
<li>Asynchronous communication<ul>
<li>Sender and receiver do not synchronize at message transfer.</li>
<li>Non-blocking send + non-blocking receive;</li>
<li>Non-blocking send + blocking receive (usual combination);</li>
</ul>
</li>
<li>More flexible and potentially more parallelism;</li>
<li>Less assumption can be said about sending and receiving - more difficult to verify program properties.</li>
<li>Non-blocking send requires buffering of messages.</li>
</ul>
<h4 id="2-4-Implementation"><a href="#2-4-Implementation" class="headerlink" title="2.4 Implementation"></a>2.4 Implementation</h4><p><strong>Process Location</strong></p>
<ul>
<li><p>A port is a location independent identifier which can be mapped into low-level address in order to deliver message.</p>
</li>
<li><p>In TCP&#x2F;IP, message destination addresses are Port number (used by the process) and Internet address of the computer (the process resides on), </p>
<ul>
<li>Send (portB, msg); </li>
<li>Receive(portB, msg);</li>
</ul>
<img src="https://pic.imgdb.cn/item/6285473f0947543129f8ece7.jpg" style="zoom:50%;" /></li>
</ul>
<p><strong>Unreliable vs. Reliable Messages</strong></p>
<ul>
<li>Unreliable message is used to refer to a single message transmitted from sender to receiver, without acknowledgement or retries. <ul>
<li>e.g. UDP only makes its “best effort” to deliver a message.</li>
</ul>
</li>
<li>Reliable message delivery may be constructed from an unreliable one by using acknowledgement.<ul>
<li>Positive ack: receivers send ack message whenever a message is received.</li>
<li>Negative ack: Receivers do not send ack message until something wrong (timeout or receiving any incorrect message).</li>
</ul>
</li>
</ul>
<p><strong>Client-Server Communication Protocol</strong></p>
<ul>
<li><p>Client-server model uses request-reply communication.</p>
<ul>
<li>Request-reply is normally synchronous because a client will wait for the reply.</li>
<li>Request-reply can be asynchronous in case that the client can afford to retrieve replies later.</li>
</ul>
<img src="https://pic.imgdb.cn/item/628549210947543129f97a72.jpg" style="zoom:67%;" />
</li>
<li><p>Communication failures</p>
<ul>
<li>Loss of request message: communication link fails &#x2F; network switch fails &#x2F; receiver’s node is down.</li>
<li>Loss of reply message: communication link fails &#x2F; network switch fails &#x2F; sender’s node is down.</li>
<li>Unsuccessful execution of the request: server crashes while executing the request.</li>
</ul>
</li>
<li><p>In the presence of communication failures three protocols are used for implementing various type of client-server communication.</p>
</li>
<li><p>The request (R) protocol</p>
<ul>
<li>Client issues a Send (server-id, request) and continues. It is suitable for cases in which there is no reply required from the server and that the client requires no confirmation that the request has been carried out.</li>
</ul>
<img src="https://pic.imgdb.cn/item/628549930947543129f9a33f.jpg" style="zoom:50%;" />
</li>
<li><p>The request-reply (RR) protocol</p>
<ul>
<li>Most commonly used; </li>
<li>The reply message from the server also acts as acknowledgment to the original request message.</li>
<li>A subsequent request from the client may be regarded as an acknowledgment of the server’s message.</li>
</ul>
<img src="https://pic.imgdb.cn/item/628549e40947543129f9b76d.jpg" style="zoom: 50%;" />
</li>
<li><p>The request-reply-acknowledge reply (RRA) protocol</p>
<ul>
<li>An acknowledgement will be sent back to the server after received the reply</li>
<li>The ack includes the request-Id and acknowledges all request messages up to that request-Id.</li>
<li>Although the exchange involves an additional message, it need not block the client as the acknowledgement may be transmitted after the reply has been given to the client, but it does use processing and network resources.</li>
</ul>
<img src="https://pic.imgdb.cn/item/62854a230947543129f9c86c.jpg" style="zoom:50%;" /></li>
</ul>
<h4 id="2-5-Other-Issues"><a href="#2-5-Other-Issues" class="headerlink" title="2.5 Other Issues"></a>2.5 Other Issues</h4><ul>
<li><p>Time-out </p>
<ul>
<li><p>occur when a request message is lost or the network becomes partitioned, or the server is overloaded (and hence slow); or the reply message is lost.</p>
</li>
<li><p>DoOperation repeats sending the request message N times (time-outs) before reporting failure.</p>
</li>
<li><p>It is impossible to distinguish between a process failure and a communication failure. When process does not reply after some agreed number, N of attempts to communicate with it, it is assumed to be unavailable. </p>
</li>
<li><p>The choice of N is difficult (?).</p>
</li>
</ul>
</li>
<li><p>Duplicated request messages</p>
<ul>
<li>Occur when request message is retransmitted (on time-outs).</li>
<li>Duplicates can be detected using Request-Id (like a sequence number) and discarded.</li>
</ul>
</li>
<li><p>Lost reply messages</p>
<ul>
<li>If the server has already sent the reply message, it may need to execute the request again to obtain the result. Re-executing is only possible for idempotent operation.</li>
</ul>
</li>
<li><p>An idempotent operation is an operation that can be performed repeatedly with the same effect as if it had been performed exactly once.</p>
</li>
<li><p>If server operation is not idempotent a record of past results (called history) can be kept. History can be kept from growing too large by using the RAA protocol, or discarding results which have passed a certain time limit.</p>
</li>
<li><p>Multipacket  messages</p>
<ul>
<li>Datagram with limited length (often as 8 kbytes).</li>
<li>Not enough if a request or reply is too large.</li>
<li>Solution with multipacket: a message made up of a sequence of datagrams.</li>
<li>Drawbacks: complicated in design and control (receive in sequence), low efficiency in retransmission.</li>
</ul>
</li>
</ul>
<h3 id="3-Time-in-Distributed-Systems"><a href="#3-Time-in-Distributed-Systems" class="headerlink" title="3. Time in Distributed Systems"></a>3. Time in Distributed Systems</h3><p>Time is an important and interesting issue in distributed systems because</p>
<ul>
<li>Internal (computer-to-computer) and external (computer-to-external)  synchronization;</li>
<li>Many algorithms depend upon clock synchronization, e.g. transaction.</li>
</ul>
<h4 id="3-1-Synchronizing-Physical-Clocks"><a href="#3-1-Synchronizing-Physical-Clocks" class="headerlink" title="3.1 Synchronizing Physical Clocks"></a>3.1 Synchronizing Physical Clocks</h4><ul>
<li>Physical clocks</li>
<li>Electronic devices that count oscillations occurring in a crystal at a definite frequency. </li>
<li>It is useful for keeping accurate time and time-stamping events, e.g., time in accounting records of connection. </li>
<li>Event is an action that appears to occur indivisibly.</li>
<li><strong>Sources of accurate timing signals:</strong> <ul>
<li>coordinated universal time (UTC)</li>
<li>Radio broadcast accuracy: 0.1 - 10 ms Satellite (Geostationary Operational Environment Satellite GOES) accuracy: 1 ms</li>
<li>Satellite (Global Positional System GPS) accuracy: 0.1 ms</li>
</ul>
</li>
<li><strong>Difficulties in distributed systems</strong><ul>
<li>Not all sites have direct access to accurate time sources such as GPS receivers.</li>
<li>Sites have to synchronize their local clocks with those have more accurate time. </li>
<li>Synchronization needs to be done periodically due to clock drift: they count time at different rates, and so diverge.</li>
</ul>
</li>
</ul>
<h5 id="Cristian’s-method"><a href="#Cristian’s-method" class="headerlink" title="Cristian’s method"></a>Cristian’s method</h5><p>A central time server process S supplies the time according to its clock upon request.</p>
<img src="https://pic.imgdb.cn/item/62854d0d0947543129fa8e50.jpg" style="zoom:67%;" />

<img src="https://pic.imgdb.cn/item/62854d320947543129fa976c.jpg" style="zoom:67%;" />

<ul>
<li>If a process P requests the time in a message mr, and receives the time value t  in a message mt, then it could set its clock to the time t + Ttrans, where Ttrans is the time taken to transmit mt from the server S to P.</li>
<li>Ttrans can be variant. We may say, Ttrans &#x3D; min + x, where x &#x3D; 0 and min is the time of message transmission if no other processes and no other messages. </li>
<li>min can be measured or conservatively estimated but x is still unknown!</li>
</ul>
<img src="https://pic.imgdb.cn/item/62865cdb0947543129c30757.jpg" style="zoom:67%;" />

<img src="https://pic.imgdb.cn/item/62865cf60947543129c3131e.jpg" style="zoom:67%;" />

<ul>
<li>Let Tround be the total round trip time to send the request mr and receive the reply mt, then P should estimate its clock as t + Tround &#x2F; 2 (Tround can be measured or conservatively estimated ).</li>
<li>The accuracy is ±(Tround &#x2F; 2 - min).</li>
<li>Problem: single-server failure.</li>
<li>Solution: group synchronization time server.</li>
</ul>
<img src="https://pic.imgdb.cn/item/628660320947543129c4717a.jpg" style="zoom:67%;" />

<p><strong>Exercise</strong></p>
<p>Consider a host using Cristian’s method to synchronize its clock with a time server T and got the following records. Assume the total delay of transmitting a message from the host to the time server or vice versa is 10ms.</p>
<img src="https://pic.imgdb.cn/item/6286622c0947543129c52ac0.jpg" style="zoom:80%;" />

<ul>
<li><p>Which of these times should be used to set its clock?  To what time should it set? Estimate the accuracy of the setting.</p>
<p><strong>24 (14:22:10.564)</strong></p>
<p><strong>Time&#x3D;14:22:10.564+12ms&#x3D;14:22:10.576</strong></p>
<p><strong>Accuracy: 12-min&#x3D;+&#x2F;- 2ms</strong></p>
</li>
<li><p>What will the answer of part (a) change if the total delay is 9ms?</p>
<p><strong>Time&#x3D;No change</strong></p>
<p><strong>Accuracy: +&#x2F;-3ms</strong></p>
</li>
<li><p>If it is required to synchronize the host’s to within +&#x2F;- 1 ms. Discuss how to achieve it. Assume 9ms total delay is used</p>
<p><strong>Keep synchronize until the round-trip is 20ms</strong></p>
</li>
</ul>
<h5 id="The-Berkeley-algorithm"><a href="#The-Berkeley-algorithm" class="headerlink" title="The Berkeley algorithm"></a>The Berkeley algorithm</h5><ul>
<li><p>An algorithm for internal synchronization in BSD UNIX.</p>
</li>
<li><p>(Unlike Cristian’s) In a group sites, one is chosen as coordinator (master). It periodically polls the other sites (slaves) to synchronize their clocks.</p>
</li>
<li><p>Master estimates the slaves’ clock times by observing round trip time (like Cristian’s). It averages the time obtained (including its own).</p>
</li>
<li><p>The average (with probabilities) can cancel out individual clock’s run fast or slow.</p>
</li>
<li><p>Accuracy depends on round-trip time between master and slaves.</p>
</li>
<li><p>Master sends time rate adjust value (+ or -) to slaves, requesting them to adjust their time rates.</p>
</li>
<li><p>Master takes fault-tolerant average.</p>
</li>
</ul>
<img src="https://pic.imgdb.cn/item/628665af0947543129c6a016.jpg" style="zoom:67%;" />

<p><strong>Exercise</strong></p>
<p>A group of servers using Berkeley algorithm to synchronize their physical clocks.  The coordinator received the following replies:</p>
<img src="https://pic.imgdb.cn/item/628668a60947543129c7f470.jpg" style="zoom: 80%;" />

<ul>
<li><p>What is the clock difference between the coordinator and members?  Give the answer with respect to the coordinator.</p>
<img src="https://pic.imgdb.cn/item/628669090947543129c81cdc.jpg" style="zoom:80%;" />
</li>
<li><p>Draft the messages to be sent to each member and what should the member do after receiving the message?</p>
<img src="https://pic.imgdb.cn/item/62866b140947543129c8e8d4.jpg" style="zoom:80%;" />
</li>
<li><p>What if the clock of member C is running faster than the coordinator by 100ms? What is the potential problem of setting the clock value immediately based on the new adjustment?</p>
</li>
</ul>
<img src="https://pic.imgdb.cn/item/62866d7b0947543129c9d862.jpg" style="zoom:80%;" />

<h5 id="Network-Time-Protocol-NTP"><a href="#Network-Time-Protocol-NTP" class="headerlink" title="Network Time Protocol (NTP)"></a>Network Time Protocol (NTP)</h5><ul>
<li>A standard for clock synchronization throughout the Internet</li>
<li>Design aims and features<ul>
<li>To provide a service enabling clients across the Internet to be synchronized accurately to UTC;<ul>
<li>Employs statistical techniques for the filtering of timing data and it discriminates between the quality of timing data from different servers</li>
</ul>
</li>
<li>To provide a reliable service to losses of connectivity;<ul>
<li>Redundant servers and paths</li>
</ul>
</li>
<li>To enable clients to resynchronize sufficiently frequently;<ul>
<li>Scale to large numbers of client and servers</li>
</ul>
</li>
</ul>
</li>
</ul>
<img src="https://pic.imgdb.cn/item/628671f10947543129cc387c.jpg" style="zoom: 67%;" />

<ul>
<li>NTP server synchronize - UDP<ul>
<li>Multicast mode <ul>
<li>high speed LAN</li>
<li>Multicast periodically</li>
</ul>
</li>
<li>Procedure call mode<ul>
<li>Similar to the operation of Cristian’s algorithm</li>
<li>More accurate than multicast mode</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="3-2-Casual-Ordering-Happens-before"><a href="#3-2-Casual-Ordering-Happens-before" class="headerlink" title="3.2 Casual Ordering (Happens-before)"></a>3.2 Casual Ordering (Happens-before)</h4><p>Causal ordering</p>
<ul>
<li>x &lt;  y <ul>
<li>x and y are different events of the same process and x occurs before y</li>
</ul>
</li>
<li>s  &lt;  r<ul>
<li>s is a send event and r is the corresponding receive event</li>
</ul>
</li>
<li>y &lt; r <ul>
<li>y&lt;s and s&lt;r</li>
</ul>
</li>
</ul>
<p>Happen before: if  a &lt; b</p>
<img src="https://pic.imgdb.cn/item/6286761f0947543129cd9c26.jpg" style="zoom: 67%;" />

<img src="https://pic.imgdb.cn/item/6286763d0947543129cda652.jpg" style="zoom: 50%;" />

<ul>
<li><p>a &#x3D;&gt; b, b &#x3D;&gt; c, c &#x3D;&gt; d, d &#x3D;&gt; f &#x3D;&gt; a &#x3D;&gt; f.</p>
<ul>
<li>a and e that are not ordered by &#x3D;&gt; are concurrent, and write this a||e.</li>
<li>Logical clock can capture happened-before relation.</li>
<li>It is a monotonically increasing software counter, whose value need bear no particular relationship to any physical clock.</li>
</ul>
</li>
<li><p>Causal Order : If a &#x3D;&gt; b then a &lt; b</p>
<ul>
<li>a and b are causally related if  a &#x3D;&gt; b  or b &#x3D;&gt; a</li>
<li>a and b are independent if not a &#x3D;&gt; b  and not b &#x3D;&gt; a</li>
</ul>
</li>
</ul>
<h4 id="3-3-Logical-Time-x2F-Virtual-Time-x2F-Logical-Clock"><a href="#3-3-Logical-Time-x2F-Virtual-Time-x2F-Logical-Clock" class="headerlink" title="3.3 Logical Time &#x2F; Virtual Time &#x2F; Logical Clock"></a>3.3 Logical Time &#x2F; Virtual Time &#x2F; Logical Clock</h4><ul>
<li>Objective:<ul>
<li>Create virtual time without generating additional message</li>
</ul>
</li>
<li>Each entity x creates and maintains a logical clock Cx</li>
<li>For each event a occurring at x, C(a)&#x3D;Cx(a)</li>
<li>Denote the timestamp of event a at p by Cp(a) and the timestamp of event b at whatever process it occurred by C(b).</li>
</ul>
<p>To capture the happened-before relation &#x3D;&gt;, we have the following rules:</p>
<ul>
<li>LC1: Cp is incremented before each event is issued at process p: Cp :&#x3D; Cp + 1.</li>
<li>LC2:  When a process p sends a message m, it piggybacks on m the value t &#x3D; Cp.  On receiving (m,t), a process q computes Cq :&#x3D; max(Cq, t) and then applies LC1 before timestamping the event rcv(m).</li>
</ul>
<p>It guarantees a &#x3D;&gt; b     C(a) &lt; C(b).</p>
<img src="https://pic.imgdb.cn/item/628677750947543129ce0aa4.jpg" style="zoom:67%;" />

<img src="https://pic.imgdb.cn/item/628677950947543129ce179e.jpg" style="zoom:67%;" />

<p><strong>Logical Clock</strong></p>
<img src="https://pic.imgdb.cn/item/628678020947543129ce37c8.jpg" style="zoom: 67%;" />

<h4 id="3-4-Vector-Clock"><a href="#3-4-Vector-Clock" class="headerlink" title="3.4 Vector Clock"></a>3.4 Vector Clock</h4><img src="https://pic.imgdb.cn/item/628678730947543129ce5851.jpg" style="zoom:67%;" />

<ul>
<li><p>Each entity xi is equipped with a local integer counter Ci and increment its value by 1 at the beginning of every event like logical clock</p>
</li>
<li><p>Each entity Xi is equipped with a n-dimensional vector Vi of values, one for each entity in the network. The value of Vi[i] is equal to Ci</p>
</li>
<li><p>The value of Vi[j], i≠j is initially 0 and change only when a message arrives of Xi</p>
</li>
<li><p>Whenever an entity Xi sends a message to a neighbor Xj, it encloses the message the vector of values Vi</p>
</li>
<li><p>Whenever an entity Xj processes the arrival of a message with a vector vect of values, it updates its local vector Vj as follows: for all i≠j, it sets Vj[i]:&#x3D;max{vect[i],Vj[i]}</p>
</li>
<li><p>Partial Order</p>
<ul>
<li>A ≤ B if A[i] ≤ B[i] for all indices i</li>
</ul>
</li>
<li><p>Complete Causal Order</p>
<ul>
<li>A &lt; B if and only if A ≤ B and A[i] &lt; B[i] for at least an index i e.g. [2,4,3] &lt;[3,4,3]</li>
</ul>
</li>
<li><p>Property </p>
<ul>
<li>For any two events a and b at Xi, Vi(a)&lt;Vi(b) if and only if t(a)&lt;t(b)</li>
<li>If a is a sending event and b is a receiving event, then Vi(a)&lt;Vi(b)</li>
<li>a → b , then V(a)&lt;V(b)</li>
<li>V(a)&lt;V(b), then a → b??</li>
</ul>
</li>
</ul>
<h4 id="3-5-Exercise"><a href="#3-5-Exercise" class="headerlink" title="3.5 Exercise"></a>3.5 Exercise</h4><p>Consider the following events :</p>
<img src="https://pic.imgdb.cn/item/628679e30947543129ced4a5.jpg" style="zoom:67%;" />

<ul>
<li><p><strong>Assume the initial logical clocks of all process is zero, what are the logical clock values of E1, E4, E5, E8, E9 and E11?</strong></p>
<img src="https://pic.imgdb.cn/item/62867a230947543129cee7cf.jpg" style="zoom:80%;" />
</li>
<li><p><strong>What are the causal orders of E5 and E8, E6 and E9, and E2 and E11?</strong></p>
<p>E5 || E8, E6 -&gt; E9, E2-&gt;E11</p>
</li>
<li><p><strong>Can we work out the causal order of E2 and E11 by their logical clocks?</strong></p>
<p>No, although the clock value of E11 (11) is greater than E2 (1), there is no guarantee that E2 is happen before E11 (even E2 is actually happened before E11).  Consider E2 and E4, the clock value of E4 is greater than E2 but E2 and E4 are not causally related.  </p>
</li>
<li><p><strong>What are the vector clocks of E2 and E11? Can we work out the causal order of E2 and E11 by based on the vector clocks?</strong></p>
</li>
</ul>
<img src="https://pic.imgdb.cn/item/62867a7d0947543129cf01bb.jpg" style="zoom: 80%;" />

<h3 id="4-Distributed-Coordination"><a href="#4-Distributed-Coordination" class="headerlink" title="4. Distributed Coordination"></a>4. Distributed Coordination</h3><p>Wave and Traversal Algorithms</p>
<ul>
<li>Wave algorithms: Message passing schemes<ul>
<li>Broadcasting, synchronization and computing global functions</li>
</ul>
</li>
<li>Traversal algorithms: wave algorithms that the events of     <ul>
<li>computation are totally ordered by casuality</li>
</ul>
</li>
<li>Elementary tasks of most distributed algorithms<ul>
<li>Election, termination detection, mutual  exclusion</li>
</ul>
</li>
</ul>
<h4 id="4-1-Wave-Algorithms"><a href="#4-1-Wave-Algorithms" class="headerlink" title="4.1 Wave Algorithms"></a>4.1 Wave Algorithms</h4><ul>
<li><p>Distributed algorithms → collection of possible computations→ collection of events</p>
</li>
<li><p>Events are ordered partially (casual precedence relation)</p>
</li>
<li><p>A computation is a collection of events, partially ordered by the causal precedence relation</p>
</li>
<li><p>|C| &#x3D; number of events of computation C</p>
</li>
<li><p>Cp &#x3D; event occur in process p</p>
</li>
<li><p>decide (event) &#x3D; internal event</p>
</li>
</ul>
<p>A wave algorithm exchanges a finite number of messages and then makes a decision</p>
<p><strong>Wave Algorithm Requirements</strong></p>
<img src="C:\Users\win10\AppData\Roaming\Typora\typora-user-images\image-20220520011829964.png" alt="image-20220520011829964" style="zoom: 50%;" />

<ul>
<li><p>Initiators &#x2F; Starters</p>
<ul>
<li>Starts the execution of its local algorithm spontaneously i.e. triggered by some condition internal to the process</li>
<li>First event: internal&#x2F; send</li>
</ul>
</li>
<li><p>Non-initiators &#x2F; followers</p>
<ul>
<li>Become involved in the algorithm only when a message of the algorithm arrives and triggers the execution of the process algorithm</li>
<li>First event: receive</li>
</ul>
</li>
<li><p>Centralization vs Decentralized</p>
<ul>
<li>Centralized &#x2F; single source: Exactly one </li>
<li>Decentralized &#x2F; multi-source: initiator are subset of the process</li>
</ul>
</li>
<li><p>Topology : ring, tree, clique</p>
<img src="https://pic.imgdb.cn/item/62867c520947543129cfa2f6.jpg" style="zoom: 50%;" />
</li>
<li><p>Initial Knowledge </p>
<ul>
<li>Process identities : each process initially knows its own unique name</li>
<li>Neighbors’ identities: each process initially knows the name of its neighbors</li>
<li>Sense of direction</li>
<li>Number of decisions: number of process execute a decide event</li>
<li>Complexity: number of exchanged messages</li>
</ul>
</li>
</ul>
<p><strong>Application of Wave</strong></p>
<ul>
<li>Propagation of Information with feedback (PIF)<ul>
<li>Some information must be broadcast to all processes and certain processes must receive a notification of when the broadcast is complete</li>
</ul>
</li>
<li>Synchronization<ul>
<li>In each process q an event aq must be executed and in some processes an event bp must be executed, such that the execution of all aq events must have taken place temporally before any of the bp events is executed. In SYN algorithm the bp events will be considered as decide events.</li>
</ul>
</li>
<li>Computation of Infimum Function<ul>
<li>Function must be computed whose value depends essentially on the input of every process.</li>
</ul>
</li>
</ul>
<h4 id="4-2-Ring-Algorithm"><a href="#4-2-Ring-Algorithm" class="headerlink" title="4.2 Ring Algorithm"></a>4.2 Ring Algorithm</h4><img src="https://pic.imgdb.cn/item/6286817d0947543129d1df00.jpg" style="zoom: 50%;" />

<img src="https://pic.imgdb.cn/item/628681a10947543129d1e7f8.jpg" style="zoom: 50%;" />

<h4 id="4-3-Tree-Algorithm"><a href="#4-3-Tree-Algorithm" class="headerlink" title="4.3 Tree Algorithm"></a>4.3 Tree Algorithm</h4><ul>
<li>All leaves of the tree initiate the algorithm</li>
<li>If a process has received a message via each of its incident channels except one, the process sends a message via the remaining channel</li>
<li>Each process sends exactly one message in the algorithm</li>
<li>If a process has received a message via all of its incident channels it decides</li>
</ul>
<img src="https://pic.imgdb.cn/item/628682350947543129d2107f.jpg" style="zoom:67%;" />

<h4 id="4-4-Echo-Algorithm"><a href="#4-4-Echo-Algorithm" class="headerlink" title="4.4 Echo Algorithm"></a>4.4 Echo Algorithm</h4><ul>
<li>Initiator sends messages to all its neighbors</li>
<li>Upon receipt of the first message a non-initiator forwards messages to all its neighbors except the one from which the message was received</li>
<li>When a non-initiator has received messages from all its neighbors an echo is sent to the father</li>
<li>When the initiator has received a message from all its neighbors it decides.</li>
</ul>
<img src="https://pic.imgdb.cn/item/628682c30947543129d23785.jpg" style="zoom: 50%;" />

<img src="https://pic.imgdb.cn/item/628682df0947543129d23e0e.jpg" style="zoom:50%;" />

<h4 id="4-5-Polling-Algorithm"><a href="#4-5-Polling-Algorithm" class="headerlink" title="4.5 Polling Algorithm"></a>4.5 Polling Algorithm</h4><p>A process can decide if it has received a message from each neighbor</p>
<img src="https://pic.imgdb.cn/item/628683030947543129d2470b.jpg" style="zoom: 67%;" />

<h4 id="4-6-Phase-Algorithm"><a href="#4-6-Phase-Algorithm" class="headerlink" title="4.6 Phase Algorithm"></a>4.6 Phase Algorithm</h4><ul>
<li><p>The phase algorithm can be used in arbitrary directed networks, where channels can carry messages in one direction only</p>
</li>
<li><p>In-neighbors: processes that can send message to the node</p>
</li>
<li><p>Out-neighbors: processes to which the node can send message</p>
</li>
<li><p>Diameter of the network must be known</p>
</li>
<li><p>In the phase algorithm, each process sends exactly D messages to each out-neighbors</p>
<img src="https://pic.imgdb.cn/item/6286836e0947543129d265dd.jpg" style="zoom:80%;" /></li>
</ul>
<h4 id="4-7-Traversal-Algorithms"><a href="#4-7-Traversal-Algorithms" class="headerlink" title="4.7 Traversal Algorithms"></a>4.7 Traversal Algorithms</h4><p>The traversal algorithms has the following properties:</p>
<ul>
<li>In each computation there is one initiator which starts the algorithm by sending out exactly one message</li>
<li>A process, upon receipt of a message, either sends out one message or decides</li>
<li>The algorithm terminates in the initiator and when this happens, each process has sent a message at least once</li>
</ul>
<p>The first two properties imply that in each finite computation exactly one process decides. The algorithm is said to terminate in the single process that decides</p>
<p><strong>Traversing Cliques: Sequential Polling Algorithm</strong></p>
<img src="https://pic.imgdb.cn/item/6286848f0947543129d2b2d7.jpg" style="zoom:67%;" />

<img src="https://pic.imgdb.cn/item/628685a20947543129d2f2eb.jpg" style="zoom:67%;" />

<p><strong>Traversing Connected Network: Tarry’s Algorithm</strong></p>
<ul>
<li>R1. A process never forwards the token twice through the same channel</li>
<li>R2. A non-initiator forwards the token to its father (the neighbor from which it first received the token) only if there is no other channel possible according to rule R1</li>
</ul>
<img src="https://pic.imgdb.cn/item/6286877e0947543129d36b31.jpg" style="zoom:50%;" />

<img src="https://pic.imgdb.cn/item/628687930947543129d37101.jpg" style="zoom:50%;" />

<img src="https://pic.imgdb.cn/item/628687ad0947543129d37796.jpg" style="zoom:50%;" />

<h3 id="5-Distributed-Mutual-Exclusion-and-Election"><a href="#5-Distributed-Mutual-Exclusion-and-Election" class="headerlink" title="5. Distributed Mutual Exclusion and Election"></a>5. Distributed Mutual Exclusion and Election</h3><h4 id="5-1-Distributed-Coordination"><a href="#5-1-Distributed-Coordination" class="headerlink" title="5.1 Distributed Coordination"></a>5.1 Distributed Coordination</h4><ul>
<li>Why do we need distributed coordination?<ul>
<li>To prevent interference and ensure consistency before accessing resources, e.g. NFS file system to share a common text file.</li>
</ul>
</li>
<li>Distributed Mutual Exclusion (DME)<ul>
<li>A single process being given a privilege - the right to access shared resources - temporarily before another process is granted it.</li>
</ul>
</li>
</ul>
<h4 id="5-2-Distributed-Mutual-Exclusion"><a href="#5-2-Distributed-Mutual-Exclusion" class="headerlink" title="5.2 Distributed Mutual Exclusion"></a>5.2 Distributed Mutual Exclusion</h4><p>Basic requirements for DME concerning some resources:</p>
<ul>
<li>ME1: (safety) At most one process may execute in the critical section (CS) at a time.</li>
<li>ME2: (liveness and deadlock-free) A process requesting entry to the CS is eventually granted it (so long as any process executing in the CS eventually leaves it.)</li>
<li>ME3: (ordering) Entry to the CS should be granted in happened-before order.</li>
</ul>
<p>The central server algorithm: server manages a mutual exclusion token for a set of processes</p>
<img src="https://pic.imgdb.cn/item/62868b390947543129d456f8.jpg" style="zoom: 80%;" />

<ul>
<li><p>To employ a server that grants permission to enter a CS.</p>
</li>
<li><p>Assume only one CS is managed. The protocol is as follows:</p>
<img src="https://pic.imgdb.cn/item/62868b640947543129d479c1.jpg" style="zoom:67%;" />
</li>
<li><p>Satisfy ME1, ME2 and ME3.</p>
</li>
<li><p>Problem 1: the server could be performance bottleneck.</p>
</li>
<li><p>Problem 2: single point of failure.</p>
</li>
</ul>
<h5 id="5-2-1-DME-Ricart-and-Agrawala’s-algorithm"><a href="#5-2-1-DME-Ricart-and-Agrawala’s-algorithm" class="headerlink" title="5.2.1 DME: Ricart and Agrawala’s algorithm"></a>5.2.1 DME: Ricart and Agrawala’s algorithm</h5><ul>
<li><p>Based on distributed agreement;</p>
</li>
<li><p>No center server is required.</p>
</li>
<li><p>The basic idea is that processes that require entry to a critical section multicast a request message, and can enter it only when all the other processes have replied to this message.</p>
</li>
<li><p>Assumption: </p>
<ul>
<li>p1, …, pn know one another addresses. </li>
<li>All messages sent are eventually received and delivered</li>
<li>each pi keeps a logical clock, updated according to rules LC1 and LC2.</li>
</ul>
</li>
<li><p>Messages requesting the token are in the form &lt;T,pi&gt; where T is the sender timestamp and pi is the sender id.</p>
</li>
<li><p>Only one CS is concerned.</p>
</li>
<li><p>3 states: RELEASED, WANTED, HELD.</p>
</li>
</ul>
<img src="https://pic.imgdb.cn/item/62879abe09475431297389bb.jpg" style="zoom:67%;" />

<p>**Protocol: **</p>
<img src="https://pic.imgdb.cn/item/62879aea0947543129739c3d.jpg" style="zoom:67%;" />

<img src="https://pic.imgdb.cn/item/62879b0b094754312973acd7.jpg" style="zoom:67%;" />

<ul>
<li>Satisfy ME1, ME2 and ME3.</li>
<li>Protocol: to enter CS is associated with possession of a token.</li>
<li>Example: consider three processes p1, p2 and p3.<ul>
<li>p3 is not interested in the token.</li>
<li>p1 and p2 request it concurrently.</li>
<li>Timestamps of p1’ and p2’s requests are 41 and 34 respectively.</li>
<li>p3 replies all requests. p2 does not reply p1’s request since its timestamp is lower while p1 does.</li>
</ul>
</li>
</ul>
<h5 id="5-2-2-DME-Ring-based-Algorithm"><a href="#5-2-2-DME-Ring-based-Algorithm" class="headerlink" title="5.2.2 DME: Ring-based Algorithm"></a>5.2.2 DME: Ring-based Algorithm</h5><ul>
<li>One of the simple algorithm is to arrange the n processes into a logical ring.</li>
<li>There is a logical token circulate on the ring (say in clockwise direction).</li>
<li>If a process does not need to enter CS, it immediately forwards the token to its neighbor.</li>
</ul>
<img src="https://pic.imgdb.cn/item/62879bea0947543129741a70.jpg" style="zoom:67%;" />

<ul>
<li>A process wishes to enter the CS waits until it holds the token and retains it. </li>
<li>To leave the CS, the process releases the token to its neighbour. </li>
<li>If a process holding the token fails, an election is required to pick a unique process from the surviving members which regenerate the token and transmit it as before.</li>
<li>Care must be taken if the process is really failed. Two tokens may circulate on the ring!</li>
</ul>
<h5 id="5-2-3-Exercise"><a href="#5-2-3-Exercise" class="headerlink" title="5.2.3 Exercise"></a>5.2.3 Exercise</h5><p><strong>Discuss and compare the performance characteristics of two distributed mutual exclusion algorithms,</strong> </p>
<p><strong>(i) the central server algorithm</strong> </p>
<p><strong>(ii) the Ricard and Agrawala’s algorithm,</strong> </p>
<p><strong>in terms of message overheads, response time of requests, and reliability.</strong></p>
<img src="https://pic.imgdb.cn/item/62879ca40947543129747a28.jpg" style="zoom: 80%;" />



<p><strong>Message overheads</strong></p>
<p>For each token request:</p>
<ul>
<li>The central server algorithm: 3 messages (request, token, release)</li>
<li>The distributed algorithm: 2(N-1) messages.</li>
</ul>
<p>For N clients and all will access the CS</p>
<ul>
<li>The central server algorithm: 3N messages</li>
<li>The distributed algorithm: 2N(N-1) messages -&gt; 2N^2-2</li>
</ul>
<p><strong>Response Time:</strong></p>
<ul>
<li>In the central server algorithm, every token request from client requires two messages (request and grant). It waits for a round-trip message time to receive a reply from the server. </li>
<li>In the distributed algorithm using logical clocks, every token sends out (N-1) messages and waits for (N-1) replies. It waits for (N-1) servers.</li>
</ul>
<p>So, the response time of the central server algorithm is faster.</p>
<p><strong>Reliability:</strong></p>
<ul>
<li>The central server algorithm is more reliable since only the failure of the central server will make the system stop working.</li>
<li>For the distributed algorithm, any node failure will stop others from entering the critical section.</li>
</ul>
<h4 id="5-3-Distributed-Coordination-Election"><a href="#5-3-Distributed-Coordination-Election" class="headerlink" title="5.3 Distributed Coordination: Election"></a>5.3 Distributed Coordination: Election</h4><ul>
<li>A method to choose a unique process to play a particular role is called an election algorithm.</li>
<li>Main requirement is for the choice of elected process to be unique, even several processes call elections concurrently</li>
</ul>
<h5 id="Election-Bully-Algorithm"><a href="#Election-Bully-Algorithm" class="headerlink" title="Election: Bully Algorithm"></a>Election: Bully Algorithm</h5><ul>
<li><p>It can be used when the members of a group know the identities and addresses of the other members. </p>
</li>
<li><p>The algorithm selects the surviving member with the largest identity to be coordinator.</p>
</li>
<li><p>Assumption: communication is reliable but processes can fail during an election. </p>
</li>
<li><p>Three types of message:    </p>
<ul>
<li>election message - sent to announce an election, await for answer.</li>
<li>answer message - sent in response to an election message.</li>
<li>coordinator message - sent to announce the identity of the new coordinator.</li>
</ul>
</li>
<li><p>A process begins an election if it notices coordinator has failed.</p>
</li>
<li><p>The process that knows it has the highest identifier can elect itself as the coordinator simply by sending a coordinator message to all processes with lower identifiers. </p>
</li>
<li><p>Otherwise, a process can begin an election by sending an election message to those processes that have a higher identifier. </p>
</li>
<li><p>It then awaits an answer message in response. </p>
</li>
<li><p>If none arrives within a certain time, the process considers itself the coordinator, and sends a coordinator message to all processes with lower identifiers announcing this fact. </p>
</li>
<li><p>Otherwise (the process receives answer message(s)), the process waits a further limited period for a coordinator message to arrive from the new coordinator.</p>
</li>
<li><p>If none arrives, it begins another election.</p>
</li>
<li><p>If a process receives a coordinator message, it sets the identifier in the message as the new coordinator. </p>
</li>
<li><p>When an election message arrives to a node (with higher identifier), the node sends an answer and starts its own election (i.e. send election message to nodes with higher identifiers). </p>
</li>
<li><p>When the failed process is restarted, it begins election, if it has the highest identity, then it will decide it is coordinator, and announce this to other processes.</p>
</li>
<li><p>It becomes the coordinator even the current coordinator is functioning (so called bully).</p>
</li>
</ul>
<p>Stage 1: p1 detects the failure of the coordinator p4, so p1 and announces an election. (priority: p1&lt;p2&lt;p3)</p>
<img src="https://pic.imgdb.cn/item/6287a87609475431297a4cdc.jpg" style="zoom:80%;" />

<p>Stage 2: p2 and p3 send answer message to p1 and then begin their own elections.</p>
<img src="https://pic.imgdb.cn/item/6287a8a009475431297a6479.jpg" style="zoom:80%;" />

<p>Stage 3: Since p3 will receive no answer messages from p4 , it therefore decides it is the coordinator. But it fails before it sends out the coordinator message. Thus p1 timeouts. </p>
<img src="https://pic.imgdb.cn/item/6287a8c109475431297a75f4.jpg" style="zoom:80%;" />

<p>Stage 4: Since p1 notices the absence of a coordinator message and begins another election. This time p2 is elected coordinator.</p>
<img src="https://pic.imgdb.cn/item/6287a8dc09475431297a8720.jpg" style="zoom:80%;" />

<h5 id="Election-Ring-based-Election"><a href="#Election-Ring-based-Election" class="headerlink" title="Election: Ring-based Election"></a>Election: Ring-based Election</h5><ul>
<li>Assumption:<ul>
<li>processes are arranged in a logical ring</li>
<li>each process knows only how to communicate with its neighbor in, say, the clockwise direction. The process does not know the other processes.</li>
<li>All the processes remain functional and reachable</li>
</ul>
</li>
</ul>
<img src="C:\Users\win10\AppData\Roaming\Typora\typora-user-images\image-20220520224346234.png" alt="image-20220520224346234" style="zoom: 67%;" />

<img src="https://pic.imgdb.cn/item/6287a93c09475431297ab893.jpg" style="zoom: 67%;" />

<ul>
<li><p>Initially, every process is marked as a non-participant</p>
</li>
<li><p>Any process can begin an election by marking itself as a participant, placing its ID in an election msg and sending it to its neighbor.</p>
</li>
<li><p>When a process receives an election msg:</p>
<ul>
<li>if the arrived ID is greater, it forwards the msg to its neighbor</li>
<li>If the arrived ID is smaller and the process is not a participant then it substitutes its own ID in the msg and forwards it; but it does not forward the msg  if it is already a participant.</li>
</ul>
</li>
<li><p>On forwarding an election msg, the process marks itself as a participant</p>
</li>
<li><p><strong>If the received ID is that of the receiver itself, this process’s ID must be the greatest and it becomes the coordinator.</strong></p>
</li>
<li><p>The coordinator marks itself as a non-participant once more and sends an elected msg with its ID to its neighbour.</p>
</li>
<li><p>When a process other than the coordinator receives an elected msg, it marks itself as a non-participant and forwards the msg to its neighbor</p>
</li>
<li><p>Marking processes as participant or non-participant is to extinguish the concurrent election messages as soon as possible.</p>
</li>
<li><p>In the worst case, 3n-1 msg are needed to complete an election.</p>
</li>
</ul>
<p>**An Example with two concurrent tokens **</p>
<img src="https://pic.imgdb.cn/item/6287aaa609475431297b7b9a.jpg" style="zoom: 67%;" />

<h5 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h5><p><strong>In the ring-based election algorithm, the processes need to mark participant or non-participant in an election process.  Explain why.</strong></p>
<p>Ans: Two processes may start the election process at the same time leading to more than one election message.  The purpose of marking participant or non-participant is to extinguish the concurrent election message as soon as possible and always before the “winning” result has been announced.</p>
<h3 id="6-Replication"><a href="#6-Replication" class="headerlink" title="6. Replication"></a>6. Replication</h3><p>Replication is the maintenance of on-line copies of data and other resources.</p>
<img src="https://pic.imgdb.cn/item/6287abe809475431297c2cc7.jpg" style="zoom: 80%;" />

<p><strong>Motivation</strong></p>
<ul>
<li>Performance enhancement<ul>
<li>fast response time and increased throughput</li>
</ul>
</li>
<li>High availability <ul>
<li>clients can access an alternative server if the default server fails or becomes unreachable</li>
</ul>
</li>
<li>Fault tolerance<ul>
<li>provide guarantees of correct request processing even though one of the servers in a group fails</li>
</ul>
</li>
</ul>
<p><strong>Replication: Requirement</strong></p>
<ul>
<li>Replication transparency<ul>
<li>clients should not be aware that multiple physical copies of data exist.</li>
</ul>
</li>
<li>Consistency transparency<ul>
<li>unacceptable for different clients to obtain differing results</li>
<li>dealt with how to apply updates to different replica</li>
</ul>
</li>
</ul>
<p><strong>Ordering Models: Asynchronous</strong></p>
<ul>
<li>All client requests are processed by the local replica server</li>
<li>The local replica servers communicate updates to all other replica servers. Servers process updates as they arrive</li>
</ul>
<img src="https://pic.imgdb.cn/item/6287ac9109475431297c8b7f.jpg" style="zoom:67%;" />

<p><strong>Ordering Models: Totally Synchronous</strong></p>
<ul>
<li>All update requests are totally ordered. That is, requests are processed at all replicas in the same order.</li>
<li>A next request can be processed only after the previous update has been processed at all servers</li>
<li>Poor performance in response time and throughput</li>
<li>Scheme in between: Quorum-based Schemes (Min. vote for a decision&#x2F;event) and causality</li>
</ul>
<p><strong>Ordering Models</strong></p>
<img src="https://pic.imgdb.cn/item/6287ad9709475431297d1391.jpg" style="zoom:67%;" />

<h4 id="6-1-Basic-Architectural-Model"><a href="#6-1-Basic-Architectural-Model" class="headerlink" title="6.1 Basic Architectural Model"></a>6.1 Basic Architectural Model</h4><p>Three entities:</p>
<ul>
<li>Replica manager: maintains a physical copy of every logical data item</li>
<li>Client: makes a series of requests.</li>
<li>Front end: handles the requests of clients<ul>
<li>to communicate with replica managers  for clients’ requests</li>
</ul>
</li>
</ul>
<img src="https://pic.imgdb.cn/item/6287adeb09475431297d380b.jpg" style="zoom:67%;" />

<img src="https://pic.imgdb.cn/item/6287ae1509475431297d55eb.jpg" style="zoom:67%;" />

<h4 id="6-2-Ordering"><a href="#6-2-Ordering" class="headerlink" title="6.2 Ordering"></a>6.2 Ordering</h4><p>Total ordering</p>
<ul>
<li>If r1 and r2 are requests, then either r1 is processed before r2 at all replica managers or r2 is processed before r1 at all replica managers.</li>
</ul>
<p>Causal ordering</p>
<ul>
<li>If r1 and r2 are requests and r1 happened-before r2, then r1 is processed before r2 at all replica managers</li>
</ul>
<img src="https://pic.imgdb.cn/item/6287ae8609475431297db1de.jpg" style="zoom:67%;" />

<p><strong>Implementation Techniques for Ordering</strong></p>
<ul>
<li>Hold-Back: a received request is not processed by a replica manager until ordering constraints can be met.</li>
<li>E.g. a bulletin board item Re:Microkernels may be held back until an item concerning Microkernels has already appeared.</li>
</ul>
<img src="https://pic.imgdb.cn/item/6287b1630947543129801292.jpg" style="zoom:67%;" />

<p><strong>Implementing Total Ordering</strong></p>
<ul>
<li>Basic approach: assigns totally ordered identifiers to requests so that each RM (replica manager) site makes the same ordering decision based on these identifiers</li>
<li>Simple technique: use a process called sequencer to assign identifiers</li>
<li>All requests are sent to the sequencer as well as to the RM sites</li>
<li>The sequencer assigns consecutive increasing identifiers to requests and forwards them to the RM sites</li>
<li>Requests arriving at an RM site are held back until they are next in sequence.</li>
</ul>
<h4 id="6-3-Another-Algorithm-for-Total-Ordering"><a href="#6-3-Another-Algorithm-for-Total-Ordering" class="headerlink" title="6.3 Another Algorithm for Total Ordering"></a>6.3 Another Algorithm for Total Ordering</h4><ul>
<li>RM sites propose identifiers for requests to the corresponding FE (front end) sites as they arrive</li>
<li>The FE site use them to generate final identifiers</li>
<li>Each RM sites have:<ul>
<li>Fmax: the largest final identifier agreed so far</li>
<li>Pmax: its own largest proposed identifier</li>
</ul>
</li>
</ul>
<img src="https://pic.imgdb.cn/item/6287b22709475431298090fb.jpg" style="zoom:80%;" />

<ul>
<li><p>The FE site sends the request bearing a temporary identifier (larger than previously-used ones (F)) to all RM sites</p>
</li>
<li><p>Each RM at site i replies the proposed identifier (P)</p>
</li>
<li><p>Max(Fmax,Pmax) +1 + i&#x2F;N</p>
<ul>
<li>where N is the number of RM sites</li>
</ul>
</li>
<li><p>Each RM places the request on its hold-back queue which is ordered with the smallest request identifier</p>
</li>
<li><p>The FE site selects the largest proposed identifiers as the next agreed identifier.</p>
</li>
<li><p>The term i&#x2F;N makes the selected identifier unique</p>
</li>
<li><p>The FE site then notifies all the RM sites of the final identifier (Agreed ID)</p>
</li>
<li><p>The RM sites attach the final identifier to the request and re-order the request on the hold-back queue. Note that the final identifier may differ from the proposed identifier.</p>
</li>
<li><p>When the request at the front of the hold-back queue has been assigned its final identifier, it is transferred to the tail of the delivery queue.</p>
</li>
</ul>
<p>Advantages:</p>
<ul>
<li>straightforward to implement</li>
<li>no bottleneck or single point of failure</li>
</ul>
<p><strong>Implementing Causal Ordering</strong></p>
<ul>
<li>A bulletin board system with several replica as an example</li>
<li>Assumptions:<ul>
<li>bulletin board items are never removed</li>
<li>it is updated only by the addition of new items</li>
</ul>
</li>
<li>Vector Clock</li>
</ul>
<h4 id="6-4-Deadlocks"><a href="#6-4-Deadlocks" class="headerlink" title="6.4 Deadlocks"></a>6.4 Deadlocks</h4><ul>
<li>The use of locks (for exclusive use) can lead to deadlock.</li>
<li>Deadlock is a state in which each member of a group of transactions is waiting for some other member to release a lock.</li>
<li>A wait-for graph can be used to capture this waiting relationship.</li>
<li>A directed edge is added from node T to node U if transaction T is waiting for transaction U to release a lock.</li>
<li>As each transaction can wait for only one data item, the wait-for graph can be simplified to contain transactions only.</li>
</ul>
<p><strong>Deadlock with Read and Write Locks</strong></p>
<img src="https://pic.imgdb.cn/item/6287b400094754312981bc78.jpg" style="zoom: 67%;" />

<img src="https://pic.imgdb.cn/item/6287b45b09475431298203a7.jpg" style="zoom: 67%;" />

<img src="https://pic.imgdb.cn/item/6287b47609475431298216d9.jpg" style="zoom:67%;" />

<h5 id="Deadlock-Resolution"><a href="#Deadlock-Resolution" class="headerlink" title="Deadlock Resolution"></a>Deadlock Resolution</h5><ul>
<li>Deadlock prevention<ul>
<li>a transaction needs to get all locks when it starts</li>
<li>a transaction requests locks in a predefined order</li>
</ul>
</li>
<li>Deadlock detection<ul>
<li>find cycles in the wait-for graph and break the cycle</li>
<li>the choice of the transaction to abort is not simple</li>
</ul>
</li>
<li>Timeouts<ul>
<li>commonly used</li>
<li>the transaction is aborted to release the lock after timeout if there is another requesting transaction.</li>
</ul>
</li>
</ul>
<h5 id="Distributed-Deadlock"><a href="#Distributed-Deadlock" class="headerlink" title="Distributed Deadlock"></a>Distributed Deadlock</h5><ul>
<li>Detection of a distributed deadlock requires a global wait-for cycle to be found.</li>
<li>A simple solution: one server is dedicated to detect global deadlocks periodically<ul>
<li>combine local wait-for graphs to check for cycles</li>
<li>disadvantages: single point of failure, lack of fault tolerance and no ability to scale.</li>
<li>How often to detect deadlocks?</li>
</ul>
</li>
</ul>
<img src="https://pic.imgdb.cn/item/6287b5b1094754312982f619.jpg" style="zoom: 67%;" />

<img src="https://pic.imgdb.cn/item/6287b5c709475431298304a2.jpg" style="zoom:67%;" />

<img src="https://pic.imgdb.cn/item/6287b6a60947543129839121.jpg" style="zoom:67%;" />

<h5 id="Phantom-Deadlocks"><a href="#Phantom-Deadlocks" class="headerlink" title="Phantom Deadlocks"></a>Phantom Deadlocks</h5><ul>
<li>A deadlock is “detected” but is not really a deadlock</li>
<li>Phantom deadlocks occur due to the transmission delay of wait-for information</li>
<li>In the course of detection, a transaction that holds a lock will meanwhile have released.</li>
<li>If transactions are using two-phase locks, can phantom deadlock occur?</li>
</ul>
<img src="https://pic.imgdb.cn/item/6287b727094754312983e247.jpg" style="zoom:80%;" />

<h5 id="Edge-Chasing"><a href="#Edge-Chasing" class="headerlink" title="Edge Chasing"></a>Edge Chasing</h5><ul>
<li>Also called path pushing</li>
<li>The global wait-for graph is not constructed.</li>
<li>Instead, the servers forward messages called Probes that follow the edges of the wait-for graph.</li>
<li>A probe message consists of transaction wait-for relationships representing a path in the global wait-for graph.</li>
</ul>
<img src="https://pic.imgdb.cn/item/6287ba49094754312985c645.jpg" style="zoom:80%;" />

<ul>
<li>Initiation<ul>
<li>When a transaction T starts waiting for another transaction U which is waiting to access a data item at another server, the edge &lt;T-&gt;U&gt; is sent to the server of the data item where U is blocked.</li>
</ul>
</li>
<li>Detection<ul>
<li>On receiving probes, the server adds paths to the probes</li>
<li>If no cycle and a transaction is waiting for a data item at another server, probes are sent to the server.</li>
</ul>
</li>
<li>Resolution<ul>
<li>When deadlock is detected, a transaction is selected to abort.</li>
</ul>
</li>
</ul>
<h5 id="More-Than-One-Transaction-Aborted"><a href="#More-Than-One-Transaction-Aborted" class="headerlink" title="More Than One Transaction Aborted"></a>More Than One Transaction Aborted</h5><ul>
<li>Every transaction involved in a deadlock cycle can initiate the deadlock detection</li>
<li>This concurrent detection may lead to the abortions of more than one transaction</li>
<li>To solve it, transactions are given totally-ordered priorities.</li>
<li>The transaction with the lowest priority is aborted to break the deadlock</li>
</ul>
<h4 id="6-5-Exercise"><a href="#6-5-Exercise" class="headerlink" title="6.5 Exercise"></a>6.5 Exercise</h4><p><strong>A front end has vector timestamp (3,5,7) representing the data it has received from members of a group of three replica managers. The three replica managers have vector timestamps (5,2,8), (4,5,6) and (4,5,8), respectively. Which replica manager(s) could immediately satisfy a query from the front end, and what is the resultant time stamp of the front end? Which replica manager could incorporate an update from the front end immediately?</strong></p>
<p>Ans: The replica manager with the timestamp (4,5,8) can satisfy the query because the others have not yet processed at least one update seen by the front end.  The resulting timestamp of the front end will be (4,5,8). The replica manager with the timestamp (4,5,8) could incorporate the update.</p>
<h3 id="7-Distributed-File-Service"><a href="#7-Distributed-File-Service" class="headerlink" title="7. Distributed File Service"></a>7. Distributed File Service</h3><h4 id="7-1-Conventional-File-System"><a href="#7-1-Conventional-File-System" class="headerlink" title="7.1 Conventional File System"></a>7.1 Conventional File System</h4><ul>
<li>Responsible for the organization, storage, retrieval, naming, sharing and protection of files</li>
<li>Provides a set of programming operations that characterize the file abstraction</li>
<li>Design to store and manage large numbers of files, with facilities for creating, naming and deleting the files;</li>
<li>Control the access to files</li>
</ul>
<h4 id="7-2-Distributed-File-System"><a href="#7-2-Distributed-File-System" class="headerlink" title="7.2 Distributed File System"></a>7.2 Distributed File System</h4><ul>
<li>An essential component in distributed systems</li>
<li>Use to support the sharing of persistent storage and its information</li>
<li>Enable user programs to access remote files without copying them to a local disk</li>
<li>Provide access to files from diskless nodes</li>
<li>The most heavily-used services →its functionality and performance are critical</li>
</ul>
<h4 id="7-3-Design-Issues"><a href="#7-3-Design-Issues" class="headerlink" title="7.3 Design Issues"></a>7.3 Design Issues</h4><p>The features that are partially or wholly addressed by most current file services:</p>
<ul>
<li><p>Access transparency</p>
<ul>
<li>Client programs should be unaware of the distribution of files. </li>
<li>A single set of operations is provided for access to local and remote files. </li>
<li>Programs written to operate on local files are able to access remote files without modification.</li>
</ul>
</li>
<li><p>Location transparency</p>
<ul>
<li>Client programs should see a uniform file name space.</li>
<li>File or groups of files may be relocated without changing their names. </li>
<li>User programs see the same name space wherever they are executed.</li>
</ul>
</li>
<li><p>Concurrency transparency</p>
<ul>
<li>Changes to a file by one client should not interfere with the operation of other clients simultaneously accessing the same file.</li>
</ul>
</li>
<li><p>Failure transparency</p>
<ul>
<li>Correct operation of servers after failure of a client;</li>
<li>Correct operation of client programs in the face of lost message and temporary interruptions of the service.</li>
</ul>
</li>
<li><p>Performance transparency</p>
<ul>
<li>Client programs should continue to perform satisfactorily while the load on the file service varies within a specified a range.</li>
</ul>
</li>
<li><p>Scaling transparency</p>
<ul>
<li>The service can be extended by incremental growth to deal with a wide range of loads and system sizes.</li>
</ul>
</li>
<li><p>Replication transparency (for very large DS)</p>
<ul>
<li>A file may be represented by several copies of its contents at different locations. </li>
<li>It enables multiple servers to share the load of providing a service to many clients, enhancing the performance and scalability of service,</li>
<li>It enhances fault tolerance by enabling a client to locate another server that holds a copy of the file on the server that has just failed.</li>
</ul>
</li>
<li><p>Migration transparency (for very large DS)</p>
<ul>
<li>Neither client programs nor system administration tables in client nodes need to be changed when files are moved. </li>
<li>This allows file mobility - files, sets or volumes of files may be moved, either by system administrators or automatically.</li>
</ul>
</li>
<li><p>Hardware and operating system heterogeneity</p>
<ul>
<li>The service interfaces should be defined so that client and server software can be implemented for different OS and computers (for openness).</li>
</ul>
</li>
<li><p>The features that are not found in current file services but important in the future:</p>
<ul>
<li>Support for fine-grained distributed of data<ul>
<li>As the sophistication of distributed application grows, the sharing of data in small units will become necessary.</li>
<li>We need to locate individual objects near the processes that are using them and to cache them individually in those locations.</li>
</ul>
</li>
<li>Tolerance to network partitioning and detached operation<ul>
<li>When a file service includes the replication or caching of files, clients may be affected when a network partition occurs.</li>
<li>We need to handle the inconsistent database once a network partition occurs.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="7-4-File-Service-Components"><a href="#7-4-File-Service-Components" class="headerlink" title="7.4 File Service Components"></a>7.4 File Service Components</h4><img src="https://pic.imgdb.cn/item/6287c39c09475431298c0a9f.jpg" style="zoom: 67%;" />

<ul>
<li>Flat file service<ul>
<li>This service is concerned with implementing operations on the contents of files. </li>
<li>Unique file identifiers (UFIDs) are used to refer to files in all requests for flat file service operations.    (construction of UFID will be discussed later)</li>
</ul>
</li>
<li>Directory service<ul>
<li>provide a mapping between text names for files and their UFIDs. (UNIX uses hierarchic file name)</li>
</ul>
</li>
<li>Client module<ul>
<li>A single client module runs in each client computer</li>
<li>It integrates and extends operations of flat file service and directory service under a single application programming interface</li>
<li>The interface is available to user-level programs in client computers</li>
</ul>
</li>
</ul>
<h4 id="7-5-Interface-Flat-File-Service"><a href="#7-5-Interface-Flat-File-Service" class="headerlink" title="7.5 Interface (Flat File Service)"></a>7.5 Interface (Flat File Service)</h4><ul>
<li>RPC interface used by client modules</li>
<li>Not normally used directly by user-level programs</li>
</ul>
<img src="https://pic.imgdb.cn/item/6287c49d09475431298cad2f.jpg" style="zoom:67%;" />

<img src="https://pic.imgdb.cn/item/6287c4b909475431298cc07b.jpg" style="zoom:67%;" />

<img src="https://pic.imgdb.cn/item/6287c4d209475431298cd21b.jpg" style="zoom:67%;" />

<h4 id="7-6-Interface-Directory-Service"><a href="#7-6-Interface-Directory-Service" class="headerlink" title="7.6 Interface (Directory Service)"></a>7.6 Interface (Directory Service)</h4><p>To provide a service for translating text names to UFIDs.</p>
<img src="https://pic.imgdb.cn/item/6287c70a09475431298e335a.jpg" style="zoom:67%;" />

<img src="https://pic.imgdb.cn/item/6287c72409475431298e426c.jpg" style="zoom:67%;" />



<p><strong>Designed for fault tolerance</strong>:</p>
<ul>
<li>Repeatable operations: with the exception of create, the operations are idempotent. (repeated execution of create causes a space leak.)</li>
<li>Stateless servers: can be restarted after a failure and resume operation without need for clients or other server to restore any state.</li>
</ul>
<h4 id="7-7-Case-Studies-NFS"><a href="#7-7-Case-Studies-NFS" class="headerlink" title="7.7 Case Studies: NFS"></a>7.7 Case Studies: NFS</h4><ul>
<li><p>Network File System (NFS) is a distributed file system protocol originally developed by Sun Microsystems (Sun) in 1984, allowing a user on a client computer to access files over a computer network much like local storage is accessed. </p>
</li>
<li><p>Design goals:</p>
<ul>
<li>Emulation of the UNIX file system interface</li>
<li>Concurrent access</li>
<li>One-copy update semantics<ul>
<li>The file contents seen by all of the processes accessing or updating a given file are those that they would see if only single copy of the file contents existed.</li>
</ul>
</li>
</ul>
</li>
<li><p>Architecture</p>
<ul>
<li>The basic idea of NFS is to allow an arbitrary collection of clients and servers to share a common file system.</li>
<li>Each NFS server exports one or more of its directories for access by remote clients.</li>
</ul>
</li>
<li><p>The list of directories a server exports is maintained in the &#x2F;etc&#x2F;exports file, so these directories can be exported automatically whenever the server is booted. (migration transparency) </p>
</li>
<li><p>Clients access exported directories by mounting them.</p>
</li>
<li><p>When a client mounts a (remote) directory, it becomes part of its directory hierarchy. (location transparency)</p>
</li>
<li><p>Local and remote file systems accessible on an NFS client.</p>
<img src="https://pic.imgdb.cn/item/6287c83b09475431298ee785.jpg" style="zoom:67%;" />
</li>
<li><p>To access a file, there is (almost) no difference between a file located on a remote file server and a file located on the local disk. (performance transparency)</p>
</li>
<li><p>Once the mounts have been done, nothing special has to be done to achieve sharing. (access transparency)</p>
</li>
<li><p>If two or more clients mount the same directory at the same time, they can communicate by sharing files in their common directories.</p>
</li>
<li><p>The NFS service is stateless and most of the operations of the file access protocol are idempotent. (failure transparency)</p>
</li>
<li><p>It does not support replication transparency because it is a separate service.</p>
</li>
<li><p>It does not support concurrency transparency because it does not aim to improve upon the UNIX approach to the control of concurrent updates of files.</p>
<ul>
<li>NFS 4.0 has been extended to support.</li>
</ul>
</li>
<li><p>It is not scalability: maximum 50 clients, usually 5 - 10 clients.</p>
</li>
</ul>
<p>File Service Components</p>
<img src="https://pic.imgdb.cn/item/6287c8bc09475431298f2f7d.jpg" style="zoom:67%;" />



<ul>
<li><p>Virtual File System (VFS)</p>
<ul>
<li>Distinguish local and remote files;</li>
<li>Translate between UNIX-independent File Identifiers (FIDs) used by NFS and the internal file identifiers normally used in UNIX and other file systems.</li>
<li>UFID used by NFS is called file handle.</li>
<li>It is opaque (not observed) to users.</li>
<li>Filesystem identifier: a unique number that is allocated to each file system when it is created.</li>
</ul>
</li>
<li><p>NFS communication</p>
<ul>
<li>Port mapper enables Clients to bind to a service in a given host by name.</li>
<li>Clients use RPC to access Server interfaces.</li>
<li>NFS RPC interface is open.</li>
<li>Any authenticated request will be executed.</li>
<li>NFS handles the requests according to the UFIDs. (operations are similar to Read, Write, … in Flat file Service)</li>
</ul>
</li>
<li><p>i-node number: a number that serves to identify and locate the file within the file system in which the file is stored.</p>
</li>
<li><p>i-node generation number: increment each time the i-node number is reused).</p>
</li>
<li><p>file handle is made unique with i-node generation number.</p>
</li>
</ul>
<p>The format of UNIX-Independent File Identifiers (FIDs) used by NFS:</p>
<img src="https://pic.imgdb.cn/item/6287d16509475431299408a1.jpg" style="zoom: 80%;" />

<ul>
<li><p>NFS Client module</p>
<ul>
<li>Simulate UNIX standard file service;</li>
<li>Integrated with UNIX kernel;</li>
<li>Users can access files via system calls;</li>
<li>Single client module serves all user level processes (in a client machine) with shared cache.</li>
<li>Path name translation to file handle.</li>
</ul>
</li>
<li><p>NFS server module</p>
<ul>
<li>Integrated with UNIX kernel for performance, including access control and authentication.</li>
<li>E.g. Sun RPC requires client to present their User_Id &amp; Group_Id (in each RPC call), NFS server checks against access permission in file attribute.</li>
</ul>
</li>
<li><p>Mount service</p>
<ul>
<li>Mount requests are performed as a part of system initialization process. Client user process uses mount system call for further mounting when necessary.</li>
<li>Mount server uses an RPC interface, mount requests contains the pathname of a directory (to be mounted) and returns the file handle of the directory.</li>
</ul>
</li>
<li><p>Two kinds of mount services for remote file system: hard mounted or soft mounted;</p>
</li>
<li><p>Hard mounted (“try hard”): User process is suspended until request completed; If not completed (unavailable), client module retries until success. </p>
</li>
<li><p>Soft mounted (“do not try hard”): NFS client module returns a failure notification to user process after a few time-out retries. User process should handle the failure.</p>
</li>
<li><p>Most applications take hard mount (why?)</p>
</li>
<li><p>Automounter</p>
<ul>
<li>Dynamically mount a file system if “empty” mount point is referenced.The file system on the first server to respond is mounted at the client using the normal mount service.</li>
</ul>
</li>
<li><p><strong>Client caching</strong></p>
<ul>
<li>NFS client module caches results of: read, write, get-attribute, lookup and read-dir.</li>
<li>Consistency problem: Writing by a client does not result in the immediate updating of cached copies in other clients.</li>
</ul>
</li>
<li><p><strong>Server Caching</strong></p>
<ul>
<li>Enhance the performance NFS;</li>
<li>UNIX server cache<ul>
<li>File pages, directories and file attributes read from disk are retained in buffer cache.</li>
<li>Delayed-write: when a page has been altered, its page is written in disk only when the page is needed.</li>
<li>To prevent loss data, UNIX flushes altered page every 30 sec.</li>
</ul>
</li>
<li>NFS Server cache<ul>
<li>Read cache is the same as UNIX;</li>
<li>NFS flushes altered page immediately. Otherwise, clients (sharing a file) may lose some updates.</li>
</ul>
</li>
</ul>
</li>
<li><p>Solution 1: Timestamp (read)</p>
<ul>
<li>Each cache entry is associated with a Timestamp.     </li>
<li>A client requests last modification time from server;</li>
<li>Compares the time with its cache Timestamp; </li>
<li>If (time &gt; Timestamp) (time is more recent) then the cache blocks of the file are invalidated and must be re-fetched.</li>
</ul>
</li>
<li><p>Solution 2: Validation check (read)</p>
<ul>
<li>3 sec. for files &amp; 30 sec. for directories. </li>
<li>Files have vulnerability window of 3 sec. </li>
<li>Seems to be tolerable for most applications.</li>
</ul>
</li>
<li><p>Solution 3: Bio-demon( Block I&#x2F;O manager process) implemented by NFS client.</p>
<ul>
<li>Read-Ahead: a bio-demon is notified after each read request and it requests the transfer of the following file block from the server to the client cache.</li>
<li>Delayed-write: a block is sent to server if the block is filled.</li>
<li>Directory blocks are sent whenever a modification has occurred.</li>
</ul>
</li>
</ul>
<h4 id="7-8-Case-study-2-Apache-Hadoop"><a href="#7-8-Case-study-2-Apache-Hadoop" class="headerlink" title="7.8 Case study 2: Apache Hadoop"></a>7.8 Case study 2: Apache Hadoop</h4><ul>
<li>Apache Hadoop is a collection of open-source software utilities that facilitates using a network of many computers to solve problems involving massive amounts of data and computation. </li>
<li>It provides a software framework for distributed storage and processing of big data using the MapReduce programming model.</li>
<li>Hadoop File System was developed using distributed file system design. </li>
<li>It is fault-tolerant and designed using low-cost hardware.</li>
<li>To store such huge data, the files are stored across multiple machines. These files are stored in redundant fashion to rescue the system from possible data losses in case of failure.</li>
</ul>
<p><strong>Features of HDFS</strong></p>
<ul>
<li>It is suitable for the distributed storage and processing.</li>
<li>Hadoop provides a command interface to interact with HDFS.</li>
<li>The built-in servers of namenode and datanode help users to easily check the status of cluster.</li>
<li>Streaming access to file system data.</li>
<li>HDFS provides file permissions and authentication.</li>
</ul>
<img src="https://pic.imgdb.cn/item/6287db3f0947543129990545.jpg" style="zoom:67%;" />

<p><strong>Namenode</strong></p>
<ul>
<li>The namenode is the commodity hardware that contains the GNU&#x2F;Linux operating system and the namenode software.  </li>
<li>The namenode acts as the master server and it does the following tasks.</li>
<li>Manages the file system namespace.</li>
<li>Regulates client’s access to files.</li>
<li>It also executes file system operations such as renaming, closing, and opening files and directories.</li>
</ul>
<p><strong>Datanode</strong></p>
<ul>
<li>The datanode is a commodity hardware having the GNU&#x2F;Linux operating system and datanode software. For every node (Commodity hardware&#x2F;System) in a cluster, there will be a datanode. </li>
<li>These nodes manage the data storage of their system.</li>
<li>Datanodes perform read-write operations on the file systems, as per client request.</li>
<li>They also perform operations such as block creation, deletion, and replication according to the instructions of the namenode.</li>
</ul>
<p><strong>File Block</strong></p>
<ul>
<li>The file in HDFS will be divided into one or more segments and stored in individual data nodes. </li>
<li>These file segments are called as blocks. </li>
<li>In other words, the minimum amount of data that HDFS can read or write is called a Block. </li>
<li>The default block size is 64MB, but it can be increased as per the need to change in HDFS configuration.</li>
</ul>
<p><strong>Goals of HDFS</strong></p>
<ul>
<li><strong>Fault detection and recovery</strong> − Since HDFS includes a large number of commodity hardware, failure of components is frequent. Therefore HDFS should have mechanisms for quick and automatic fault detection and recovery.</li>
<li><strong>Huge datasets</strong> − HDFS should have hundreds of nodes per cluster to manage the applications having huge datasets.</li>
<li><strong>Hardware at data</strong> − A requested task can be done efficiently, when the computation takes place near the data. Especially where huge datasets are involved, it reduces the network traffic and increases the throughput.</li>
</ul>
<h4 id="7-8-Exercises"><a href="#7-8-Exercises" class="headerlink" title="7.8 Exercises"></a>7.8 Exercises</h4><p><strong>In-Class Exercise 1</strong></p>
<ul>
<li><p><strong>What kind transparency a DFS should be support? Which transparency is&#x2F;are required by large distributed system only?  Why?</strong></p>
</li>
<li><p><strong>Can you discuss how HDFS support any of the above transparency?</strong></p>
<p>Access Transparency</p>
<p>Location Transparency</p>
<p>Concurrency Transparency</p>
<p>Failure Transparency</p>
<p>Performance Transparency</p>
<p>Scaling Transparency</p>
<p>Replication Transparency</p>
<p>Migration Transparency</p>
</li>
</ul>
<p><strong>Revision Exercise 2</strong></p>
<p><strong>Consider the following diagram of NFS</strong></p>
<img src="https://pic.imgdb.cn/item/6287de3809475431299a7700.jpg" style="zoom:80%;" />

<ul>
<li><p><strong>What are the main functions of the Virtual file System and NFS Server?</strong></p>
<p>Virtual File System</p>
<ul>
<li>Distinguish local and remote files;</li>
<li>Translate between UNIX-independent File Identifiers (FIDs) used by NFS and the internal file identifiers normally used in UNIX and other file systems.</li>
</ul>
<p>NSF Server Module </p>
<ul>
<li>Integrated with UNIX kernel for performance, including access control and authentication</li>
</ul>
</li>
<li><p><strong>Which modules in the diagram may enhance by caching? Briefly explain your answer</strong></p>
<p>NFS client caching and server caching.</p>
<p>Client caching</p>
<ul>
<li>NFS client module caches results of: read, write, get-attribute, lookup and read-dir.</li>
<li>Consistency problem: Writing by a client does not result in the immediate updating of cached copies in other clients.</li>
</ul>
<p>Server Caching</p>
<p>……….see 7.7</p>
</li>
</ul>
]]></content>
      <categories>
        <category>HKU</category>
      </categories>
      <tags>
        <tag>HKU</tag>
      </tags>
  </entry>
  <entry>
    <title>java核心技术记录</title>
    <url>/2022/05/17/java-core/</url>
    <content><![CDATA[<p>本文记录了Java的一些核心技术和易混淆的概念</p>
<span id="more"></span>

<h4 id="对Java平台的理解"><a href="#对Java平台的理解" class="headerlink" title="对Java平台的理解"></a>对Java平台的理解</h4><p>Java本身是一种面向对象的语言，最显著的特性有两个方面：</p>
<ul>
<li><strong>“书写一次，到处运行”</strong>（Write once, run anywhere），能够非常容易地获得跨平台能力</li>
<li><strong>垃圾收集</strong>（GC, Garbage Collection），Java通过垃圾收集器（Garbage Collector）回收分配内存，大部分情况下，程序员不需要自己操心内存的分配和回收</li>
</ul>
<p>我们日常会接触到 <strong>JRE</strong>（Java Runtime Environment）或 <strong>JDK</strong>（Java Development Kit）。JRE是Java运行环境，包含了JVM和Java类库，以及一些模块等。JDK是JRE的一个超集，提供了更多工具，比如编译器，各种诊断工具等。</p>
<p>我们开发的Java的源代码，首先通过Javac编译称为字节码（bytecode），然后，在运行时，通过Java虚拟机（JVM）内嵌的解释器将字节码转换成为最终的机器码。但是常见的JVM都提供了JIT（Just-In-Time）编译器，也就是常说的动态编译器，JIT能够在运行时将热点代码编译成机器码，这种情况下部分热点代码就属于编译执行，而不是解释执行了。</p>
<p><strong>JVM的基础概念和机制</strong></p>
<ul>
<li>Java的类加载机制，常用版本JDK（如JDK8）内嵌的Class-Loader，如Bootstrap、Application和Extension Class-Loader</li>
<li>类加载大致过程：加载、验证、链接、初始化</li>
<li>自定义Class-Loader</li>
<li>垃圾收集的基本原理，最常见的垃圾收集器，如SerialGC，ParallelGC，CMS，G1等，要清楚适用于什么样的工作负载</li>
<li>JDK包含的各种工具：编译器、运行时环境、安全工具、诊断和监控工具</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的需求开发记录</title>
    <url>/2022/05/12/MAPI/</url>
    <content><![CDATA[<p>概述：本文记录了我开发第一个需求【挽留弹窗】的过程</p>
<span id="more"></span>

<h3 id="明确需求"><a href="#明确需求" class="headerlink" title="明确需求"></a>明确需求</h3><h4 id="芥末端"><a href="#芥末端" class="headerlink" title="芥末端"></a>芥末端</h4><img src="https://pic.imgdb.cn/item/627cacf10947543129944b06.jpg" alt="配置界面" style="zoom: 67%;" />

<p>为游戏中心2.0的活动配置界面【新人引导奖励】下方增加一个挽留弹窗的part，拥有两个字段：</p>
<ul>
<li>【开关】，开关开启时展示面向用户选项，关闭时不展示</li>
<li>【面向用户】只提供【全部】和【CRMID】选项</li>
</ul>
<img src="https://pic.imgdb.cn/item/627cac690947543129922080.jpg" style="zoom:80%;" />



<p>打开网页开发者工具，点开编辑，在【Network】中可以找到【detail】开头的name，在【Response】中可以复制Json代码到<code>json.cn</code>中进行解析，其中【bizConfig】字段中包含的也是一个Json实体，去掉转义字符可以同样进行解析发现对应的就是【订单返回奖励】到【新人引导奖励】这部分的内容。</p>
<img src="https://pic.imgdb.cn/item/627cac99094754312992e02b.jpg" style="zoom:80%;" />





<p>在network中【detail】的【Headers】中可以找到【Request URL】从而定位API的名称，方便于在API分组中搜索【path】进行寻找 。</p>
<p>另外点击【保存】后会调用一个save方法，同样也可以在相应的Headers中定位API的位置和名称</p>
<p>在【Shepherd】找到API接口后可以在【后端请求定义】中找到接口对应的名称，从而定位到了具体的代码（服务和方法）</p>
<p>例如如这里通过 <code>/activity/generic/detail</code>找到了MAPI下的 <code>queryActivityDetail</code>方法（<code>.client.service.activity.ActivityManagerMTService</code>）</p>
<p>通过 <code>/activity/generic/save</code>找到了MAPI下的 <code>saveActivity</code>方法（<code>.client.service.activity.ActivityManagerMTService</code>）</p>
<h4 id="C端"><a href="#C端" class="headerlink" title="C端"></a>C端</h4><p>需要调整主页加载接口</p>
<p>增加用户类型字段：retainPopDisplay, true表示满足挽留弹窗条件，false表示不满足</p>
<p>responseBody：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;retainPopDisplay&quot;</span><span class="punctuation">:</span><span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        ......</span><br><span class="line">        ......</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>如何定位对应的接口：</p>
<ul>
<li>APPMOCK中绑定自己的设备，选择测试环境，扫码美团优选APP测试版，然后在手机中的mis号和泳道中进行相应的设置，完成后点开游戏中心。</li>
<li>在APPMOCK中搜索【game】即可找到一些请求，其中后缀为loadMainView的为我们需要的这条请求，点入之后选择【Response】即可查看response的具体信息</li>
</ul>
<p><strong>写UT</strong></p>
<p>要尽量覆盖到各种可能性，覆盖每一行代码</p>
<h3 id="芥末端开发步骤"><a href="#芥末端开发步骤" class="headerlink" title="芥末端开发步骤"></a>芥末端开发步骤</h3><h4 id="DTO到VO"><a href="#DTO到VO" class="headerlink" title="DTO到VO"></a>DTO到VO</h4><p>找到要修改的位置：</p>
<ul>
<li><p>从 <code>ActivityManagerMTService</code>类中的 <code>queryActivityDetail</code>方法出发，从接口找到实现类，</p>
<ul>
<li>进入 <code>ActivityDetailResponse</code>查看返回类型的具体信息，</li>
<li>进入 <code>ActivityDetailConfigVO</code>，可以看到这里的对象与网络上detail的response中收到的Json格式的对象是对应起来的，包含baseInfo 基本信息， dispatchStrategy 分流信息， <strong>bizConfig 业务模型</strong>， ext 扩展信息，其中bizConfig是我们需要关注的东西，可以看到他是一个String。</li>
</ul>
</li>
<li><p>重新回到实现类 <code>ActivityManagerMTServiceImpl</code>，进入 <code>ActivityManagerLocalService</code>接口，可以看到 <code>supportActivityType()</code> <code>save()</code> <code>detail()</code>三个方法，进入<code>detail()</code>的实现，进入<code>convertDTO2VO</code>方法的实现，注意其中<code>setBizConfig</code>方法是我们需要设置bizConfig的关键代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ActivityDetailConfigVO</span> <span class="variable">vo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActivityDetailConfigVO</span>();</span><br><span class="line">vo.setBizConfig(resolveExtraConfigWhenQuery(vo.getBaseInfo(),activityDTO.getExtraConfig()));</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入 <code>resolveExtraConfigWhenQuery</code>接口再进入实现（GameCenter前缀的那一个）</p>
</li>
<li><p>这里可以进入 <code>GameCenterExtraConfigDTO</code>加入DTO字段和对应方法（注意DTO的修改需要在另一个包下）和 <code>GameCenterInfoConfigVO</code>（需要在里面加入VO字段和对应方法）</p>
</li>
<li><p>在同样的位置进入 <code>buildExtraConfigVO</code>方法，在其中new一个retainWindowVO对象，并将从DTO的对应数据set进去，<strong>完成DTO到VO对象的转换</strong></p>
</li>
</ul>
<h4 id="VO到DTO"><a href="#VO到DTO" class="headerlink" title="VO到DTO"></a>VO到DTO</h4><ul>
<li><p>从 <code>ActivityManagerMTService</code>类中的 <code>saveActivity</code>方法出发，从接口找到实现类，</p>
<ul>
<li>入参是<code>ActivityDetailConfigVO</code></li>
<li>进入 <code>PrimaryIdResponse</code>查看返回类型的具体信息，可以看见其中是一个Long类型的data</li>
<li>找到 <code>saveActivity</code>的实现，同样可以通过<code>ActivityManagerLocalService</code>找到其中的 <code>save()</code>方法，进入 <code>AbstractActivityManagerService</code>的实现</li>
</ul>
</li>
<li><p>可以看到save中需要更改的几处地方</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> PrimaryIdResponse <span class="title function_">save</span><span class="params">(ActivityDetailConfigVO vo)</span>&#123;</span><br><span class="line">	<span class="comment">//......</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//校验配置</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">bizCheckMsg</span> <span class="operator">=</span> checkBizConfig(vo.getBaseInfo(), vo.getBizConfig());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//0.init activity base info</span></span><br><span class="line">    <span class="type">ActivityDTO</span> <span class="variable">activityDTO</span> <span class="operator">=</span> init(vo);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//convert and check</span></span><br><span class="line">    activityDTO.setExtraConfig(resolveExtraConfigWhenSave(vo.getBaseInfo(), vo.getBizConfig()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在【校验配置】部分，进入 <code>checkBizConfig</code>方法位于 <code>GameCenterActivityManagerLocalServiceImpl</code>实现中使用的 <code>checkBaseAndBizParam</code>方法（返回String），注意需要在这里<strong>设置校验</strong></p>
</li>
<li><p>【convert and check】部分，进入<code>resolveExtraConfigWhenSave</code>方法位于 <code>GameCenterActivityManagerLocalServiceImpl</code>实现中使用的 <code>resolveExtraConfigWhenSave</code>（返回String），可以进入 <code>GameCenterConvert</code>类中的 <code>buildExtraDTO</code>方法，在这里进行对应的<strong>VO对象到DTO对象的转换</strong></p>
</li>
</ul>
<h4 id="设计RetainWindowDTO类"><a href="#设计RetainWindowDTO类" class="headerlink" title="设计RetainWindowDTO类"></a>设计RetainWindowDTO类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RetainWindowDTO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span>      ;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//弹窗开关</span></span><br><span class="line">    privateBoolean popSwitch;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//任务人群配置</span></span><br><span class="line">    <span class="keyword">private</span> CrowdConfigDTO crowd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意还需要在GameCenterExtraConfigDTO中加入一条对应的配置</p>
<h4 id="设计RetainWindowVO类"><a href="#设计RetainWindowVO类" class="headerlink" title="设计RetainWindowVO类"></a>设计RetainWindowVO类</h4><p>注意VO（ View Object）：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。</p>
<p>注解使用：</p>
<p><code>@ToString</code>：Lombok下自动生成toString()方法的注解</p>
<p><code>@ThriftStruct</code>：Thrift组件用于定义结构体</p>
<p>生成serialVersionUID：注意要安装<code>GenerateSerialVersionUID</code>插件 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@ThriftStruct</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RetainWindowVO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span>       ;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//弹窗开关</span></span><br><span class="line">    <span class="keyword">private</span> Boolean popSwitch;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//人群类型</span></span><br><span class="line">    <span class="keyword">private</span> CrowdConfigVO crowdConfig;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ThriftField(1)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getPopSwitch</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> popSwitch;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ThriftField</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPopSwitch</span><span class="params">(Boolean popSwitch)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.popSwitch = popSwitch;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ThriftField(2)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getCrowdConfig</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> crowdConfig;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ThriftField</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCrowdConfig</span><span class="params">(CrowdConfigVO crowdConfigVO)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.crowdConfig = crowdConfig;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="注意本地代码和远程代码的合并"><a href="#注意本地代码和远程代码的合并" class="headerlink" title="注意本地代码和远程代码的合并"></a>注意本地代码和远程代码的合并</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//切换分支命令</span><br><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure>



<h4 id="调试和测试"><a href="#调试和测试" class="headerlink" title="调试和测试"></a>调试和测试</h4><p>千万注意要在测试时要设置泳道 <code>Tracer.setSwimlane(&quot;泳道名称&quot;)</code>，否则默认是在默认渠道上进行的。并且要保证服务已经在泳道进行了部署，否则是在做无用功</p>
<h3 id="C端开发"><a href="#C端开发" class="headerlink" title="C端开发"></a>C端开发</h3><p>在core模块下的local包下找到 <code>GameCenterLocalService</code>类中的 <code>loadMainSceneInfo</code>方法：</p>
<ul>
<li><p>首先看返回类型 <code>MainSceneResp</code>，这里的字段其实是和网页上的Response中的内容对应的，我们要做的就是增加一个挽留窗口<code>retainPopDisplay</code>的字段，类型为Boolean</p>
</li>
<li><p>查看 <code>ActivityDTO</code>可以发现其中有<code>bizConfig</code>字段</p>
</li>
<li><p>在合并奖励结果部分写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.setRetainPopDisplay(mainSceneService.getRetainPopDisplay(req, activityDto));</span><br></pre></td></tr></table></figure></li>
</ul>
<p>在 <code>MainSceneService</code>类下新增一个 <code>getRetainPopDisplay(activityDto)</code>的方法，用于通过DTO的状态获取得到RetainPopDisplay的结果。这里要<strong>写清楚业务需求的逻辑关系（最关键的部分！）</strong>，目前的需求就是按照传入的dto和req中的id进行分析，看是否符合弹出挽留窗口的需求。</p>
<p>注意完成这部分的开发后要修改版本号，如从1.0.29到1.0.30-SNAPSHOT，然后在devtools网站上进行jar包的更新。</p>
<h3 id="修改http服务"><a href="#修改http服务" class="headerlink" title="修改http服务"></a>修改http服务</h3><p>首先需要全局搜索<code>grocerymkthd-game-center-client</code>jar包所在的pom.xml的位置并进行相应版本号的修改，才能导入我们开发完成后的字段和功能。</p>
<p>在web模块下，在controller包下找到 <code>GameCenterController</code>类中的 <code>loadMainView</code>方法，找到loadMainView的实现，在其中进入 <code>convertToResp</code>方法：</p>
<ul>
<li><p>查看返回类型 <code>GameCenterMainSceneResp</code>，在其中加入一个挽留弹窗状态 <code>retailPopDisplay</code> 的字段，返回类型为Boolean</p>
</li>
<li><p>加入以下一行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.setRetainPopDisplay(mainSceneResp.getRetainPopDisplay());</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="整体测试"><a href="#整体测试" class="headerlink" title="整体测试"></a>整体测试</h3><p>在ones中完成一些case的测试</p>
]]></content>
      <categories>
        <category>Projects</category>
      </categories>
      <tags>
        <tag>Projects</tag>
      </tags>
  </entry>
  <entry>
    <title>GET/POST</title>
    <url>/2022/05/10/GET-POST/</url>
    <content><![CDATA[<p>简介HTTP，并总结GET和POST的区别</p>
<span id="more"></span>

<h4 id="什么是-HTTP-？"><a href="#什么是-HTTP-？" class="headerlink" title="什么是 HTTP ？"></a>什么是 HTTP ？</h4><p>超文本传输协议（HTTP）的设计目的是保证客户端与服务器之间的通信。</p>
<p>HTTP 的工作方式是客户端与服务器之间的请求-应答协议。</p>
<p>web 浏览器可能是客户端，而计算机上的网络应用程序也可能作为服务器端。</p>
<p>举例：客户端（浏览器）向服务器提交 HTTP 请求；服务器向客户端返回响应。响应包含关于请求的状态信息以及可能被请求的内容。</p>
<p><strong>特点总结</strong>：</p>
<ul>
<li>基于tcp&#x2F;ip、一种网络应用层协议、超文本传输协议HyperText Transfer Protocol</li>
<li>工作方式：客户端请求服务端应答的模式</li>
<li>快速：无状态连接</li>
<li>灵活：可以传输任意对象，对象类型由Content-Type标记</li>
</ul>
<p>客户端请求request消息包括以下格式：请求行（request line）、请求头部（header）、空行、请求数据</p>
<img src="https://pic.imgdb.cn/item/627b775809475431298c5e7d.jpg" style="zoom:80%;" />

<p>服务端响应response也由四个部分组成，分别是：状态行、消息报头、空行、响应正文</p>
<p>or</p>
<p>＜request-line＞</p>
<p>＜headers＞</p>
<p>＜blank line＞</p>
<p>[＜request-body＞]</p>
<h5 id="request"><a href="#request" class="headerlink" title="request"></a>request</h5><p><strong>1.请求头</strong></p>
<p>请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。例如，GET &#x2F;index.html HTTP&#x2F;1.1。</p>
<p>HTTP协议的请求方法有GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT。</p>
<p> <strong>2.请求头部</strong></p>
<p>请求头部由关键字&#x2F;值对组成，每行一对，关键字和值用英文冒号“:”分隔。请求头部通知服务器有关于客户端请求的信息，典型的请求头有：</p>
<p>User-Agent：产生请求的浏览器类型。</p>
<p>Accept：客户端可识别的内容类型列表。</p>
<p>Host：请求的主机名，允许多个域名同处一个IP地址，即虚拟主机。</p>
<p><strong>3.空行</strong></p>
<p>最后一个请求头之后是一个空行，发送回车符和换行符，通知服务器以下不再有请求头。</p>
<p><strong>4.请求数据</strong></p>
<p>请求数据不在GET方法中使用，而是在POST方法中使用。POST方法适用于需要客户填写表单的场合。与请求数据相关的最常使用的请求头是Content-Type和Content-Length。</p>
<h5 id="response"><a href="#response" class="headerlink" title="response"></a>response</h5><p><strong>HTTP报文</strong></p>
<p>HTTP响应也由三个部分组成，分别是：状态行、消息报头、响应正文。</p>
<p>如下所示，HTTP响应的格式与请求的格式十分类似：</p>
<p>＜status-line＞</p>
<p>＜headers＞</p>
<p>＜blank line＞</p>
<p>[＜response-body＞]</p>
<p> 正如你所见，<strong>在响应中唯一真正的区别在于第一行中用状态信息代替了请求信息</strong>。状态行（status line）通过提供一个状态码来说明所请求的资源情况。</p>
<p>状态行格式如下：</p>
<p>HTTP-Version Status-Code Reason-Phrase CRLF</p>
<p>其中，HTTP-Version表示服务器HTTP协议的版本；Status-Code表示服务器发回的响应状态代码；Reason-Phrase表示状态代码的文本描述。状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。</p>
<ul>
<li>1xx：指示信息–表示请求已接收，继续处理。</li>
<li>2xx：成功–表示请求已被成功接收、理解、接受。</li>
<li>3xx：重定向–要完成请求必须进行更进一步的操作。</li>
<li>4xx：客户端错误–请求有语法错误或请求无法实现。</li>
<li>5xx：服务器端错误–服务器未能实现合法的请求。</li>
</ul>
<p>常见状态代码、状态描述的说明如下。</p>
<ul>
<li>200 OK：客户端请求成功。</li>
<li>400 Bad Request：客户端请求有语法错误，不能被服务器所理解。</li>
<li>401 Unauthorized：请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用。</li>
<li>403 Forbidden：服务器收到请求，但是拒绝提供服务。</li>
<li>404 Not Found：请求资源不存在，举个例子：输入了错误的URL。</li>
<li>500 Internal Server Error：服务器发生不可预期的错误。</li>
<li>503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常，举个例子：HTTP&#x2F;1.1 200 OK（CRLF）。</li>
</ul>
<h4 id="两种-HTTP-请求方法：GET-和-POST"><a href="#两种-HTTP-请求方法：GET-和-POST" class="headerlink" title="两种 HTTP 请求方法：GET 和 POST"></a>两种 HTTP 请求方法：GET 和 POST</h4><p>在客户机和服务器之间进行请求-响应时，两种最常被用到的方法是：GET 和 POST。</p>
<ul>
<li><strong>GET</strong> - 从指定的资源请求数据。</li>
<li><strong>POST</strong> - 向指定的资源提交要被处理的数据。</li>
</ul>
<h5 id="GET-方法"><a href="#GET-方法" class="headerlink" title="GET 方法"></a>GET 方法</h5><p><strong>请注意，查询字符串（名称&#x2F;值对）是在 GET 请求的 URL 中发送的：</strong></p>
<p>&#x2F;test&#x2F;demo_form.php**?name1&#x3D;value1&amp;name2&#x3D;value2**</p>
<p><strong>有关 GET 请求的其他一些注释：</strong></p>
<ul>
<li>GET 请求可被缓存</li>
<li>GET 请求保留在浏览器历史记录中</li>
<li>GET 请求可被收藏为书签</li>
<li>GET 请求不应在处理敏感数据时使用</li>
<li>GET 请求有长度限制</li>
<li>GET 请求只应当用于取回数据</li>
</ul>
<h5 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h5><p><strong>请注意，查询字符串（名称&#x2F;值对）是在 POST 请求的 HTTP 消息主体中发送的：</strong></p>
<p>POST &#x2F;test&#x2F;demo_form.php HTTP&#x2F;1.1<br>Host: runoob.com<br><strong>name1&#x3D;value1&amp;name2&#x3D;value2</strong></p>
<p><strong>有关 POST 请求的其他一些注释：</strong></p>
<ul>
<li>POST 请求不会被缓存</li>
<li>POST 请求不会保留在浏览器历史记录中</li>
<li>POST 不能被收藏为书签</li>
<li>POST 请求对数据长度没有要求</li>
</ul>
<h5 id="比较-GET-与-POST"><a href="#比较-GET-与-POST" class="headerlink" title="比较 GET 与 POST"></a>比较 GET 与 POST</h5><p>下面的表格比较了两种 HTTP 方法：GET 和 POST。</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">GET</th>
<th align="left">POST</th>
</tr>
</thead>
<tbody><tr>
<td align="left">后退按钮&#x2F;刷新</td>
<td align="left">无害</td>
<td align="left">数据会被重新提交（浏览器应该告知用户数据会被重新提交）。</td>
</tr>
<tr>
<td align="left">书签</td>
<td align="left">可收藏为书签</td>
<td align="left">不可收藏为书签</td>
</tr>
<tr>
<td align="left">缓存</td>
<td align="left">能被缓存</td>
<td align="left">不能缓存</td>
</tr>
<tr>
<td align="left">编码类型</td>
<td align="left">application&#x2F;x-www-form-urlencoded</td>
<td align="left">application&#x2F;x-www-form-urlencoded or multipart&#x2F;form-data。为二进制数据使用多重编码。</td>
</tr>
<tr>
<td align="left">历史</td>
<td align="left">参数保留在浏览器历史中。</td>
<td align="left">参数不会保存在浏览器历史中。</td>
</tr>
<tr>
<td align="left">对数据长度的限制</td>
<td align="left">是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。（只能发送2M大小的数据）</td>
<td align="left">无限制。</td>
</tr>
<tr>
<td align="left">对数据类型的限制</td>
<td align="left">只允许 ASCII 字符。</td>
<td align="left">没有限制。也允许二进制数据。</td>
</tr>
<tr>
<td align="left">安全性</td>
<td align="left">与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。  在发送密码或其他敏感信息时绝不要使用 GET ！</td>
<td align="left">POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</td>
</tr>
<tr>
<td align="left">可见性</td>
<td align="left">数据在 URL 中对所有人都是可见的。</td>
<td align="left">数据不会显示在 URL 中。</td>
</tr>
</tbody></table>
<ul>
<li>GET用于获取信息，是无副作用的，是幂等的，且可缓存</li>
<li>POST用于修改服务器上的数据，有副作用，非幂等（不能随意多次执行），不可缓存</li>
</ul>
<h4 id="其他-HTTP-请求方法"><a href="#其他-HTTP-请求方法" class="headerlink" title="其他 HTTP 请求方法"></a>其他 HTTP 请求方法</h4><p>下面的表格列出了其他一些 HTTP 请求方法：</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">HEAD</td>
<td align="left">与 GET 相同，但只返回 HTTP 报头，不返回文档主体。</td>
</tr>
<tr>
<td align="left">PUT</td>
<td align="left">上传指定的 URI 表示。</td>
</tr>
<tr>
<td align="left">DELETE</td>
<td align="left">删除指定资源。</td>
</tr>
<tr>
<td align="left">OPTIONS</td>
<td align="left">返回服务器支持的 HTTP 方法。</td>
</tr>
<tr>
<td align="left">CONNECT</td>
<td align="left">把请求连接转换到透明的 TCP&#x2F;IP 通道。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP/IP知识整理</title>
    <url>/2022/05/10/TCP-IP/</url>
    <content><![CDATA[<p>本文记录了TCP&#x2F;IP协议的一些基本知识，包括概念、功能和数据包格式</p>
<span id="more"></span>

<h3 id="1-TCP-x2F-IP-协议体系"><a href="#1-TCP-x2F-IP-协议体系" class="headerlink" title="1. TCP&#x2F;IP 协议体系"></a>1. TCP&#x2F;IP 协议体系</h3><p>为了减少网络设计的复杂性，大多数网络都采用了分层结构。不同的网络，层的数量、名字、内容和功能都不尽相同。相同网络中，一台机器上的第N层与另一台机器上的第N层利用第N层协议进行通信，协议基本上是双方关于如何进行通信所达成的一致。<br> TCP&#x2F;IP参考模型就是一个符合上面描述的网络体系结构。他是依据他的两个主要协议-TCP和IP而命名的。这一网络细分一般是七层：应用层、表示层、会话层、传输层、网络层、数据链路层、物理层。</p>
<h3 id="2-IP协议"><a href="#2-IP协议" class="headerlink" title="2. IP协议"></a>2. IP协议</h3><h4 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1  概念"></a>2.1  概念</h4><p>IP协议用于连接多个分组交换网，他提供在具有固定地址长度的主机之间传送数据报，以及根据各个数据包大小的不同，在需要时进行分段和重组大数据报的功能。IP协议仅限于将数据从源端传送到目的端，而不提供可靠的传输服务。在传送出错时，IP协议通过互联网控制消息协议（<a href="https://link.jianshu.com/?t=https://baike.baidu.com/item/ICMP">ICMP, Internet Control Message Protocol</a>）报告。</p>
<h4 id="2-2-功能"><a href="#2-2-功能" class="headerlink" title="2.2  功能"></a>2.2  功能</h4><p><strong>IP协议最基本的两个功能：寻址和分段</strong></p>
<p><strong>寻址：</strong>IP协议根据数据报头中所包含的目的地址将数据报传输到目的端，传送过程中对道路的选择称为<strong>路由</strong><br><strong>分段：</strong>当一些网络只能传送小数据报时，IP协议将数据报分段并在报头里面注明。数据包也可以被标记为“不可分段”，如果一个数据报被如此标记，那么在任何情况下都不准对他进行分段，如果因此到不了目的地，那么数据包就会在中途被丢弃。</p>
<h4 id="2-3-IP协议数据报的头："><a href="#2-3-IP协议数据报的头：" class="headerlink" title="2.3  IP协议数据报的头："></a>2.3  IP协议数据报的头：</h4><h5 id="2-3-1-IP协议头部格式"><a href="#2-3-1-IP协议头部格式" class="headerlink" title="2.3.1  IP协议头部格式"></a>2.3.1  IP协议头部格式</h5><img src="https://pic.imgdb.cn/item/627a268a09475431293fb0bb.jpg" style="zoom:80%;" />

<ul>
<li><strong>版本</strong>：记录数据报属于哪个版本的协议，例如可以用此区分出IPv4和IPv6，这个字段可以使得在不同版本间传递数据变得可行。</li>
<li><strong>头部长</strong>：标明IP协议报头有多长，<strong>其单位是32bit即4个字节</strong>，其最小值为5（<code>5 x 4 = 20 byte</code>，这个长度是除去可选项的长度），从上图中看出，其规定头部长为 4 bit，所以最大值为 15， <code>15 x 4 = 60 byte</code> 可以算出可选项长度最大为40个字节(即 <code>60 byte - 20 byte = 40 byte</code>)</li>
<li><strong>服务类型</strong>：用来指示当数据报在一个特定网络中传输时对实际服务质量的要求是什么，服务类型字段从左到右由一个3位的优先顺序字段、三个标志位(D、T、R)和两个保留位组成。优先顺序字段用于标志该数据报的优先级，D、T、R三个标志位分别代表是否对低延迟(Delay)、高吞吐量(Throughput)、高可靠性(Reliability)有要求，不过实际上，现在的路由器都忽略服务类型这个字段。</li>
<li><strong>总长</strong>：是指整个数据报的长度，包括头部和数据部分，<strong>单位是 1 个字节</strong>，从图上可以看出，规定总长位数为16bit，能存储最大数据为65535个字节的数据报。如长的数据报对大部分主机和网络来说是不现实的。所有主机必须能够接收长达576个字节的数据报(不管他们是以整个数据报到达还是以分片到达)，源端主机在确认目的地址能够接收大数据报的情况下才发送大于576字节的数据报。</li>
<li><strong>标识</strong>：该标识由发送者设定值，主要为了目的主机组装分段时判断新到的报文分段属于哪个分组，所有属于同一分组的报文分段都包含相同的标识。</li>
<li><strong>标记</strong>：长度为3bit，从前到后分别是<strong>保留位</strong>、<strong>不可分段位</strong>(DF, Don’t Fragment)和<strong>分段位</strong>(MF,More Fragment)。<br> 保留为始终为 0<br> DF位为 1 时表示该分组不能被分段<br> MF位为 1 时表示后面还有该分组的分段，在有分段的情况下，除了最后一个分段该位为 0 外，其他分段该位都为 1</li>
<li><strong>分段偏移</strong>：标记该分段在数据报的位置，<strong>单位是8个字节</strong>，第一个分段的偏移是 0</li>
<li><strong>生命期</strong>：用来限制分组生命周期的计数器，<strong>单位是秒</strong>，该字段长度为 8bit ，说明存储的最大数值是 255 ，在实际的应用过程中是以经过的节点计数的，每经过一个节点计数减 1 ，计数减到 0 时，分组要被丢弃。</li>
<li><strong>协议</strong>：指明IP层所封装的上层协议类型，如ICMP -&gt; 1、IGMP -&gt; 2 、TCP -&gt; 6、UDP -&gt; 17、EIGRP -&gt; 88 、OSPF -&gt; 89等</li>
<li><strong>头部效验和</strong>：只对头部进行效验，由于头部的一些字段始终在变化(例如：生命期字段)，头部效验和在每个节点都得重新进行计算。</li>
<li><strong>源地址</strong>：发送报文段的IP地址</li>
<li><strong>目的地址</strong>：接收报文段的IP地址</li>
<li><strong>可选项</strong>：可选项对于主机和网关的IP模块来说都是必须实现的，可选是指它们在特定数据报中是否出现是可选的，而不是指他们的实现，每个可选项都以 1 个字节表明它的类型。其长度从1~40个字节之间不固定，主要取决于设置的可选项数目，最终数据长度不够32位的倍数要填充 0 补齐，主要是为了让报头长度是32位的整数倍，一般正常的IP报文头部都是没有可选项的。<br> 目前已定义的可选项有 5 个，分别是安全性(指明数据报的机密程度)、严格路由选择(后面给出所规定的完全路由)、宽松路由选择(后面给出必须要经过的路由)、记录路由(记录下所经路由器附上其IP地址)、时间戳(要求所经路由器都附上其IP地址和时间标记)。</li>
</ul>
<h5 id="2-3-2-IP协议头部数据"><a href="#2-3-2-IP协议头部数据" class="headerlink" title="2.3.2  IP协议头部数据"></a>2.3.2  IP协议头部数据</h5><p>下面是我用抓包工具抓到的一个TCP断开的四次握手，其他的咱不管，先看第一次发送FIN类型数据包的IP报头部分</p>
<img src="https://pic.imgdb.cn/item/627a2795094754312944b85c.jpg" style="zoom:80%;" />

<p>最下面的是数据，去掉以前面<strong>太网首部</strong>的14个字节开始是IP数据报头部分，下面我们对着上面的格式来解析下</p>
<p>先单独把IP报头数据粘贴下来</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字节为单位 Hex+ASCII方式显示</span></span><br><span class="line"><span class="number">45</span> <span class="number">00</span> <span class="number">00</span> <span class="number">28</span> a2 ad <span class="number">40</span> <span class="number">00</span> <span class="number">39</span> <span class="number">06</span> <span class="number">0f</span> <span class="number">71</span> b7 <span class="number">83</span> <span class="number">87</span> <span class="number">91</span> <span class="number">0</span>a <span class="number">16</span> <span class="number">46</span> <span class="number">87</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//二进制 bit流显示为</span></span><br><span class="line"><span class="number">01000101</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00101000</span> </span><br><span class="line"><span class="number">10100010</span> <span class="number">10101101</span> <span class="number">01000000</span> <span class="number">00000000</span> </span><br><span class="line"><span class="number">00111001</span> <span class="number">00000110</span> <span class="number">00001111</span> <span class="number">01110001</span> </span><br><span class="line"><span class="number">10110111</span> <span class="number">10000011</span> <span class="number">10000111</span> <span class="number">10010001</span> </span><br><span class="line"><span class="number">00001010</span> <span class="number">00010110</span> <span class="number">01000110</span> <span class="number">10000111</span></span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>字段</th>
<th align="center">位置</th>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>版本</td>
<td align="center">0-3</td>
<td>0100</td>
<td>属于IPv4版本</td>
</tr>
<tr>
<td>头部长</td>
<td align="center">4-7</td>
<td>0101</td>
<td>表示头部长度为20个字节(<code>5 x 4 byte = 20 byte</code>)</td>
</tr>
<tr>
<td>服务类型</td>
<td align="center">8-31</td>
<td>00000000</td>
<td>….</td>
</tr>
<tr>
<td>总长</td>
<td align="center">32-47</td>
<td>00000000 00101000</td>
<td>IP数据报总长(不包括以太网首部) 为 40 个字节(<code>40 x 1 byte = 40 byte</code>)</td>
</tr>
<tr>
<td>标识</td>
<td align="center">48 - 50</td>
<td>010</td>
<td>保留位为 0 ， 不可分段数据报</td>
</tr>
<tr>
<td>分段偏移</td>
<td align="center">51 - 63</td>
<td>00000 00000000</td>
<td>数据偏移为0，数据报属于分组的第一个分段(其实这个数据包是不允许分段的，这里只是一个理论解释)</td>
</tr>
<tr>
<td>生命期</td>
<td align="center">64 - 71</td>
<td>00111001</td>
<td>生命期值是57，理论解释是还可以经过57个节点</td>
</tr>
<tr>
<td>协议</td>
<td align="center">72 - 79</td>
<td>00000110</td>
<td>值为6，表示上层为TCP协议</td>
</tr>
<tr>
<td>头部效验和</td>
<td align="center">80 - 95</td>
<td>00001111 01110001</td>
<td>….</td>
</tr>
<tr>
<td>源地址</td>
<td align="center">96 - 127</td>
<td>10110111 10000011 10000111 10010001</td>
<td>因为IP地址在网络中传播是用网络排序(大端)表示，所以直接按顺序解析，16进制表示：b7.83.87.91，转换成十进制表示为：183.131.135.145</td>
</tr>
<tr>
<td>目的地址</td>
<td align="center">128 - 159</td>
<td>00001010 00010110 01000110 10000111</td>
<td>十进制点形式表示为：10.22.70.135</td>
</tr>
<tr>
<td>可选项</td>
<td align="center">~</td>
<td>~</td>
<td>没有可选项</td>
</tr>
</tbody></table>
<h4 id="2-4-IP地址分类"><a href="#2-4-IP地址分类" class="headerlink" title="2.4  IP地址分类"></a>2.4  IP地址分类</h4><h5 id="2-4-1-IP地址分类"><a href="#2-4-1-IP地址分类" class="headerlink" title="2.4.1  IP地址分类"></a>2.4.1  IP地址分类</h5><p>IP地址包含网络号和主机号两部分，网络号代表一个子网络，主机号则表示该子网络下某一台具体的主机标号，IP地址根据功能和用途的不同可以划分为五类。<br> <strong>A 类地址</strong>：1 . 0 . 0 . 0 ~ 126 . 255 . 255 . 255，前 8 位为网络号，后 24 位为主机号<br> <strong>B 类地址</strong>：128 . 0 . 0 .0 ~ 191 . 255 . 255 . 255，前16位为主机号，后16位为主机号<br> <strong>C 类地址</strong>：192 . 0 . 0 . 0 ~ 223 . 255 . 255 . 255，前24位为网络号，后8位为主机号<br> <strong>D 类地址</strong>：224 . 0 . 0 .0 ~ 239 . 255 . 255 . 255<br> <strong>E 类地址</strong>：240 . 0 . 0 . 0 ~ 254 . 255 . 255 . 255</p>
<p>A、B、C三类地址是根据网络规模大小来分配给用户的，例如A类地址有24位的主机号，同一个网络下，一个 A 类地址可以容纳 2^24 - 2 &#x3D; 16777213 台主机，但是A类地址一共只能分配 126 个网络(这里只是做一个理论上的运算，并不代表实际分配情况)，所以这类地址一般分配给那些为数不多的大网络。D类地址用来多播，E类地址做保留地址。<br> <strong>另外还有一些特殊地址：</strong><br> ①. 例如主机号全为 1 是该网络的广播地址(例如在一个C类地址的网络中，192. 192 . 192 . 255 , 网络号是前面三个字节， 主机号是后面的一个字节，8位全为1，那么这个地址则是 网络号位 192.192.192.0这个网络的广播地址)。其中 255 . 255 . 255 . 255也是主机所在网络的广播地址；<br> ②. 主机号全为 0 则是该网络的网络地址；<br> ③. 127 . 0 . 0 . 0 ~ 127 . 255 . 255 . 255是主机会送地址，通常用来做网络测试，调试主机与路由是否连接畅通;<br> ④. <strong>其中 10 . 0 . 0 . 0 ~ 10 . 255 . 255 . 255、172 . 16 . 0 . 0 ~ 172 . 31 . 255 . 255、192 . 168 . 0 . 0 ~ 192 . 168 . 255 . 255保留给内部网络使用。</strong></p>
<h5 id="2-4-2-子网掩码、超网"><a href="#2-4-2-子网掩码、超网" class="headerlink" title="2.4.2  子网掩码、超网"></a>2.4.2  子网掩码、超网</h5><p>传统的IP地址分类确定是不能在网络内部使用路由，这样对于较大的网络，例如一个A类网络，由于主机数太多而变得难以管理，为此引入了子网掩码以从一个大网络上划分成一些小网络。子网掩码由一系列 0 和 1 构成，通过与IP地址做与运算来得到一个IP地址的网络号，例如A类地址的子网掩码是  255 . 0 . 0 . 0，B类地址的子网掩码是 255 . 255 . 0 . 0，C类地址的子网掩码是 255 . 255 . 255 . 0。要是想将一个B类地址(例：129 . 145 . 0 . 0)划分为多个小的C类网络，只需要将其子网掩码设为 255 . 255 . 255 . 0就可以了，这样 129 . 145 . 1 . 0和 129 . 145 . 2 . 0就属于不同网络了，因为虽然是B类地址，但是与给定的子网掩码做与运算出来的网络号不一样了，就属于不同网络。像这样通过子网掩码将一个大网络划分成若干个小网络叫做划分子网。<br> 超网：与子网功能相反，将若干个小网络划分成一个大网络。例如一个单位分配到了8个C类(前三个字节为网络号)地址：202 . 120 . 224 . 0 ~ 202 . 120 . 231 . 0，只要将其子网掩码设置为 255 . 255 . 248 . 0 就能使这些C类网络相通。(PS：这个结果是怎么得来的我现在还不明白，等日后明白了再补上)</p>
<h3 id="3、TCP协议"><a href="#3、TCP协议" class="headerlink" title="3、TCP协议"></a>3、TCP协议</h3><h4 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1  概念"></a>3.1  概念</h4><p>TCP协议是用于主机到主机的通信协议。他是面向连接的端到端的可靠协议，提供可靠字节流传输和对上层应用提供连接服务。TCP协议建立在IP协议的基础之上，可以根据IP协议提供的服务传输大小不定的数据段。IP协议负责数据的分段、重组及在多种网络和互联的网关间传输数据报。<br> 为了在不可靠的IP数据传输服务上实现面向连接的可靠数据传输，<strong>TCP协议使用序列号和应答号来保证其传输的可靠性，TCP协议是面向字节流的，每个字节都有一个序列号，一个数据段的第一个字节的序列号将随同数据段被发送，并且作为这个数据段的序列号。数据段同时还带有一个应答序号，表明它期望对方下次发送的字节的顺序号。</strong>当TCP协议传输一个数据段的时候，会同时将其放入重传队列，并启动一个定时器。如果这个数据段的应答能在定时器超时前收到，那么就将它从重传队列中移除，否则重发此数据段。应答未能收到，既可能是接收方未收到所发数据段，也可能是应答本身丢失。<br> TCP协议提供了端口来区分他所处理的不同数据流。由于端口号是由操作系统、TCP协议进程或用户自行确定，所以有可能不唯一。为此将网络地址同端口号组合起来形成套接字保证其在整个互联网络上的唯一性。</p>
<h4 id="3-2-TCP协议数据报的头"><a href="#3-2-TCP协议数据报的头" class="headerlink" title="3.2  TCP协议数据报的头"></a>3.2  TCP协议数据报的头</h4><h5 id="3-2-1-TCP协议头部格式"><a href="#3-2-1-TCP协议头部格式" class="headerlink" title="3.2.1  TCP协议头部格式"></a>3.2.1  TCP协议头部格式</h5><img src="https://pic.imgdb.cn/item/627a2b47094754312952acfa.jpg" style="zoom:80%;" />

<ul>
<li><strong>源端口</strong>：发送数据端套接字的端口号</li>
<li><strong>目的端口</strong>：目的套接字端口号</li>
<li><strong>顺序号</strong>：该数据报第一个数据字节的序列号，用作标识该报文段序列号</li>
<li><strong>应答号</strong>：存放的是发送方期望收到的数据段序号，算作是对收到报文的一个确认。ACK标志为 0 时，应答号部分无效(例如首个连接的[SYN]数据包)，ACK标志为1时应答号才有效</li>
<li><strong>TCP首部长度</strong>：标明TCP协议报头长度，<strong>单位是32bit即4个字节</strong>，其最小值为5（<code>5 x 4 = 20 byte</code>，这个长度是除去可选项的长度），从上图中看出，其规定头部长为 4 bit，所以最大值为 15， <code>15 x 4 = 60 byte</code>可以算出可选项长度大为40个字节(<code>60 byte - 20 byte = 40 byte</code>)</li>
<li><strong>保留位</strong>：保留字段长度为3位，必须全置为0</li>
<li><strong>标记</strong>：</li>
</ul>
<table>
<thead>
<tr>
<th align="center">标志位简写</th>
<th>全写</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">NS</td>
<td>Nonce</td>
<td>有效排除潜在的ECN滥用</td>
</tr>
<tr>
<td align="center">CWR</td>
<td>Congestion Window Reduced</td>
<td>拥塞窗口减少标志</td>
</tr>
<tr>
<td align="center">ECE</td>
<td>ECN-Echo</td>
<td>ECN标志</td>
</tr>
<tr>
<td align="center">URG</td>
<td>Urgent</td>
<td>紧急指针有效性标志</td>
</tr>
<tr>
<td align="center">ACK</td>
<td>Acknowledgment</td>
<td>确认序号有效性标志，一旦一个连接建立起来，该标志总被置为1</td>
</tr>
<tr>
<td align="center">PSH</td>
<td>Push</td>
<td>Push标志（接收方应尽快将报文段提交至应用层）</td>
</tr>
<tr>
<td align="center">RST</td>
<td>Reset</td>
<td>重置连接标志</td>
</tr>
<tr>
<td align="center">SYN</td>
<td>Synchronization</td>
<td>同步序号标志(建立连接时候使用)</td>
</tr>
<tr>
<td align="center">FIN</td>
<td>Fin</td>
<td>传输数据结束标志(断开连接时使用)</td>
</tr>
</tbody></table>
<ul>
<li><strong>窗口</strong>：表示发送方还可以接受数据大小，防止对方发送数据大于自己的缓冲数据区，从应答字段的顺序号开始计。</li>
<li><strong>效验和</strong>：效验和覆盖整个TCP报文段，强制字段，由发送端计算存储，接收端进行验证</li>
<li><strong>紧急指针</strong>：当Urgent标志置1时，紧急指针才有效</li>
<li><strong>可选项</strong>：可选项可以有 0 到多个，可选项字段以第一个字节表明其类型，第二个字节表示该可选项的总长度，后面紧跟可选项的值(长度为可选项的总长度-2)。可选项字段可以从任何字节边界开始，但若最后选项长度不足的话，要填充以补足定义的数据段长度。具体解释请看下面 <strong>3.2.2</strong></li>
</ul>
<h5 id="3-2-2-TCP报头可选项字段"><a href="#3-2-2-TCP报头可选项字段" class="headerlink" title="3.2.2  TCP报头可选项字段"></a>3.2.2  TCP报头可选项字段</h5><p><strong>TCP报头可选项字段的数据一般拼接格式(不是全部可选项都是这个格式)</strong><br> 类型<code>kind</code>(1byte) + 长度<code>length</code>(1byte) + 值<code>value</code>(length-2byte)</p>
<p><strong>TCP报头可选项和含义：</strong></p>
<table>
<thead>
<tr>
<th>kind</th>
<th>字段</th>
<th>长度(单位byte)</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>End of Option List (EOL)</td>
<td>0 (没有长度，只有类型)</td>
</tr>
<tr>
<td>1</td>
<td>No-Operation (NOP)</td>
<td>0 (没有长度，只有类型)</td>
</tr>
<tr>
<td>2</td>
<td>Maximum segment size (MSS)</td>
<td>1 (用一个字节来表示该可选项的总长)</td>
</tr>
<tr>
<td>3</td>
<td>Window scale</td>
<td>1 (用一个字节来表示该可选项的总长)</td>
</tr>
<tr>
<td>4</td>
<td>SACK Permitted</td>
<td>1 (用一个字节来表示该可选项的总长)</td>
</tr>
<tr>
<td>5</td>
<td>SACK</td>
<td>1 (用一个字节来表示该可选项的总长)</td>
</tr>
<tr>
<td>8</td>
<td>Timestamps</td>
<td>1 (用一个字节来表示该可选项的总长)</td>
</tr>
</tbody></table>
<ul>
<li><strong>①. End of Option List (EOL)：</strong><code>kind = 0</code>，当可选项总长度不够32位的倍数，用该可选项来填补，实际就是用 0 填补</li>
<li><strong>②. No-Operation (NOP)：</strong><code>kind = 1</code>，<strong>no operation</strong>，设计该字段主要是用来明确不同可选项之间的分割点，假设有多个可选项的情况下，一般用该可选项来分割下，因此在一个数据包中出现多个nop 也不奇怪的。<strong>注意 No-Operation 可选项没有长度和值，只有一个类型占一个字节，也就是有涉及到该可选项解析只需解析一个字节，后面可能是另一个可选项的类型</strong></li>
<li><strong>③. Maximum segment size (MSS)：</strong><code>kind = 2</code>，<strong>最大报文传输段</strong>，每一个TCP报文段中数据字段的最大长度，<strong>注意：只是数据部分的字段，不包括TCP的头部</strong>。TCP在三次握手中，每一方都会通告其期望收到的MSS（MSS只出现在SYN数据包中）如果一方不接受另一方的MSS值则定位默认值536byte。<br> MSS值太小或太大都是不合适，太小，例如MSS值只有1byte，那么为了传输这1byte数据，至少要消耗20字节IP头部+20字节TCP头部&#x3D;40byte，这还不包括其二层头部所需要的开销，显然这种数据传输效率是很低的。MSS过大，导致数据包可以封装很大，那么在IP传输中分片的可能性就会增大，接收方在处理分片包所消耗的资源和处理时间都会增大，如果分片在传输中还发生了重传，那么其网络开销也会增大。因此合理的MSS是至关重要的。MSS的合理值应为保证数据包不分片的最大值。对于以太网MSS可以达到1460byte (<code>MTU(1500byte) - IP首部(20byte) - TCP首部(20byte) = 1460byte</code>)。</li>
<li><strong>④. Window scale：</strong><code>kind = 3</code>，<strong>窗口扩大选项</strong>，我们知道TCP最大的窗口大小为65535byte，在早期网络这是够用的，但随着各种复杂网络的产生，特别是类似卫星通信这种时延和带宽都比较大的通信产生，需要更大窗口来满足性能和高吞吐率，于是窗口扩大选项便产生了。<br> 我们假设 主机A — 主机B 是一条高速的WAN链路，A向B发送大量数据，由于有足够带宽，那么A在很短时间内就可以发送完 65535byte 的数据，而由于窗口过小，A只能停止发送，直到B对A发送的数据进行ACK确认。假设通信距离较远，延时也由于距离的原因变大，这么一发一确认可能需要等上很长时间，在这个等待的时间里面 A-B 是没有实际数据发送的，因此大量的时间被浪费在了等待对方回应上。<br> 这个时候我们可以通过增大窗口的大小来使一次可以传输更多的数据，从而减少等待确认的时间。<br> 窗口扩大选项占值占一个字节，表示移位值S。新的窗口值等于TCP首部的窗口位数从16增大到（16+S）。这相当于把窗口值向左移动S位后获得实际的窗口大小。移位值准许使用的最大值是14，相当于窗口最大值增大到 <code>2^(16+14) = 1073741824 byte = 1048576 kb = 1024 M = 1GB</code>，方便理解和记忆一般用<code>TCP头中的窗口值 x 2^S</code>来表示实际窗口的大小。窗口扩大选项在TCP建立之初进行协商，如果已经实现了窗口扩大，当不再需要其扩大窗口时，发送S&#x3D;0选项就可以恢复到窗口大小为16位。</li>
<li><strong>⑤. SACK Permitted：</strong> <code>kind = 4</code>，<strong>选择确认选项可以使用</strong>，SACK Permitted 选项在TCP建立连接时由SYN数据包中加上(只有类型和长度，没有值)，表示该链接允许接下来SACK的实现。</li>
<li><strong>⑥. SACK：</strong> <code>kind = 5</code>，**选择确认选项(Selective Acknowledgements )**，我们假设TCP传输中有这种情况出现，收到的报文无差错，只是未按序列号，中间还缺少一些序列号，那么能否只传输缺少的数据，而不重传已经正确到达的数据？这就是选择确认的技术。<br> 举例：主机A向主机B传输3个数据包，五个包的序号分别是1 2 3，主机B只收到了序号为 1 和 3 的数据包，而中间的2没有收到，那么如果设置可选项SACK的值，这样就可以让A主机知道只传输丢失的序列号为2的块号。<br> 原理：拿上面的例子来说，丢了2号块，收到1和3块号的数据包，那么回给主机A的确认包对于设置SACK值来说就要有一个上下的边界(表明从序列号为多少的字节传输到序列号为多少的字节中间这段数据)，序列号在TCP报头中占4个字节，表示上下边界就需要消耗8个字节(4byte x 2)，由上面讲的可知IP可选项的最大长度为 40 个字节，加上表示SACK字段需要占用1个字节，表示长度也需要占一个字节，因此最多可以指明4个字块的边界信息( <code>(40 - 2) / 8 ≈ 4</code>)。</li>
<li><strong>⑦. Timestamps：</strong><code>kind = 8</code>，<strong>时间戳选项</strong>，时间戳选项占10个字节，其中最主要的字段时间戳字段（4字节）和时间戳回送回答字段（4字节）。<br> 时间戳选项主要的功能有两个：<ul>
<li>用来计算往返时间RTT，发送方在发送报文段时把当前时钟的时间值放入时间戳字段，接收方在确认该报文段时把当前时间赋值到时间戳回送回答字段。因此，发送方在收到确认报文后，可以准确计算出RTT。</li>
<li>PAWS:防止回绕的序号，我们知道序列号只有32位，而每增加2^32 &#x3D; 4294967295 个序列号后就会重复使用原来用过的序列号。假设我们有一条高速网络，通信的主机双方有足够大的带宽用来快速的传输数据。例如1Gb&#x2F;s的速率发送报文段，则不到35秒钟数据字节的序列号就会重复。这样对TCP传输带来混乱的情况。而采用时间戳选项，可以很容易的分辨出相同序列号的数据报，哪个是最近发送，哪个是以前发送的。</li>
</ul>
</li>
</ul>
<h5 id="3-2-3-TCP协议头部数据"><a href="#3-2-3-TCP协议头部数据" class="headerlink" title="3.2.3  TCP协议头部数据"></a>3.2.3  TCP协议头部数据</h5><p>下面是我用抓包工具抓到的一个TCP断开的四次握手，其他的咱不管，先看第一次发送FIN类型数据包的TCP数据的头部</p>
<img src="https://pic.imgdb.cn/item/627a2c49094754312955a407.jpg" style="zoom:80%;" />

<p>最下面的是数据，去掉以前面<strong>太网首部</strong> 14 个字节和<strong>IP报头</strong> 20 个字节开始是TCP数据报头部分，下面我们对着上面的格式来解析下</p>
<p>先单独把TCP头部数据粘贴下来</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字节为单位 Hex+ASCII方式显示</span></span><br><span class="line"><span class="number">00</span> <span class="number">50</span> d2 <span class="number">21</span> de ce <span class="number">92</span> <span class="number">2b</span> ba da c8 db <span class="number">50</span> <span class="number">11</span> <span class="number">01</span> <span class="number">9b</span> <span class="number">57</span> <span class="number">64</span> <span class="number">00</span> <span class="number">00</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">//二进制 bit流显示</span></span><br><span class="line"><span class="number">00000000</span> <span class="number">01010000</span> <span class="number">11010010</span> <span class="number">00100001</span> </span><br><span class="line"><span class="number">11011110</span> <span class="number">11001110</span> <span class="number">10010010</span> <span class="number">00101011</span> </span><br><span class="line"><span class="number">10111010</span> <span class="number">11011010</span> <span class="number">11001000</span> <span class="number">11011011</span> </span><br><span class="line"><span class="number">01010000</span> <span class="number">00010001</span> <span class="number">00000001</span> <span class="number">10011011</span> </span><br><span class="line"><span class="number">01010111</span> <span class="number">01100100</span> <span class="number">00000000</span> <span class="number">00000000</span>   </span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>字段</th>
<th align="center">位置</th>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>源端口</td>
<td align="center">0 - 15</td>
<td>00000000 01010000</td>
<td>网络字节排序解析，源端口为 80</td>
</tr>
<tr>
<td>目的端口</td>
<td align="center">16 - 31</td>
<td>11010010 00100001</td>
<td>目的端口 53793</td>
</tr>
<tr>
<td>顺序号</td>
<td align="center">32 - 63</td>
<td>11011110 11001110 10010010 00101011</td>
<td>顺序号为~</td>
</tr>
<tr>
<td>应答号</td>
<td align="center">64 - 95</td>
<td>10111010 11011010 11001000 11011011</td>
<td>确认号为~</td>
</tr>
<tr>
<td>TCP首部长度</td>
<td align="center">96 - 99</td>
<td>0101</td>
<td>长度为20字节 <code>5 x 4 byte = 29 byte</code></td>
</tr>
<tr>
<td>保留位</td>
<td align="center">100 - 102</td>
<td>000</td>
<td>~</td>
</tr>
<tr>
<td>标记</td>
<td align="center">103 - 111</td>
<td>0 00010001</td>
<td>ACK位为 1 标记应答号有效，FIN位为 1 表示该数据包为结束标识数据包</td>
</tr>
<tr>
<td>窗口</td>
<td align="center">112 - 127</td>
<td>00000001 10011011</td>
<td>窗口值为411，标识发送套接字缓存区最大容纳411字节数据</td>
</tr>
<tr>
<td>效验和</td>
<td align="center">128 - 143</td>
<td>01010111 01100100</td>
<td>~</td>
</tr>
<tr>
<td>紧急指针</td>
<td align="center">144 - 159</td>
<td>00000000 00000000</td>
<td>紧急指针标记位(URG)为1时这里的数据才有效</td>
</tr>
<tr>
<td>可选项</td>
<td align="center">~</td>
<td>~</td>
<td>~</td>
</tr>
</tbody></table>
<h4 id="3-3-TCP通信数据交互细节和实践"><a href="#3-3-TCP通信数据交互细节和实践" class="headerlink" title="3.3  TCP通信数据交互细节和实践"></a>3.3  TCP通信数据交互细节和实践</h4><p>关于TCP连接的三次握手、中间数据交互以及断开连接的四次握手理论部分请参考我前面的一片文章<a href="https://www.jianshu.com/p/1b71b6ff4334">套接字(Socket)编程(二) 内部通信原理</a>，这里就不做重复的解释了</p>
<h5 id="3-3-1-TCP建立连接的三次握手抓包数据部分"><a href="#3-3-1-TCP建立连接的三次握手抓包数据部分" class="headerlink" title="3.3.1  TCP建立连接的三次握手抓包数据部分"></a>3.3.1  TCP建立连接的三次握手抓包数据部分</h5><p>首先来看下抓包过程截图</p>
<img src="https://pic.imgdb.cn/item/627a2fdf0947543129600c42.jpg" style="zoom:80%;" />

<p>① 客户端发送[SYN]同步消息</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以太网头部+IP报头+TCP报头+TCP数据(字节为单位位 Hex+ASCII方式显示)</span></span><br><span class="line"><span class="number">88</span> <span class="number">25</span> <span class="number">93</span> <span class="number">02</span> b7 <span class="number">8</span>c <span class="number">78</span> <span class="number">4f</span> <span class="number">43</span> <span class="number">5b</span> <span class="number">56</span> <span class="number">75</span> <span class="number">08</span> <span class="number">00</span> <span class="number">45</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">40</span> <span class="number">00</span> <span class="number">40</span> <span class="number">06</span> f6 <span class="number">72</span> <span class="number">0</span>a <span class="number">16</span> <span class="number">46</span> <span class="number">87</span> cb d0</span><br><span class="line"><span class="number">27</span> d8 d2 <span class="number">23</span> <span class="number">01</span> bb <span class="number">2</span>e f0 <span class="number">89</span> c5 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> b0 <span class="number">02</span></span><br><span class="line">ff ff b3 <span class="number">39</span> <span class="number">00</span> <span class="number">00</span> <span class="number">02</span> <span class="number">04</span> <span class="number">05</span> b4 <span class="number">01</span> <span class="number">03</span> <span class="number">03</span> <span class="number">05</span> <span class="number">01</span> <span class="number">01</span></span><br><span class="line"><span class="number">08</span> <span class="number">0</span>a <span class="number">32</span> a6 <span class="number">80</span> <span class="number">43</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">04</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提取TCP报头+TCP数据(去掉以太网头部14byte和IP报头20byte)</span></span><br><span class="line">d2 <span class="number">23</span> <span class="number">01</span> bb </span><br><span class="line"><span class="number">2</span>e f0 <span class="number">89</span> c5 </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">b0 <span class="number">02</span> ff ff </span><br><span class="line">b3 <span class="number">39</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">02</span> <span class="number">04</span> <span class="number">05</span> b4 <span class="number">01</span> <span class="number">03</span> <span class="number">03</span> <span class="number">05</span> <span class="number">01</span> <span class="number">01</span> <span class="number">08</span> <span class="number">0</span>a <span class="number">32</span> a6 <span class="number">80</span> <span class="number">43</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">04</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span></span><br></pre></td></tr></table></figure>

<p>解析：从上面可以解析出源端口号为：0xd23 &#x3D; 353795；目的端口号：0x01bb &#x3D; 443；序列号：SEQ &#x3D; 0x2ef089c5；ACK &#x3D; 0x00000000；TCP报头长为：<code>0xb = 11(32 bit)，11 x 4 byte = 44 byte</code>，即TCP报头长为 44 个字节；窗口大小为 0xffff &#x3D; 65535 byte；<br> 保留位和标志位：0x002 &#x3D; 0b000000000010；<strong>按位解析标志位为 0b000000010</strong>，NS: 0，CWR: 0，ECE: 0，URG: 0，ACK: 0，PSH: 0，RST: 0，SYN: 1，FIN: 0，<strong>从解析里面可以看出该报文ACK字段无效，只有SYN字段有效，是第一个请求连接[SYN]同步数据报</strong>；<br> 可选项部分：可以看出该TCP报头最后的24个字节表示可选项，解析如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">02</span> <span class="number">04</span> <span class="number">05</span> b4            kind = <span class="number">2</span>, <span class="built_in">len</span> = <span class="number">4</span>，MMS Value = <span class="number">0x05b4</span> 表示MSS = <span class="number">1460</span><span class="type">byte</span></span><br><span class="line"><span class="number">01</span>                     kind = <span class="number">1</span>  No-Operation</span><br><span class="line"><span class="number">03</span> <span class="number">03</span> <span class="number">05</span>               kind = <span class="number">3</span>，<span class="built_in">len</span> = <span class="number">3</span>，value = <span class="number">0x05</span>  窗口选项偏移<span class="number">5</span>位，即实际窗口大小为 <span class="number">0xffff</span> x <span class="number">2</span>^<span class="number">5</span></span><br><span class="line"><span class="number">01</span>                     kind = <span class="number">1</span>  No-Operation</span><br><span class="line"><span class="number">01</span>                     kind = <span class="number">1</span>  No-Operation</span><br><span class="line"><span class="number">08</span> <span class="number">0</span>a <span class="number">32</span> a6 <span class="number">80</span> <span class="number">43</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   kind = <span class="number">8</span>，<span class="built_in">len</span> = <span class="number">10</span>  时间戳选项，Timestamp Value(TSval): <span class="number">0x32a68043</span> = <span class="number">849772611</span>，Timestamp echo reply(TSecr): <span class="number">0</span></span><br><span class="line"><span class="number">04</span> <span class="number">02</span>                  kind = <span class="number">4</span>，<span class="built_in">len</span>  =<span class="number">2</span>  SACK Permitted，选择确认选项有效</span><br><span class="line"><span class="number">00</span> <span class="number">00</span>                  kind = <span class="number">0</span>  补充够<span class="number">32</span>bit，即<span class="number">4</span><span class="type">byte</span>的倍数</span><br></pre></td></tr></table></figure>

<p>② 服务器回复[SYN+ACK]消息</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以太网头部+IP报头+TCP报头+TCP数据(字节为单位位 Hex+ASCII方式显示)</span></span><br><span class="line"><span class="number">78</span> <span class="number">4f</span> <span class="number">43</span> <span class="number">5b</span> <span class="number">56</span> <span class="number">75</span> <span class="number">88</span> <span class="number">25</span> <span class="number">93</span> <span class="number">02</span> b7 <span class="number">8</span>c <span class="number">08</span> <span class="number">00</span> <span class="number">45</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">3</span>c <span class="number">66</span> f2 <span class="number">00</span> <span class="number">00</span> <span class="number">38</span> <span class="number">06</span> d7 <span class="number">84</span> cb d0 <span class="number">27</span> d8 <span class="number">0</span>a <span class="number">16</span></span><br><span class="line"><span class="number">46</span> <span class="number">87</span> <span class="number">01</span> bb d2 <span class="number">23</span> f4 <span class="number">36</span> <span class="number">9f</span> <span class="number">4</span>a <span class="number">2</span>e f0 <span class="number">89</span> c6 a0 <span class="number">12</span></span><br><span class="line"><span class="number">71</span> <span class="number">20</span> a5 e3 <span class="number">00</span> <span class="number">00</span> <span class="number">02</span> <span class="number">04</span> <span class="number">05</span> a0 <span class="number">04</span> <span class="number">02</span> <span class="number">08</span> <span class="number">0</span>a d6 c8</span><br><span class="line"><span class="number">42</span> f0 <span class="number">32</span> a6 <span class="number">80</span> <span class="number">43</span> <span class="number">01</span> <span class="number">03</span> <span class="number">03</span> <span class="number">08</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提取TCP报头+TCP数据(去掉以太网头部14byte和IP报头20byte)</span></span><br><span class="line"><span class="number">01</span> bb d2 <span class="number">23</span> </span><br><span class="line">f4 <span class="number">36</span> <span class="number">9f</span> <span class="number">4</span>a </span><br><span class="line"><span class="number">2</span>e f0 <span class="number">89</span> c6 </span><br><span class="line">a0 <span class="number">12</span> <span class="number">71</span> <span class="number">20</span> </span><br><span class="line">a5 e3 <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">02</span> <span class="number">04</span> <span class="number">05</span> a0 <span class="number">04</span> <span class="number">02</span> <span class="number">08</span> <span class="number">0</span>a d6 c8 <span class="number">42</span> f0 <span class="number">32</span> a6 <span class="number">80</span> <span class="number">43</span> <span class="number">01</span> <span class="number">03</span> <span class="number">03</span> <span class="number">08</span></span><br></pre></td></tr></table></figure>

<p>解析：从上面可以解析出源端口号为：0x01bb &#x3D; 443；目的端口号：0xd23 &#x3D; 353795；序列号：SEQ &#x3D; 0xf4369f4a；ACK &#x3D; 0x2ef089c6**(即第一个包的SEQ+1，对第一个同步包的确认)<strong>；TCP报头长为：0xa &#x3D; 10(32 bit)，10 x 4 byte &#x3D; 40 byte，即TCP报头长为 40 个字节；窗口大小为 0x7120 &#x3D;28960 byte；<br> 保留位和标志位：0x012 &#x3D; 0b000000010010；按位解析标志位为 0b000010010，NS: 0，CWR: 0，ECE: 0，URG: 0，ACK: 1，PSH: 0，RST: 0，SYN: 1，FIN: 0，</strong>从解析里面可以看出该报文ACK字段和SYN字段有效，是对第一个连接请求包的确认[SYN+ACK]数据报**；<br> 可选项部分：可以看出该TCP报头最后的20个字节表示可选项，解析如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="number">02</span> <span class="number">04</span> <span class="number">05</span> a0       kind = <span class="number">2</span>, len = <span class="number">4</span>，<span class="keyword">value</span> = <span class="number">0x05a0</span> 表示MSS = <span class="number">1440</span> <span class="built_in">byte</span></span><br><span class="line"><span class="number">04</span> <span class="number">02</span>             kind = <span class="number">4</span>  SACK Permitted，选择确认选项有效</span><br><span class="line"><span class="number">08</span> <span class="number">0</span>a d6 c8 <span class="number">42</span> f0 <span class="number">32</span> a6 <span class="number">80</span> <span class="number">43</span>  kind = <span class="number">8</span>, len = <span class="number">10</span> 时间戳选项，<span class="function">Timestamp <span class="title">Value</span>(<span class="params">TSval</span>): 0xd6c842f0</span> = <span class="number">36033448560</span>，<span class="function">Timestamp echo <span class="title">reply</span>(<span class="params">TSecr</span>): 0x32a68043</span> = <span class="number">849772611</span></span><br><span class="line"><span class="number">01</span>   kind = <span class="number">1</span>     NOP</span><br><span class="line"><span class="number">03</span> <span class="number">03</span> <span class="number">08</span>  kind = <span class="number">3</span>, len = <span class="number">3</span>，<span class="keyword">value</span> = <span class="number">8</span> 窗口选项偏移<span class="number">8</span>位，即实际窗口大小为 <span class="number">0x7120</span> x <span class="number">2</span>^<span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>③ 客户端回复[ACK]消息，表示连接成功</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以太网头部+IP报头+TCP报头+TCP数据(字节为单位位 Hex+ASCII方式显示)</span></span><br><span class="line"><span class="number">88</span> <span class="number">25</span> <span class="number">93</span> <span class="number">02</span> b7 <span class="number">8</span>c <span class="number">78</span> <span class="number">4f</span> <span class="number">43</span> <span class="number">5b</span> <span class="number">56</span> <span class="number">75</span> <span class="number">08</span> <span class="number">00</span> <span class="number">45</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">34</span> <span class="number">00</span> <span class="number">00</span> <span class="number">40</span> <span class="number">00</span> <span class="number">40</span> <span class="number">06</span> f6 <span class="number">7</span>e <span class="number">0</span>a <span class="number">16</span> <span class="number">46</span> <span class="number">87</span> cb d0</span><br><span class="line"><span class="number">27</span> d8 d2 <span class="number">23</span> <span class="number">01</span> bb <span class="number">2</span>e f0 <span class="number">89</span> c6 f4 <span class="number">36</span> <span class="number">9f</span> <span class="number">4b</span> <span class="number">80</span> <span class="number">10</span></span><br><span class="line"><span class="number">10</span> <span class="number">09</span> <span class="number">35</span> <span class="number">75</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">01</span> <span class="number">08</span> <span class="number">0</span>a <span class="number">32</span> a6 <span class="number">80</span> <span class="number">82</span> d6 c8</span><br><span class="line"><span class="number">42</span> f0</span><br><span class="line"></span><br><span class="line"><span class="comment">//提取TCP报头+TCP数据(去掉以太网头部14byte和IP报头20byte)</span></span><br><span class="line">d2 <span class="number">23</span> <span class="number">01</span> bb </span><br><span class="line"><span class="number">2</span>e f0 <span class="number">89</span> c6 </span><br><span class="line">f4 <span class="number">36</span> <span class="number">9f</span> <span class="number">4b</span> </span><br><span class="line"><span class="number">80</span> <span class="number">10</span> <span class="number">10</span> <span class="number">09</span> </span><br><span class="line"><span class="number">35</span> <span class="number">75</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">01</span> <span class="number">01</span> <span class="number">08</span> <span class="number">0</span>a <span class="number">32</span> a6 <span class="number">80</span> <span class="number">82</span> d6 c8 <span class="number">42</span> f0</span><br></pre></td></tr></table></figure>

<p>解析：从上面可以解析出源端口号为：0xd23 &#x3D; 353795；目的端口号：0x01bb &#x3D; 443；序列号：SEQ &#x3D; 0x2ef089c6；ACK &#x3D; 0xf4369f4b (即上一个包的SEQ +1，对上一个同步包的确认)；TCP报头长为：0x8 &#x3D; 8(32 bit)，8 x 4 byte &#x3D; 32 byte，即TCP报头长为 32 个字节；窗口大小为 0x1009  &#x3D;4105 byte；<br> 保留位和标志位：0x010 &#x3D; 0b000000010000；按位解析标志位为 0b000010000，NS: 0，CWR: 0，ECE: 0，URG: 0，ACK: 1，PSH: 0，RST: 0，SYN: 0，FIN: 0，<strong>从解析里面可以看出该报文ACK字段有效，是对上一个服务器确认请求连接包的确认[ACK]数据报</strong>；<br> 可选项部分：可以看出该TCP报头最后的12个字节表示可选项，解析如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="number">01</span>     kind = <span class="number">1</span>     NOP</span><br><span class="line"><span class="number">01</span>     kind = <span class="number">1</span>     NOP</span><br><span class="line"><span class="number">08</span> <span class="number">0</span>a <span class="number">32</span> a6 <span class="number">80</span> <span class="number">82</span> d6 c8 <span class="number">42</span> f0  时间戳选项，<span class="function">Timestamp <span class="title">Value</span>(<span class="params">TSval</span>): 0x32a68082</span> = <span class="number">849772674</span>，<span class="function">Timestamp echo <span class="title">reply</span>(<span class="params">TSecr</span>): 0xd6c842f0</span> = <span class="number">36033448560</span></span><br></pre></td></tr></table></figure>

<h5 id="3-3-2-TCP数据交互抓包数据部分"><a href="#3-3-2-TCP数据交互抓包数据部分" class="headerlink" title="3.3.2  TCP数据交互抓包数据部分"></a>3.3.2  TCP数据交互抓包数据部分</h5><p>下面来一组TCP连接中间交换数据部分</p>
<p>① 客户端发送数据</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以太网头部+IP报头+TCP报头+TCP数据(字节为单位位 Hex+ASCII方式显示)</span></span><br><span class="line"><span class="number">88</span> <span class="number">25</span> <span class="number">93</span> <span class="number">02</span> b7 <span class="number">8</span>c <span class="number">78</span> <span class="number">4</span>f <span class="number">43</span> <span class="number">5</span>b <span class="number">56</span> <span class="number">75</span> <span class="number">08</span> <span class="number">00</span> <span class="number">45</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> f5 <span class="number">00</span> <span class="number">00</span> <span class="number">40</span> <span class="number">00</span> <span class="number">40</span> <span class="number">06</span> f5 bd <span class="number">0</span>a <span class="number">16</span> <span class="number">46</span> <span class="number">87</span> cb d0</span><br><span class="line"><span class="number">27</span> d8 d2 <span class="number">23</span> <span class="number">01</span> bb <span class="number">2</span>e f0 <span class="number">89</span> c6 f4 <span class="number">36</span> <span class="number">9</span>f <span class="number">4</span>b <span class="number">80</span> <span class="number">18</span></span><br><span class="line"><span class="number">10</span> <span class="number">09</span> <span class="number">43</span> d2 <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">01</span> <span class="number">08</span> <span class="number">0</span>a <span class="number">32</span> a6 <span class="number">80</span> <span class="number">82</span> d6 c8</span><br><span class="line"><span class="number">42</span> f0  + <span class="number">193</span><span class="type">byte</span> TCP数据</span><br><span class="line"></span><br><span class="line"><span class="comment">//提取TCP报头+TCP数据(去掉以太网头部14byte和IP报头20byte)</span></span><br><span class="line">d2 <span class="number">23</span> <span class="number">01</span> bb </span><br><span class="line"><span class="number">2</span>e f0 <span class="number">89</span> c6 </span><br><span class="line">f4 <span class="number">36</span> <span class="number">9</span>f <span class="number">4</span>b </span><br><span class="line"><span class="number">80</span> <span class="number">18</span> <span class="number">10</span> <span class="number">09</span> </span><br><span class="line"><span class="number">43</span> d2 <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">01</span> <span class="number">01</span> <span class="number">08</span> <span class="number">0</span>a <span class="number">32</span> a6 <span class="number">80</span> <span class="number">82</span> d6 c8 <span class="number">42</span> f0  </span><br><span class="line">+ <span class="number">193</span><span class="type">byte</span> TCP数据</span><br></pre></td></tr></table></figure>

<p>解析：从上面可以解析出源端口号为：0xd23 &#x3D; 353795；目的端口号：0x01bb &#x3D; 443；序列号：SEQ &#x3D; 0x2ef089c6；ACK &#x3D; 0xf4369f4b；TCP报头长为：0x8 &#x3D; 8(32 bit)，8 x 4 byte &#x3D; 32 byte，即TCP报头长为 32 个字节；窗口大小为 0x1009 &#x3D;4105 byte；<br> 保留位和标志位：0x018 &#x3D; 0b000000011000；按位解析标志位为 0b000011000，NS: 0，CWR: 0，ECE: 0，URG: 0，ACK: 1，PSH: 1，RST: 0，SYN: 0，FIN: 0，<strong>从解析里面可以看出该报文ACK字段和PUSH有效，希望传输层尽快将数据交到应用层</strong>；<br> 可选项部分：可以看出该TCP报头最后的12个字节表示可选项</p>
<p>②  服务器端回复ACK确认</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以太网头部+IP报头+TCP报头+TCP数据(字节为单位位 Hex+ASCII方式显示)</span></span><br><span class="line"><span class="number">78</span> <span class="number">4f</span> <span class="number">43</span> <span class="number">5b</span> <span class="number">56</span> <span class="number">75</span> <span class="number">88</span> <span class="number">25</span> <span class="number">93</span> <span class="number">02</span> b7 <span class="number">8</span>c <span class="number">08</span> <span class="number">00</span> <span class="number">45</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">34</span> <span class="number">66</span> fa <span class="number">00</span> <span class="number">00</span> <span class="number">38</span> <span class="number">06</span> d7 <span class="number">84</span> cb d0 <span class="number">27</span> d8 <span class="number">0</span>a <span class="number">16</span></span><br><span class="line"><span class="number">46</span> <span class="number">87</span> <span class="number">01</span> bb d2 <span class="number">23</span> f4 <span class="number">36</span> <span class="number">9f</span> <span class="number">4b</span> <span class="number">2</span>e f0 <span class="number">8</span>a <span class="number">87</span> <span class="number">80</span> <span class="number">10</span></span><br><span class="line"><span class="number">00</span> <span class="number">76</span> <span class="number">44</span> <span class="number">09</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">01</span> <span class="number">08</span> <span class="number">0</span>a d6 c8 <span class="number">43</span> <span class="number">2</span>e <span class="number">32</span> a6</span><br><span class="line"><span class="number">80</span> <span class="number">82</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提取TCP报头+TCP数据(去掉以太网头部14byte和IP报头20byte)</span></span><br><span class="line"><span class="number">01</span> bb d2 <span class="number">23</span> </span><br><span class="line">f4 <span class="number">36</span> <span class="number">9f</span> <span class="number">4b</span> </span><br><span class="line"><span class="number">2</span>e f0 <span class="number">8</span>a <span class="number">87</span> </span><br><span class="line"><span class="number">80</span> <span class="number">10</span> <span class="number">00</span> <span class="number">76</span> </span><br><span class="line"><span class="number">44</span> <span class="number">09</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">01</span> <span class="number">01</span> <span class="number">08</span> <span class="number">0</span>a d6 c8 <span class="number">43</span> <span class="number">2</span>e <span class="number">32</span> a6 <span class="number">80</span> <span class="number">82</span></span><br></pre></td></tr></table></figure>

<p>解析：从上面可以解析出源端口号为：0x01bb &#x3D; 443；目的端口号：0xd23 &#x3D; 353795；序列号：SEQ &#x3D; 0xf4369f4b；<br> ACK &#x3D; 0x2ef08a87**(前面数据包的SEQ(0x2ef089c6) + 193 &#x3D; 0x2ef08a87  PS:这里需要注意下，很多网络和书上都说这个ACK的值应该是上个包的SEQ + TCP数据大小 + 1，这种说法是不准确的，拿上个数据来讲，数据的第一个字节序号也就是上个数据包的序号是0x2ef089c6，那么第二个字节序号就是0x2ef089c7，现在TCP数据一共是193个字节，那么接下来的第194个字节序号应该是0x2ef089c6 + 193 &#x3D; 0x2ef08a87，所以服务器期望收到下个包的序号应该是0x2ef08a87)<strong>；<br> TCP报头长为：0x8 &#x3D; 8(32 bit)，8 x 4 byte &#x3D; 32 byte，即TCP报头长为 32 个字节；窗口大小为 0x0076 &#x3D; 118 byte；<br> 保留位和标志位：0x010 &#x3D; 0b000000010000；按位解析标志位为 0b000010000，NS: 0，CWR: 0，ECE: 0，URG: 0，ACK: 1，PSH: 0，RST: 0，SYN: 0，FIN: 0，</strong>从解析里面可以看出该报文ACK字段有效，对上个数据包的一个确认，表示可以接着传送后面的数据了(从字节编号为0x2ef08a87开始)，是一个[ACK]确认数据报**；<br> 可选项部分：可以看出该TCP报头最后的12个字节表示可选项</p>
<h5 id="3-3-3-TCP断开连接的四次握手抓包数据部分"><a href="#3-3-3-TCP断开连接的四次握手抓包数据部分" class="headerlink" title="3.3.3  TCP断开连接的四次握手抓包数据部分"></a>3.3.3  TCP断开连接的四次握手抓包数据部分</h5><p>首先来看下抓包过程截图</p>
<img src="https://pic.imgdb.cn/item/627a333f09475431296b1c7c.jpg" style="zoom:80%;" />

<p>① 主动断开方发送[FIN]数据报</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以太网头部+IP报头+TCP报头+TCP数据(字节为单位位 Hex+ASCII方式显示)</span></span><br><span class="line"><span class="number">78</span> <span class="number">4f</span> <span class="number">43</span> <span class="number">5b</span> <span class="number">56</span> <span class="number">75</span> <span class="number">88</span> <span class="number">25</span> <span class="number">93</span> <span class="number">02</span> b7 <span class="number">8</span>c <span class="number">08</span> <span class="number">00</span> <span class="number">45</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">34</span> <span class="number">89</span> <span class="number">5</span>e <span class="number">40</span> <span class="number">00</span> <span class="number">39</span> <span class="number">06</span> a4 <span class="number">3f</span> <span class="number">7</span>a e4 <span class="number">48</span> a5 <span class="number">0</span>a <span class="number">16</span></span><br><span class="line"><span class="number">46</span> <span class="number">87</span> <span class="number">00</span> <span class="number">50</span> d2 <span class="number">1</span>e a9 ba <span class="number">9</span>e eb <span class="number">65</span> ee <span class="number">19</span> b0 <span class="number">80</span> <span class="number">11</span></span><br><span class="line"><span class="number">03</span> cc <span class="number">9</span>e <span class="number">50</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">01</span> <span class="number">08</span> <span class="number">0</span>a <span class="number">41</span> fa <span class="number">79</span> <span class="number">05</span> <span class="number">32</span> a6</span><br><span class="line"><span class="number">38</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提取TCP报头+TCP数据(去掉以太网头部14byte和IP报头20byte)</span></span><br><span class="line"><span class="number">00</span> <span class="number">50</span> d2 <span class="number">1</span>e </span><br><span class="line">a9 ba <span class="number">9</span>e eb </span><br><span class="line"><span class="number">65</span> ee <span class="number">19</span> b0 </span><br><span class="line"><span class="number">80</span> <span class="number">11</span> <span class="number">03</span> cc </span><br><span class="line"><span class="number">9</span>e <span class="number">50</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">01</span> <span class="number">01</span> <span class="number">08</span> <span class="number">0</span>a <span class="number">41</span> fa <span class="number">79</span> <span class="number">05</span> <span class="number">32</span> a6 <span class="number">38</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>解析：从上面可以解析出源端口号为：0x0050 &#x3D;80；目的端口号：0xd21e &#x3D;53790；序列号：SEQ &#x3D; 0xa9ba9eeb；ACK &#x3D; 0x65ee19b0；TCP报头长为：0x8 &#x3D; 8(32 bit)，8 x 4 byte &#x3D; 32 byte，即TCP报头长为 32 个字节；窗口大小为 0x03cc &#x3D;972 byte；<br> 保留位和标志位：0x011 &#x3D; 0b000000010001；按位解析标志位为 0b000010001，NS: 0，CWR: 0，ECE: 0，URG: 0，ACK: 1，PSH: 0，RST: 0，SYN: 0，FIN: 1，<strong>从解析里面可以看出该报文ACK字段和FIN字段有效，是请求断开连接的[FIN+ACK]数据报</strong>；<br> 可选项部分：可以看出该TCP报头最后的12个字节表示可选项，解析如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">01     kind = 1     NOP</span><br><span class="line">01     kind = 1     NOP</span><br><span class="line">08 0a 41 fa 79 05 32 a6 38 20 时间戳选项，Timestamp Value(TSval): 1106934021，Timestamp <span class="built_in">echo</span> reply(TSecr): 849754144</span><br></pre></td></tr></table></figure>

<p>② 被断开方发送[ACK]数据包，对主动对方数据报进行确认</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以太网头部+IP报头+TCP报头+TCP数据(字节为单位位 Hex+ASCII方式显示)</span></span><br><span class="line"><span class="number">88</span> <span class="number">25</span> <span class="number">93</span> <span class="number">02</span> b7 <span class="number">8</span>c <span class="number">78</span> <span class="number">4f</span> <span class="number">43</span> <span class="number">5b</span> <span class="number">56</span> <span class="number">75</span> <span class="number">08</span> <span class="number">00</span> <span class="number">45</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">34</span> <span class="number">00</span> <span class="number">00</span> <span class="number">40</span> <span class="number">00</span> <span class="number">40</span> <span class="number">06</span> <span class="number">26</span> <span class="number">9</span>e <span class="number">0</span>a <span class="number">16</span> <span class="number">46</span> <span class="number">87</span> <span class="number">7</span>a e4</span><br><span class="line"><span class="number">48</span> a5 d2 <span class="number">1</span>e <span class="number">00</span> <span class="number">50</span> <span class="number">65</span> ee <span class="number">19</span> b0 a9 ba <span class="number">9</span>e ec <span class="number">80</span> <span class="number">10</span></span><br><span class="line"><span class="number">10</span> <span class="number">00</span> <span class="number">1</span>d d9 <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">01</span> <span class="number">08</span> <span class="number">0</span>a <span class="number">32</span> a6 ac <span class="number">63</span> <span class="number">41</span> fa</span><br><span class="line"><span class="number">79</span> <span class="number">05</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提取TCP报头+TCP数据(去掉以太网头部14byte和IP报头20byte)</span></span><br><span class="line">d2 <span class="number">1</span>e <span class="number">00</span> <span class="number">50</span> </span><br><span class="line"><span class="number">65</span> ee <span class="number">19</span> b0 </span><br><span class="line">a9 ba <span class="number">9</span>e ec </span><br><span class="line"><span class="number">80</span> <span class="number">10</span> <span class="number">10</span> <span class="number">00</span> </span><br><span class="line"><span class="number">1</span>d d9 <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">01</span> <span class="number">01</span> <span class="number">08</span> <span class="number">0</span>a <span class="number">32</span> a6 ac <span class="number">63</span> <span class="number">41</span> fa <span class="number">79</span> <span class="number">05</span></span><br></pre></td></tr></table></figure>

<p>解析：从上面可以解析出源端口号为：0xd21e &#x3D;53790；目的端口号：0x0050 &#x3D;80；序列号：SEQ &#x3D; 0x65ee19b0；ACK &#x3D; 0xa9ba9eec ；TCP报头长为：0x8 &#x3D; 8(32 bit)，8 x 4 byte &#x3D; 32 byte，即TCP报头长为 32 个字节；窗口大小为 0x1000 &#x3D; 4096 byte；<br> 保留位和标志位：0x010 &#x3D; 0b000000010000；按位解析标志位为 0b000010000，NS: 0，CWR: 0，ECE: 0，URG: 0，ACK: 1，PSH: 0，RST: 0，SYN: 0，FIN: 0，<strong>从解析里面可以看出该报文ACK字段有效，是对断开连接请求的确认[ACK]数据报</strong>；<br> 可选项部分：可以看出该TCP报头最后的12个字节表示可选项，解析如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">01     kind = 1     NOP</span><br><span class="line">01     kind = 1     NOP</span><br><span class="line">08 0a 32 a6 ac 63 41 fa 79 05 时间戳选项，Timestamp Value(TSval): 849783907 ，Timestamp <span class="built_in">echo</span> reply(TSecr): 1106934021</span><br></pre></td></tr></table></figure>

<p>③ 被断开方处理完自己的逻辑，发送[FIN]数据报到断开方</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以太网头部+IP报头+TCP报头+TCP数据(字节为单位位 Hex+ASCII方式显示)</span></span><br><span class="line"><span class="number">88</span> <span class="number">25</span> <span class="number">93</span> <span class="number">02</span> b7 <span class="number">8</span>c <span class="number">78</span> <span class="number">4f</span> <span class="number">43</span> <span class="number">5b</span> <span class="number">56</span> <span class="number">75</span> <span class="number">08</span> <span class="number">00</span> <span class="number">45</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">34</span> <span class="number">00</span> <span class="number">00</span> <span class="number">40</span> <span class="number">00</span> <span class="number">40</span> <span class="number">06</span> <span class="number">26</span> <span class="number">9</span>e <span class="number">0</span>a <span class="number">16</span> <span class="number">46</span> <span class="number">87</span> <span class="number">7</span>a e4</span><br><span class="line"><span class="number">48</span> a5 d2 <span class="number">1</span>e <span class="number">00</span> <span class="number">50</span> <span class="number">65</span> ee <span class="number">19</span> b0 a9 ba <span class="number">9</span>e ec <span class="number">80</span> <span class="number">11</span></span><br><span class="line"><span class="number">10</span> <span class="number">00</span> <span class="number">1</span>d d8 <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">01</span> <span class="number">08</span> <span class="number">0</span>a <span class="number">32</span> a6 ac <span class="number">63</span> <span class="number">41</span> fa</span><br><span class="line"><span class="number">79</span> <span class="number">05</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提取TCP报头+TCP数据(去掉以太网头部14byte和IP报头20byte)</span></span><br><span class="line">d2 <span class="number">1</span>e <span class="number">00</span> <span class="number">50</span></span><br><span class="line"><span class="number">65</span> ee <span class="number">19</span> b0 </span><br><span class="line">a9 ba <span class="number">9</span>e ec </span><br><span class="line"><span class="number">80</span> <span class="number">11</span> <span class="number">10</span> <span class="number">00</span> </span><br><span class="line"><span class="number">1</span>d d8 <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">01</span> <span class="number">01</span> <span class="number">08</span> <span class="number">0</span>a <span class="number">32</span> a6 ac <span class="number">63</span> <span class="number">41</span> fa <span class="number">79</span> <span class="number">05</span></span><br></pre></td></tr></table></figure>

<p>解析：从上面可以解析出源端口号为：0xd21e &#x3D;53790；目的端口号：0x0050 &#x3D;80；序列号：SEQ &#x3D; 0x65ee19b0 ；ACK &#x3D; 0xa9ba9eec ；TCP报头长为：0x8 &#x3D; 8(32 bit)，8 x 4 byte &#x3D; 32 byte，即TCP报头长为 32 个字节；窗口大小为 0x1000 &#x3D; 4096 byte；<br> 保留位和标志位：0x011 &#x3D; 0b000000010001；按位解析标志位为 0b000010000，NS: 0，CWR: 0，ECE: 0，URG: 0，ACK: 1，PSH: 0，RST: 0，SYN: 0，FIN: 1，<strong>从解析里面可以看出该报文ACK字段和FIN字段有效，是被断开方发送的断开连接[FIN+ACK]数据报</strong>；<br> 可选项部分：可以看出该TCP报头最后的12个字节表示可选项，解析如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">01     kind = 1     NOP</span><br><span class="line">01     kind = 1     NOP</span><br><span class="line">08 0a 32 a6 ac 63 41 fa 79 05 时间戳选项，Timestamp Value(TSval): 849783907 ，Timestamp <span class="built_in">echo</span> reply(TSecr): 1106934021</span><br></pre></td></tr></table></figure>

<p>④ 断开方对被对开放发送的断开数据报发送[ACK]数据报进行确认</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以太网头部+IP报头+TCP报头+TCP数据(字节为单位位 Hex+ASCII方式显示)</span></span><br><span class="line"><span class="number">78</span> <span class="number">4f</span> <span class="number">43</span> <span class="number">5b</span> <span class="number">56</span> <span class="number">75</span> <span class="number">88</span> <span class="number">25</span> <span class="number">93</span> <span class="number">02</span> b7 <span class="number">8</span>c <span class="number">08</span> <span class="number">00</span> <span class="number">45</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">34</span> <span class="number">42</span> <span class="number">6b</span> <span class="number">40</span> <span class="number">00</span> <span class="number">39</span> <span class="number">06</span> eb <span class="number">32</span> <span class="number">7</span>a e4 <span class="number">48</span> a5 <span class="number">0</span>a <span class="number">16</span></span><br><span class="line"><span class="number">46</span> <span class="number">87</span> <span class="number">00</span> <span class="number">50</span> d2 <span class="number">1</span>e a9 ba <span class="number">9</span>e ec <span class="number">65</span> ee <span class="number">19</span> b1 <span class="number">80</span> <span class="number">10</span></span><br><span class="line"><span class="number">03</span> cc <span class="number">29</span> f7 <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">01</span> <span class="number">08</span> <span class="number">0</span>a <span class="number">41</span> fa <span class="number">79</span> <span class="number">1</span>a <span class="number">32</span> a6</span><br><span class="line">ac <span class="number">63</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提取TCP报头+TCP数据(去掉以太网头部14byte和IP报头20byte)</span></span><br><span class="line"><span class="number">00</span> <span class="number">50</span> d2 <span class="number">1</span>e </span><br><span class="line">a9 ba <span class="number">9</span>e ec </span><br><span class="line"><span class="number">65</span> ee <span class="number">19</span> b1 </span><br><span class="line"><span class="number">80</span> <span class="number">10</span> <span class="number">03</span> cc </span><br><span class="line"><span class="number">29</span> f7 <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">01</span> <span class="number">01</span> <span class="number">08</span> <span class="number">0</span>a <span class="number">41</span> fa <span class="number">79</span> <span class="number">1</span>a <span class="number">32</span> a6 ac <span class="number">63</span></span><br></pre></td></tr></table></figure>

<p>解析：从上面可以解析出源端口号为：0x0050 &#x3D;80；目的端口号：0xd21e &#x3D;53790；序列号：SEQ &#x3D; 0xa9ba9eec；ACK &#x3D; 0x65ee19b1；TCP报头长为：0x8 &#x3D; 8(32 bit)，8 x 4 byte &#x3D; 32 byte，即TCP报头长为 32 个字节；窗口大小为 0x03cc &#x3D;972 byte；<br> 保留位和标志位：0x010 &#x3D; 0b000000010000；按位解析标志位为 0b000010000，NS: 0，CWR: 0，ECE: 0，URG: 0，ACK: 1，PSH: 0，RST: 0，SYN: 0，FIN: 0，<strong>从解析里面可以看出该报文ACK字段有效，是对断开连接请求的确认[ACK]数据报</strong>；<br> 可选项部分：可以看出该TCP报头最后的12个字节表示可选项，解析如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">01     kind = 1     NOP</span><br><span class="line">01     kind = 1     NOP</span><br><span class="line">08 0a 41 fa 79 1a 32 a6 ac 63 时间戳选项，Timestamp Value(TSval): 1106934042，Timestamp <span class="built_in">echo</span> repl</span><br></pre></td></tr></table></figure>



<h3 id="4-UDP协议"><a href="#4-UDP协议" class="headerlink" title="4. UDP协议"></a>4. UDP协议</h3><p>UDP协议是IP协议上层的另一个重要协议，他是面向无连接的、不可靠的数据报传输协议，他仅仅将要发送的数据报传送至网络，并接受从网络上传来的数据报，而不与远端的UDP协议模块建立连接。UDP协议为用户的网络应用程序提供服务。</p>
<h4 id="4-1-UDP协议数据报头"><a href="#4-1-UDP协议数据报头" class="headerlink" title="4.1 UDP协议数据报头"></a>4.1 UDP协议数据报头</h4><h5 id="4-1-1-UDP协议头部格式"><a href="#4-1-1-UDP协议头部格式" class="headerlink" title="4.1.1 UDP协议头部格式"></a>4.1.1 UDP协议头部格式</h5><img src="https://pic.imgdb.cn/item/627a33cc09475431296d4a17.jpg" style="zoom:80%;" />

<ul>
<li><strong>源端口</strong>：套接字发送端端口号</li>
<li><strong>目的端口</strong>：目的套接字端口号</li>
<li><strong>数据包长</strong>：UDP报头+UDP数据报的长度，单位1byte</li>
</ul>
<h5 id="4-1-2-UDP协议头部数据"><a href="#4-1-2-UDP协议头部数据" class="headerlink" title="4.1.2 UDP协议头部数据"></a>4.1.2 UDP协议头部数据</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以太网头部+IP报头+UDP报头+UDP数据(字节为单位位 Hex+ASCII方式显示)</span></span><br><span class="line"><span class="number">01</span> <span class="number">00</span> <span class="number">5</span>e <span class="number">4b</span> <span class="number">00</span> fe f8 <span class="number">32</span> e4 <span class="number">8</span>a ef e5 <span class="number">08</span> <span class="number">00</span> <span class="number">45</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">74</span> <span class="number">49</span> b6 <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">11</span> <span class="number">2f</span> <span class="number">50</span> <span class="number">0</span>a <span class="number">16</span> <span class="number">46</span> <span class="number">14</span> ef <span class="number">4b</span></span><br><span class="line"><span class="number">00</span> fe c1 <span class="number">5f</span> <span class="number">26</span> e5 <span class="number">00</span> <span class="number">60</span> <span class="number">19</span> b1 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">58</span> <span class="number">4f</span> <span class="number">47</span></span><br><span class="line"><span class="number">45</span> <span class="number">4</span>d <span class="number">52</span> <span class="number">41</span> <span class="number">59</span> <span class="number">2</span>d <span class="number">4</span>e <span class="number">42</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">41</span> <span class="number">4</span>a</span><br><span class="line"><span class="number">52</span> <span class="number">40</span> <span class="number">31</span> <span class="number">32</span> <span class="number">33</span> <span class="number">34</span> <span class="number">35</span> <span class="number">36</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//UDP报头+UDP数据(去掉以太网头部14byte和IP报头20byte)</span></span><br><span class="line">c1 <span class="number">5f</span> <span class="number">26</span> e5 <span class="number">00</span> <span class="number">60</span> <span class="number">19</span> b1 </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">58</span> <span class="number">4f</span> <span class="number">47</span> <span class="number">45</span> <span class="number">4</span>d <span class="number">52</span> <span class="number">41</span> <span class="number">59</span> <span class="number">2</span>d <span class="number">4</span>e <span class="number">42</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">41</span> <span class="number">4</span>a <span class="number">52</span> <span class="number">40</span> <span class="number">31</span> <span class="number">32</span> <span class="number">33</span> <span class="number">34</span> <span class="number">35</span> <span class="number">36</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br></pre></td></tr></table></figure>

<p>从上面数据抓包可以看出：<br> 源端口：0xc15f &#x3D; 49503<br> 目的端口：0x26e5 &#x3D; 9957<br> 数据包长(UDP报头加+UDP数据)：0x0060 &#x3D; 96 byte<br> 效验值：0x18b1</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA常用快捷键总结</title>
    <url>/2022/05/06/IDEAtechniques/</url>
    <content><![CDATA[<p>概述：本文记录了IDEA常用的一些快捷键，提高开发效率！</p>
<span id="more"></span>



<h4 id="Ctrl类"><a href="#Ctrl类" class="headerlink" title="Ctrl类"></a>Ctrl类</h4><table>
<thead>
<tr>
<th><strong>快捷键</strong></th>
<th><strong>介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>Ctrl + F</strong></td>
<td><strong>在当前文件进行文本查找 <code>（必备）</code></strong></td>
</tr>
<tr>
<td><strong>Ctrl + R</strong></td>
<td><strong>在当前文件进行文本替换 <code>（必备）</code></strong></td>
</tr>
<tr>
<td><strong>Ctrl + Z</strong></td>
<td><strong>撤销 （必备）</strong></td>
</tr>
<tr>
<td><strong>Ctrl + Y</strong></td>
<td><strong>删除光标所在行 或 删除选中的行 （必备）</strong></td>
</tr>
<tr>
<td><strong>Ctrl + X</strong></td>
<td><strong>剪切光标所在行 或 剪切选择内容</strong></td>
</tr>
<tr>
<td><strong>Ctrl + C</strong></td>
<td><strong>复制光标所在行 或 复制选择内容</strong></td>
</tr>
<tr>
<td><strong>Ctrl + D</strong></td>
<td><strong>复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 <code>（必备）</code></strong></td>
</tr>
<tr>
<td><strong>Ctrl + E</strong></td>
<td><strong>显示最近打开的文件记录列表</strong></td>
</tr>
<tr>
<td><strong>Ctrl + N</strong></td>
<td><strong>根据输入的 类名 查找类文件</strong></td>
</tr>
<tr>
<td><strong>Ctrl + F12</strong></td>
<td><strong>弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</strong></td>
</tr>
<tr>
<td><strong>Ctrl + Enter</strong></td>
<td><strong>智能分隔行</strong></td>
</tr>
<tr>
<td><strong>Ctrl + End</strong></td>
<td><strong>跳到文件尾</strong></td>
</tr>
<tr>
<td><strong>Ctrl + Home</strong></td>
<td><strong>跳到文件头</strong></td>
</tr>
<tr>
<td><strong>Ctrl + 左键单击</strong></td>
<td><strong>在打开的文件标题上，弹出该文件路径</strong></td>
</tr>
<tr>
<td><strong>Ctrl + 光标定位</strong></td>
<td><strong>按 Ctrl 不要松开，会显示光标所在的类信息摘要</strong></td>
</tr>
</tbody></table>
<h4 id="Alt类"><a href="#Alt类" class="headerlink" title="Alt类"></a>Alt类</h4><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Alt + Enter</strong></td>
<td><strong>IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 <code>（必备）</code></strong></td>
</tr>
<tr>
<td><strong>Alt + Insert</strong></td>
<td><strong>代码自动生成，如生成对象的 set &#x2F; get 方法，构造函数，toString() 等</strong></td>
</tr>
<tr>
<td><strong>Alt + 左方向键</strong></td>
<td><strong>按左方向切换当前已打开的文件视图</strong></td>
</tr>
<tr>
<td><strong>Alt + 右方向键</strong></td>
<td><strong>按右方向切换当前已打开的文件视图</strong></td>
</tr>
</tbody></table>
<h4 id="Shift类"><a href="#Shift类" class="headerlink" title="Shift类"></a>Shift类</h4><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Shift + F1</td>
<td>如果有外部文档可以连接外部文档</td>
</tr>
<tr>
<td>Shift + F2</td>
<td>跳转到上一个高亮错误 或 警告位置</td>
</tr>
<tr>
<td>Shift + F3</td>
<td>在查找模式下，查找匹配上一个</td>
</tr>
<tr>
<td>Shift + F7</td>
<td>在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td>
</tr>
<tr>
<td>Shift + F8</td>
<td>在 Debug 模式下，跳出，表现出来的效果跟 <code>F9</code> 一样</td>
</tr>
<tr>
<td>Shift + F9</td>
<td>等效于点击工具栏的 <code>Debug</code> 按钮</td>
</tr>
<tr>
<td>Shift + F10</td>
<td>等效于点击工具栏的 <code>Run</code> 按钮</td>
</tr>
<tr>
<td>Shift + Tab</td>
<td>取消缩进</td>
</tr>
<tr>
<td>Shift + ESC</td>
<td>隐藏当前 或 最后一个激活的工具窗口</td>
</tr>
<tr>
<td><strong>Shift + End</strong></td>
<td><strong>选中光标到当前行尾位置</strong></td>
</tr>
<tr>
<td><strong>Shift + Home</strong></td>
<td><strong>选中光标到当前行头位置</strong></td>
</tr>
<tr>
<td><strong>Shift + Enter</strong></td>
<td><strong>开始新一行。光标所在行下空出一行，光标定位到新行位置</strong></td>
</tr>
<tr>
<td><strong>Shift + 左键单击</strong></td>
<td><strong>在打开的文件名上按此快捷键，可以关闭当前打开文件</strong></td>
</tr>
<tr>
<td><strong>Shift + 滚轮前后滚动</strong></td>
<td><strong>当前文件的横向滚动轴滚动</strong></td>
</tr>
</tbody></table>
<h4 id="Ctrl-Alt"><a href="#Ctrl-Alt" class="headerlink" title="Ctrl + Alt"></a>Ctrl + Alt</h4><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Ctrl + Alt + L</strong></td>
<td><strong>格式化代码，可以对当前文件和整个包目录使用 <code>（必备）</code></strong></td>
</tr>
<tr>
<td><strong>Ctrl + Alt + O</strong></td>
<td><strong>优化导入的类，可以对当前文件和整个包目录使用 <code>（必备）</code></strong></td>
</tr>
</tbody></table>
<h4 id="Ctrl-Shift"><a href="#Ctrl-Shift" class="headerlink" title="Ctrl + Shift"></a>Ctrl + Shift</h4><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Ctrl + Shift + F</strong></td>
<td><strong>根据输入内容查找整个项目 或 指定目录内文件 <code>（必备）</code></strong></td>
</tr>
<tr>
<td><strong>Ctrl + Shift + R</strong></td>
<td><strong>根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 <code>（必备）</code></strong></td>
</tr>
<tr>
<td><strong>Ctrl + Shift + J</strong></td>
<td><strong>自动将下一行合并到当前行末尾 <code>（必备）</code></strong></td>
</tr>
<tr>
<td><strong>Ctrl + Shift + Z</strong></td>
<td><strong>取消撤销 <code>（必备）</code></strong></td>
</tr>
<tr>
<td>Ctrl + Shift + W</td>
<td>递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 <code>（必备）</code></td>
</tr>
<tr>
<td><strong>Ctrl + Shift + N</strong></td>
<td><strong>通过文件名定位 &#x2F; 打开文件 &#x2F; 目录，打开目录需要在输入的内容后面多加一个正斜杠 <code>（必备）</code></strong></td>
</tr>
<tr>
<td><strong>Ctrl + Shift + U</strong></td>
<td><strong>对选中的代码进行大 &#x2F; 小写轮流转换 <code>（必备）</code></strong></td>
</tr>
<tr>
<td>Ctrl + Shift + T</td>
<td>对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td>
</tr>
<tr>
<td><strong>Ctrl + Shift + C</strong></td>
<td><strong>复制当前文件磁盘路径到剪贴板</strong></td>
</tr>
<tr>
<td><strong>Ctrl + Shift + V</strong></td>
<td><strong>弹出缓存的最近拷贝的内容管理器弹出层</strong></td>
</tr>
<tr>
<td>Ctrl + Shift + E</td>
<td>显示最近修改的文件列表的弹出层</td>
</tr>
<tr>
<td>Ctrl + Shift + H</td>
<td>显示方法层次结构</td>
</tr>
<tr>
<td><strong>Ctrl + Shift + B</strong></td>
<td><strong>跳转到类型声明处</strong></td>
</tr>
<tr>
<td>Ctrl + Shift + I</td>
<td>快速查看光标所在的方法 或 类的定义</td>
</tr>
<tr>
<td>Ctrl + Shift + A</td>
<td>查找动作 &#x2F; 设置</td>
</tr>
<tr>
<td><strong>Ctrl + Shift + &#x2F;</strong></td>
<td><strong>代码块注释 <code>（必备）</code></strong></td>
</tr>
<tr>
<td>Ctrl + Shift + [</td>
<td>选中从光标所在位置到它的顶部中括号位置</td>
</tr>
<tr>
<td>Ctrl + Shift + ]</td>
<td>选中从光标所在位置到它的底部中括号位置</td>
</tr>
<tr>
<td>Ctrl + Shift + +</td>
<td>展开所有代码</td>
</tr>
<tr>
<td>Ctrl + Shift + -</td>
<td>折叠所有代码</td>
</tr>
<tr>
<td>Ctrl + Shift + F7</td>
<td>高亮显示所有该选中文本，按Esc高亮消失</td>
</tr>
<tr>
<td>Ctrl + Shift + F8</td>
<td>在 Debug 模式下，指定断点进入条件</td>
</tr>
<tr>
<td>Ctrl + Shift + F9</td>
<td>编译选中的文件 &#x2F; 包 &#x2F; Module</td>
</tr>
<tr>
<td>Ctrl + Shift + F12</td>
<td>编辑器最大化</td>
</tr>
<tr>
<td><strong>Ctrl + Shift + Space</strong></td>
<td><strong>智能代码提示</strong></td>
</tr>
<tr>
<td>Ctrl + Shift + Enter</td>
<td>自动结束代码，行末自动添加分号 <code>（必备）</code></td>
</tr>
<tr>
<td>Ctrl + Shift + Backspace</td>
<td>退回到上次修改的地方</td>
</tr>
<tr>
<td>Ctrl + Shift + 1,2,3…9</td>
<td>快速添加指定数值的书签</td>
</tr>
<tr>
<td><strong>Ctrl + Shift + 左方向键</strong></td>
<td><strong>在代码文件上，光标跳转到当前单词 &#x2F; 中文句的左侧开头位置，同时选中该单词 &#x2F; 中文句</strong></td>
</tr>
<tr>
<td><strong>Ctrl + Shift + 右方向键</strong></td>
<td><strong>在代码文件上，光标跳转到当前单词 &#x2F; 中文句的右侧开头位置，同时选中该单词 &#x2F; 中文句</strong></td>
</tr>
<tr>
<td>Ctrl + Shift + 左方向键</td>
<td>在光标焦点是在工具选项卡上，缩小选项卡区域</td>
</tr>
<tr>
<td>Ctrl + Shift + 右方向键</td>
<td>在光标焦点是在工具选项卡上，扩大选项卡区域</td>
</tr>
<tr>
<td>Ctrl + Shift + 前方向键</td>
<td>光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td>
</tr>
<tr>
<td>Ctrl + Shift + 后方向键</td>
<td>光标放在方法名上，将方法移动到下一个方法前面，调整方法排序</td>
</tr>
</tbody></table>
<h4 id="Alt-Shift"><a href="#Alt-Shift" class="headerlink" title="Alt + Shift"></a>Alt + Shift</h4><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Alt + Shift + I</td>
<td>查看项目当前文件</td>
</tr>
<tr>
<td>Alt + Shift + F7</td>
<td>在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td>
</tr>
<tr>
<td>Alt + Shift + F9</td>
<td>弹出 <code>Debug</code> 的可选择菜单</td>
</tr>
<tr>
<td>Alt + Shift + F10</td>
<td>弹出 <code>Run</code> 的可选择菜单</td>
</tr>
</tbody></table>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>F2</td>
<td>跳转到下一个高亮错误 或 警告位置 <code>（必备）</code></td>
</tr>
<tr>
<td>F3</td>
<td>在查找模式下，定位到下一个匹配处</td>
</tr>
<tr>
<td>F4</td>
<td>编辑源</td>
</tr>
<tr>
<td>F7</td>
<td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td>
</tr>
<tr>
<td>F8</td>
<td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td>
</tr>
<tr>
<td>F9</td>
<td>在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td>
</tr>
<tr>
<td>F11</td>
<td>添加书签</td>
</tr>
<tr>
<td>F12</td>
<td>回到前一个工具窗口</td>
</tr>
<tr>
<td>Tab</td>
<td>缩进</td>
</tr>
<tr>
<td>ESC</td>
<td>从工具窗口进入代码文件窗口</td>
</tr>
<tr>
<td><strong>连按两次Shift</strong></td>
<td><strong>弹出 <code>Search Everywhere</code> 弹出层</strong></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>RPC</title>
    <url>/2022/05/05/RPC/</url>
    <content><![CDATA[<p>本文简单介绍了RPC框架</p>
<span id="more"></span>

<h4 id="什么是RPC"><a href="#什么是RPC" class="headerlink" title="什么是RPC"></a>什么是RPC</h4><p>RPC（Remote Procedure Call）— 远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。</p>
<p>比如两个不同的服务 A、B 部署在两台不同的机器上，那么服务 A 如果想要调用服务 B 中的某个方法该怎么办呢？使用 HTTP请求 当然可以，但是可能会比较慢而且一些优化做的并不好。 RPC 的出现就是为了解决这个问题。</p>
<p>概括来讲RPC 主要解决了：<strong>让分布式或者微服务系统中不同服务之间的调用像本地调用一样简单。</strong></p>
<h4 id="RPC的原理"><a href="#RPC的原理" class="headerlink" title="RPC的原理"></a>RPC的原理</h4><img src="https://pic.imgdb.cn/item/6273ed640947543129a39226.jpg" style="zoom:80%;" />

<ol>
<li>服务消费端（client）以本地调用的方式调用远程服务；</li>
<li>客户端 Stub（client stub） 接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体（序列化）：<code>RpcRequest</code>；</li>
<li>客户端 Stub（client stub） 找到远程服务的地址，并将消息发送到服务提供端；</li>
<li>服务端 Stub（桩）收到消息将消息反序列化为Java对象: <code>RpcRequest</code>；</li>
<li>服务端 Stub（桩）根据<code>RpcRequest</code>中的类、方法、方法参数等信息调用本地的方法；</li>
<li>服务端 Stub（桩）得到方法执行结果并将组装成能够进行网络传输的消息体：<code>RpcResponse</code>（序列化）发送至消费方；</li>
<li>客户端 Stub（client stub）接收到消息并将消息反序列化为Java对象:<code>RpcResponse</code> ，这样也就得到了最终结果。</li>
</ol>
<p>时序图：</p>
<img src="https://pic.imgdb.cn/item/6273edad0947543129a46883.jpg" style="zoom:80%;" />

<h4 id="常见的RPC框架"><a href="#常见的RPC框架" class="headerlink" title="常见的RPC框架"></a>常见的RPC框架</h4><ul>
<li><strong>RMI（JDK自带）：</strong> JDK自带的RPC，有很多局限性，不推荐使用。</li>
<li><strong>Dubbo:</strong> Dubbo是 阿里巴巴公司开源的一个高性能优秀的服务框架，使得应用可通过高性能的 RPC 实现服务的输出和输入功能，可以和 Spring框架无缝集成。目前 Dubbo 已经成为 Spring Cloud Alibaba 中的官方组件。</li>
<li><strong>gRPC</strong> ：gRPC是可以在任何环境中运行的现代开源高性能RPC框架。它可以通过可插拔的支持来有效地连接数据中心内和跨数据中心的服务，以实现负载平衡，跟踪，运行状况检查和身份验证。它也适用于分布式计算的最后一英里，以将设备，移动应用程序和浏览器连接到后端服务。</li>
<li><strong>Hessian：</strong> Hessian是一个轻量级的remoting on http工具，使用简单的方法提供了RMI的功能。 相比WebService，Hessian更简单、快捷。采用的是二进制RPC协议，因为采用的是二进制协议，所以它很适合于发送二进制数据。</li>
<li><strong>Thrift：</strong> Apache Thrift是Facebook开源的跨语言的RPC通信框架，目前已经捐献给Apache基金会管理，由于其跨语言特性和出色的性能，在很多互联网公司得到应用，有能力的公司甚至会基于thrift研发一套分布式服务框架，增加诸如服务注册、服务发现等功能。</li>
</ul>
]]></content>
      <categories>
        <category>RPC</category>
      </categories>
      <tags>
        <tag>RPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Startup in MeiTuan</title>
    <url>/2022/05/05/startup/</url>
    <content><![CDATA[<p>本文记录了一个简易Java开发流程和服务部署和调用的学习过程</p>
<span id="more"></span>

<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>流程</strong>：</p>
<ul>
<li>在A服务写一套CRUD，对外提供RPC接口</li>
<li>在B服务中调用A服务提供的接口，完成数据CRUD</li>
<li>利用这个项目对接http网关</li>
</ul>
<p><strong>涉及的技术</strong>：</p>
<ul>
<li>MDP（spring boot）</li>
<li>RPC接口用到thrift，公司内部为MTthrift</li>
<li>服务注册</li>
<li>kafka</li>
<li>redis</li>
</ul>
<h3 id="CRUD实现"><a href="#CRUD实现" class="headerlink" title="CRUD实现"></a>CRUD实现</h3><h4 id="DO-Example-mapper生成"><a href="#DO-Example-mapper生成" class="headerlink" title="DO, Example, mapper生成"></a>DO, Example, mapper生成</h4><p>使用MyBatis-generator自动生成，注意在generatorConfig.xml中配置文件路径，表名和实体类名。</p>
<p>另外注意插件的使用必须在对应的模块（dao模块）下（我一开始直接使用主目录下的generator导致出现了找不到路径的错误）</p>
<p>一共会生成四个文件：XX.java（实体DO），XXExample.java， XXMapper.java， XXMapper.xml</p>
<h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><p>测试CRUD的API和example相关API，注意测试类要继承BaseTest类</p>
<h3 id="提供RPC接口"><a href="#提供RPC接口" class="headerlink" title="提供RPC接口"></a>提供RPC接口</h3><p>(注意这里的代码都不符合工程的规范，仅仅只是简单的尝试使用)</p>
<p><strong>在client模块下：</strong></p>
<ul>
<li><p>写一个CRUDService接口，提供所需要的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ThriftService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CRUDService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ThriftMethod</span></span><br><span class="line">    <span class="keyword">public</span> CRUDResponse <span class="title function_">method1</span><span class="params">(CRUDRequest testRequest)</span> <span class="keyword">throws</span> TException;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ThriftMethod</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">method2</span><span class="params">(<span class="type">int</span> i)</span> <span class="keyword">throws</span> TException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写一个CRUDResponse和CRUDRequest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ThriftStruct</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CRUDRequest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ThriftField(value = 1, requiredness = ThriftField.Requiredness.REQUIRED)</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ThriftField</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ThriftField(2)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ThriftField</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CRUDRequest&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">            <span class="string">&quot;, name=&quot;</span> + name +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>在service模块下：</strong></p>
<ul>
<li><p>对CRUDService进行实现，写一个CRUDServiceImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@MdpThriftServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CRUDServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CRUDService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    TempDataDOMapper tempDataDOMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    FunctionConfigDOMapper functionConfigDOMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CRUDResponse <span class="title function_">method1</span><span class="params">(CRUDRequest testRequest)</span> <span class="keyword">throws</span> TException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">method2</span><span class="params">(<span class="type">int</span> i)</span> <span class="keyword">throws</span> TException &#123;</span><br><span class="line">        System.out.println(tempDataDOMapper.selectByPrimaryKey(i));</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">long</span>)i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>测试</strong></p>
<p>在测试类中可以直接调用CRUDService接口进行方法的调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">CRUDService crudService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testImpl</span><span class="params">()</span> <span class="keyword">throws</span> TException &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> crudService.method2(<span class="number">1</span>);</span><br><span class="line">    System.out.println(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="服务的部署"><a href="#服务的部署" class="headerlink" title="服务的部署"></a>服务的部署</h4><p><strong>注意点</strong>：</p>
<ul>
<li><p>注意修改版本号，如从0.0.5到0.0.6-SNAPSHOT</p>
</li>
<li><p>注意一定不要合并到master分支上去，要使用自己的分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换到自己的分支</span></span><br><span class="line">git checkout -b zhangqi-local</span><br><span class="line"></span><br><span class="line">git push --set-upstream origin zhangqi-local</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用git进行提交和push</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -a -m &quot;描述文字&quot;</span><br></pre></td></tr></table></figure>

<p>注意也可以通过非命令的方式提交和push，可以查看修改的地方 【根目录】&#x3D;&#x3D;》【Git】 &#x3D;&#x3D;》【提交目录】</p>
</li>
</ul>
<p><strong>服务的发布流程</strong></p>
<ul>
<li><p>Devtools中的Services中找到对应的服务</p>
<p>【To Maven】&#x3D;&#x3D;》【To Maven】&#x3D;&#x3D;》【代码配置】（填写自己的分支）&#x3D;&#x3D;》【To Maven】</p>
</li>
<li><p>Devtools中的Cargo中，进入自己的机器。构建服务，选择自己的分支，进行构建，直到状态为success，在【机器列表】中可以看到主机名</p>
</li>
<li><p>进入OCTO，调整为线下模式。【用户自检】&#x3D;&#x3D;》【MTthrift自检】&#x3D;&#x3D;》【切换到test】&#x3D;&#x3D;》【接口调用】&#x3D;&#x3D;》选择对应泳道和主机&#x3D;&#x3D;》选择要进行测试的服务接口和调用方法&#x3D;&#x3D;》选择【不配置】压测标识&#x3D;&#x3D;》设置方法的参数，点击【执行】即可查看调用结果</p>
</li>
</ul>
<h3 id="服务的调用"><a href="#服务的调用" class="headerlink" title="服务的调用"></a>服务的调用</h3><ul>
<li><p>在新的服务下，首先在service模块下的pom.xml和主目录下的pom.xml中要引入相应的dependency</p>
</li>
<li><p>写一个service，注意@Service注解需要使用spring包下的，否则会扫描不到。在类内使用@MdpThriftClient调用远程的服务，注意要写上remoteAppKey，其可以在上传的服务的resource目录下找到，也可以在devtools网站下找到，注意不需要设置端口号，让服务自己去配置。另外可能会报无法自动装配的问题（红线），可以不用理会。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.meituan.mdp.boot.starter.thrift.annotation.MdpThriftClient;</span><br><span class="line"><span class="keyword">import</span> com.sankuai.grocerymkthd.interact.tools.client.request.test.CRUDRequest;</span><br><span class="line"><span class="keyword">import</span> com.sankuai.grocerymkthd.interact.tools.client.response.test.CRUDResponse;</span><br><span class="line"><span class="keyword">import</span> com.sankuai.grocerymkthd.interact.tools.client.service.CRUDService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.TException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhu</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CRUDMTService</span> &#123;</span><br><span class="line">    <span class="meta">@MdpThriftClient(</span></span><br><span class="line"><span class="meta">        remoteAppKey = &quot;com.sankuai.grocerymkthd.interact.tools&quot;,</span></span><br><span class="line"><span class="meta">        timeout = 10000</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> CRUDService crudService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CRUDResponse <span class="title function_">getResponse</span><span class="params">(CRUDRequest request)</span> <span class="keyword">throws</span> TException &#123;</span><br><span class="line">        <span class="keyword">return</span> crudService.method1(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSelection</span><span class="params">(<span class="type">int</span> id)</span> <span class="keyword">throws</span> TException&#123;</span><br><span class="line">        <span class="keyword">return</span> crudService.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在单元测试UT中，<strong>要指定访问的泳道，因为我们只在自己的泳道上部署了服务</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.meituan.mtrace.Tracer;</span><br><span class="line"><span class="keyword">import</span> com.sankuai.grocerymkthd.interact.mapi.BaseTest;</span><br><span class="line"><span class="keyword">import</span> com.sankuai.grocerymkthd.interact.mapi.simple.CRUDMTService;</span><br><span class="line"><span class="keyword">import</span> com.sankuai.grocerymkthd.interact.tools.client.request.test.CRUDRequest;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.TException;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CRUDServiceTest</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CRUDMTService crudmtService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> TException &#123;</span><br><span class="line">        <span class="comment">// 要指定访问的泳道，因为只在自己的泳道上部署了服务</span></span><br><span class="line">        Tracer.setSwimlane(<span class="string">&quot;zhuzhangqi-yzwgj&quot;</span>);</span><br><span class="line">        System.out.println(crudmtService.getResponse(<span class="keyword">new</span> <span class="title class_">CRUDRequest</span>()));</span><br><span class="line">        System.out.println(crudmtService.getSelection(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="与HTTP网关的对接"><a href="#与HTTP网关的对接" class="headerlink" title="与HTTP网关的对接"></a>与HTTP网关的对接</h3><p>公司内部使用Shepherd</p>
<ul>
<li><p>创建分组</p>
</li>
<li><p>创建API，两种方式</p>
<ul>
<li>【API分组管理】&#x3D;&#x3D;》【API管理】&#x3D;&#x3D;》【新建API】（传统方式）</li>
<li>【API分组管理】&#x3D;&#x3D;》【API管理】&#x3D;&#x3D;》【快速创建API】（推荐），输入API名称、后端服务Appkey、服务名、方法名即可完成创建</li>
</ul>
</li>
<li><p>创建完API后，可根据需要将路径、服务参数、返回值进行个性化修改</p>
<ul>
<li><p>注意要使用自己的服务要配置泳道：</p>
<ul>
<li>方法1：在【http header】或【url query】信息里加swimlane字段，字段值为需要路由的泳道服务</li>
<li>方法2：如果不希望前端传递泳道信息，可以配置Tracer组件泳道参数，Tracer-Key固定为INF_SWIMLANE，Tracer_Value为泳道名称</li>
</ul>
</li>
<li><p>注意要在【后端请求定义】配置相应的入参，注意DSL表达式的写法</p>
</li>
</ul>
</li>
<li><p>发布API</p>
</li>
<li><p>用POSTMAN测试API，通过查看API文档，可以看到请求路径和path信息</p>
<ul>
<li>通过POSTMAN请求url（其中{id}为路径参数，类型为整数型，要用实际参数替换）</li>
<li>可以在【Params】中给相应的参数赋值</li>
<li>DSL指南见appendix</li>
</ul>
</li>
</ul>
<h3 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h3><h4 id="Mybatis中的example类简介"><a href="#Mybatis中的example类简介" class="headerlink" title="Mybatis中的example类简介"></a>Mybatis中的example类简介</h4><p><strong>什么是example类</strong></p>
<p>mybatis-generator会为每个字段产生Criterion，为底层的mapper.xml创建动态sql。如果表的字段比较多,产生的example类会十分庞大。理论上通过example类可以构造你想到的任何筛选条件。在mybatis-generator中加以配置，配置数据表的生成操作就可以自动生成example了。</p>
<p><strong>了解example成员变量</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//作用：升序还是降序</span></span><br><span class="line"><span class="comment">//参数格式：字段+空格+asc(desc)</span></span><br><span class="line"><span class="keyword">protected</span> String orderByClause;  </span><br><span class="line"><span class="comment">//作用：去除重复</span></span><br><span class="line"><span class="comment">//true是选择不重复记录，false，反之</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> distinct;</span><br><span class="line"><span class="comment">//自定义查询条件</span></span><br><span class="line"><span class="comment">//Criteria的集合，集合中对象是由or连接</span></span><br><span class="line"><span class="keyword">protected</span> List&lt;Criteria&gt; oredCriteria;</span><br><span class="line"><span class="comment">//内部类Criteria包含一个Cretiron的集合，</span></span><br><span class="line"><span class="comment">//每一个Criteria对象内包含的Cretiron之间是由  AND连接的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Criteria</span> <span class="keyword">extends</span> <span class="title class_">GeneratedCriteria</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">Criteria</span><span class="params">()</span> &#123;<span class="built_in">super</span>();&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是mybatis中逆向工程中的代码模型</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">GeneratedCriteria</span> &#123;......&#125;</span><br><span class="line"><span class="comment">//是最基本,最底层的Where条件，用于字段级的筛选</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Criterion</span> &#123;......&#125;</span><br></pre></td></tr></table></figure>

<p><strong>example使用前的准备</strong></p>
<p>比如我的TempDataDOExample是根据TempData表生成的，TempDataDOMapper属于dao层，TempDataDOMapper.xml是对应的映射文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TempDataDOMapper</span> <span class="variable">tempDataDOMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TempDataDOMapper</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//UserMapper接口：</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">countByExample</span><span class="params">(CompetingStoreExample example)</span>;</span><br><span class="line">List&lt;CompetingStore&gt; <span class="title function_">selectByExample</span><span class="params">(CompetingStoreExample example)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在我们的测试类里：</span></span><br><span class="line"><span class="type">TempDataDOExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TempDataDOExample</span>();</span><br><span class="line">TempDataDOExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> example.createCriteria();</span><br></pre></td></tr></table></figure>

<p><strong>查询用户数量</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// select count(*) from temp_data</span></span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> tempDataDOMapper.countByExample(example);</span><br></pre></td></tr></table></figure>

<p><strong>where条件查询或多条件查询</strong></p>
<p>(注意以下不是对应TempData的代码)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// select * from user where name=&#123;#user.name&#125; and sex=&#123;#user.sex&#125; order by age asc;</span></span><br><span class="line">example.setOrderByClause(“age asc<span class="string">&quot;); //升序</span></span><br><span class="line"><span class="string">example.setDistinct(false); //不去重</span></span><br><span class="line"><span class="string">if(!StringUtils.isNotBlank(user.getName()))&#123;</span></span><br><span class="line"><span class="string">    Criteria.andNameEqualTo(user.getName());</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">if(!StringUtils.isNotBlank(user.getSex()))&#123;</span></span><br><span class="line"><span class="string">    Criteria.andSexEqualTo(user.getSex());</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">List&lt;User&gt; userList=userMapper.selectByExample(example);</span></span><br></pre></td></tr></table></figure>

<p><strong>模糊查询</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// select * from user where name like %&#123;#user.name&#125;%</span></span><br><span class="line"><span class="keyword">if</span>(!StringUtils.isNotBlank(user.getName()))&#123;</span><br><span class="line">    criteria.andNameLIke(‘%’+name+’%’);</span><br><span class="line">&#125;</span><br><span class="line">List&lt;User&gt; userList=userMapper.selectByExample(example);</span><br></pre></td></tr></table></figure>

<p><strong>分页查询</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// select * from user limit start to rows</span></span><br><span class="line"><span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> (currentPage - <span class="number">1</span>) * rows;</span><br><span class="line"><span class="comment">//分页查询中的一页数量</span></span><br><span class="line">example.setPageSize(rows); </span><br><span class="line"><span class="comment">//开始查询的位置</span></span><br><span class="line">example.setStartRow(start);  </span><br><span class="line">List&lt;User&gt; userList=userMapper.selectByExample(example);</span><br></pre></td></tr></table></figure>



<h4 id="POSTMAN的简单使用"><a href="#POSTMAN的简单使用" class="headerlink" title="POSTMAN的简单使用"></a>POSTMAN的简单使用</h4><p><strong>使用POSTMAN进行接口测试</strong></p>
<ul>
<li>新建Collections，相当于在POSTMAN中的一个文件夹</li>
<li>添加request</li>
<li>点击发送</li>
</ul>
<p><strong>显示的内容</strong></p>
<ul>
<li>Params：显示get请求参数</li>
<li>Authorization：身份认证</li>
<li>Headers：请求头信息</li>
</ul>
<h4 id="DSL的使用"><a href="#DSL的使用" class="headerlink" title="DSL的使用"></a>DSL的使用</h4><p><strong>参数类型</strong> </p>
<p>参数类型主要分为三种类型：请求参数、上下⽂参数、服务返回结果参数</p>
<p>\1. 请求参数：请求参数⽀持path路径取值、query取值、header取值、cookie取值、body取值（⽀持 json、表单等）。 </p>
<p>\2. 上下⽂参数：上下⽂参数主要⽀持⽤户⾃定义插件中可编程的取值⽅式。Shepherd Context取值汇总 </p>
<p>\3. 服务返回结果参数：请求后端服务后返回的结果可作为参数以待取值。</p>
<p><strong>表达式类型</strong> </p>
<p>\1. JsonPath（默认）：</p>
<p>表达式类型⽀持JsonPath标准：JSONPath-简单⼊⻔ </p>
<p>Jayway JsonPath - A Java DSL for reading JSON documents. </p>
<p>\2. Freemarker： </p>
<p>对于表达式有特殊要求，⽐如说在返回的Bean列表中，希望屏蔽Bean的某⼀个field时，可以使⽤ </p>
<p>Freemarker模板语⾔实现。 </p>
<p>具体请参⻅：Freemarker 表达式使⽤指南</p>
<p><strong>JsonPath表达式取值示例</strong> </p>
<img src="https://pic.imgdb.cn/item/627b89d70947543129b99894.jpg" style="zoom:80%;" />

<img src="https://pic.imgdb.cn/item/627b89e90947543129b9ccec.jpg" style="zoom:80%;" />

<p>服务调⽤参数和返回值Schema填写举例： </p>
<p>后端服务输⼊参数部分采⽤RPC框架泛化json-simple调⽤格式。 </p>
<p>先⽤com.dianping.pigeon.remoting.common.codec.json.SimpleJacksonUtils#serialize⽣成Json格式。 </p>
<p>然后对需要从请求参数或上下⽂取值的部分⽤DSL表达式替换。</p>
]]></content>
      <categories>
        <category>Projects</category>
      </categories>
      <tags>
        <tag>Projects</tag>
      </tags>
  </entry>
  <entry>
    <title>ObjectName</title>
    <url>/2022/05/03/objectName/</url>
    <content><![CDATA[<p>解释了Java中的各种O(Object)</p>
<span id="more"></span>

<h4 id="为什么会出现这些O？"><a href="#为什么会出现这些O？" class="headerlink" title="为什么会出现这些O？"></a>为什么会出现这些O？</h4><p>第一，随着编程工业化的发展，需要有一套合理的体系出现。随着MVC、MVP、MVVM 等编程模型就出现了，为了搭配这些编程模型的使用，需要对 Object 的功能进行划分，于是我们便看到了这些层出不穷的 Object。 </p>
<p>其二，在团队协作编码中，一个好的命名方式是可以节约很多时间成本的。就比如<code>getItemById</code>一眼看去就知道是通过 id 获取一个 item 对象，<code>ItemVO</code>一眼看去就知道是前端透出的 json 对应的对象。 </p>
<p>其三，如此划分，可以让项目结构更加清楚，不至于出现东一块西一块，对象乱扔的局面。尽可能避免了在多人协作时对象混乱的情况。 总的来说，这一切都是为了让软件编程更加合理、更加规范、更加高效。</p>
<h4 id="名称的含义"><a href="#名称的含义" class="headerlink" title="名称的含义"></a>名称的含义</h4><ul>
<li>DO（ Data Object）：与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。</li>
<li>PO（Persistant Object）：持久对象，一个 PO 的数据结构对应着库中表的结构，表中的一条记录就是一个 PO 对象</li>
<li>DTO（ Data Transfer Object）：数据传输对象，Service 或 Manager 向外传输的对象。</li>
<li>BO（ Business Object）：业务对象。 由 Service 层输出的封装业务逻辑的对象。</li>
<li>AO（ Application Object）：应用对象。 在 Web 层与 Service 层之间抽象的复用对象模型，极为贴近展示层，复用度不高。</li>
<li>VO（ View Object）：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。</li>
<li>POJO（ Plain Ordinary Java Object）：POJO 专指只有 setter&#x2F;getter&#x2F;toString 的简单类，包括 DO&#x2F;DTO&#x2F;BO&#x2F;VO 等。</li>
<li>DAO（Data Access Objects）：数据访问对象，和上面那些 O 不同的是，其功能是用于进行数据操作的。通常不会用于描述数据实体。</li>
</ul>
<h4 id="数据的流向"><a href="#数据的流向" class="headerlink" title="数据的流向"></a>数据的流向</h4><img src="https://pic.imgdb.cn/item/62711f100947543129befd3b.jpg" style="zoom:80%;" />

<p>一般情况下，前端是不会凭空造出数据的，因此最后前端展示的数据一定是从数据库中来的，数据的流向通常也是从数据库流向页面。可将其分成三个部分：数据访问、业务处理和业务解释。</p>
<ol>
<li>数据访问：这一部分是用于从数据库中读取数据，将数据记录转换成数据实体也就是 Java 对象，便于操作。</li>
<li>业务处理：这一部分是数据流的核心，几乎所有数据的操作都是在这一部分完成的。</li>
<li>业务解释：这一部分是用于展示给前端的数据，解释业务体现在某些字段&#x2F;值是需要经过处理的才会呈现的。</li>
</ol>
<h4 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h4><ul>
<li>DAO，是用于<strong>操作数据</strong>而不是描述数据的。</li>
<li>PO&#x2F;DO&#x2F;Entity，其数据结构对应数据表中的一条记录，因此是同一类别的。</li>
<li>BO，可以理解为 PO 的组合，举个简单的例子，假设 PO 是一条交易记录，BO 就可以是一个人全部的交易记录集合对象。</li>
<li>DTO，用于传输数据，可能传递给前端，也有可能传递给其他系统。用于<strong>承载数据</strong>。</li>
<li>VO，这个最好理解，前端最后需要的数据长什么样，对应的对象就是 VO。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>High Performance Computer Architecture</title>
    <url>/2022/05/01/HighPerformance/</url>
    <content><![CDATA[<p>Hong Kong University 2022 summer semester class review —— ELEC6036 High Performance Computer Architecture.</p>
<span id="more"></span>

<h3 id="Pipelining"><a href="#Pipelining" class="headerlink" title="Pipelining"></a>Pipelining</h3><h4 id="Pipelining-Lessons"><a href="#Pipelining-Lessons" class="headerlink" title="Pipelining Lessons"></a>Pipelining Lessons</h4><ul>
<li><p>Pipelining is an implementation technique whereby <strong>multiple instructions are</strong> <strong>overlapped in execution</strong>.</p>
</li>
<li><p>Pipelining is the key implementation technique that is currently used to make high</p>
<p>performance CPUs.</p>
</li>
<li><p>Pipelining <u>doesn’t help to lower the <strong>latency</strong> of single task,</u> it helps to increase the <strong>throughput</strong>(overall system performance) of entire workload.</p>
</li>
<li><p>Pipeline rate limited by <strong>slowest</strong> (longest) pipeline stage.</p>
</li>
<li><p>The principle: <strong>Multiple</strong> tasks operating simultaneously using different resources.</p>
</li>
<li><p>Potential speedup &#x3D; <strong>Number pipe stages</strong></p>
</li>
<li><p><strong>Unbalanced</strong> lengths of pipe stages reduces speedup: that is, the key is every stage should have <strong>the same duration</strong>.</p>
</li>
<li><p>Time to “<strong>fill</strong>“ pipeline and time to “<strong>drain</strong>“ it reduces speedup.</p>
</li>
<li><p>Stall for Dependences. (stall &#x3D; delay, i.e we will have delay in the pipelined computer whenever there is contro&#x2F;data dependences between the instructions)</p>
</li>
</ul>
<h4 id="The-Five-Stages-of-Load"><a href="#The-Five-Stages-of-Load" class="headerlink" title="The Five Stages of Load"></a>The Five Stages of Load</h4><img src="https://pic.imgdb.cn/item/626e714f239250f7c5ad139b.jpg" style="zoom:80%;" />

<ul>
<li><strong>Ifetch</strong>: Instruction Fetch, fetch the instruction <u>from the instruction memory</u>.</li>
<li><strong>Reg&#x2F;Dec</strong>: Registers Fetch and Instruction Decode <u>from register file’s Read ports</u></li>
<li><strong>Exec</strong>: Calculate the memory address <u>from ALU</u></li>
<li><strong>Mem</strong>: Read the data <u>from the Data Memory</u></li>
<li><strong>Wr</strong>: Write the data back to the register file <u>from register file’s Write port</u></li>
</ul>
<img src="https://pic.imgdb.cn/item/626e756b239250f7c5b713f8.jpg" style="zoom:80%;" />

<p>As the instruction execution cycle uses different hardware components for different steps, it is possible to set up a <strong>pipeline</strong>.</p>
<p><img src="https://pic.imgdb.cn/item/626e77d2239250f7c5bce44c.jpg"></p>
<p>Suppose each stage takes 1 nsec(nano-second). Then each instruction still takes 5 nsec. But once the pipeline has been filled, a complete instruction rolls out every 1 nsec. Thus, the <strong>speedup</strong> is 5.</p>
<h4 id="Pipelining-in-the-CPU"><a href="#Pipelining-in-the-CPU" class="headerlink" title="Pipelining in the CPU"></a>Pipelining in the CPU</h4><p>(instruction-level parallelism)</p>
<ul>
<li>Pipelining is an implementation technique that exploits <strong>parallelism</strong> among instructions in a sequential instruction stream.</li>
<li>A major advantage of pipelining over “<strong>parallel processing</strong>” is that <strong>it is not visible to the programmer</strong> (whereas in parallel processing, the program usually needs to specify what kinds of tasks to be executed in parallel).</li>
<li>In a computer system, each pipeline stage completes a part of the instruction being executed. </li>
<li>The time required between <u>moving an instruction one step down the pipeline is a machine cycle</u> (<strong>the clock cycle</strong>). The length of a machine cycle is determined by the time required for <u>the slowest stage to proceed</u>.</li>
<li>The computer engineer should try to balance the length of each pipeline stage so as to achieve the ideal speedup. In practice, however, the pipeline stages will not be perfectly the same, and there are additional <strong>overheads</strong>. But we can get close to the <strong>ideal case</strong> (i.e. CPI &#x3D; 1, Cycle Per Instruction).</li>
</ul>
<p><strong>Design Issues</strong></p>
<ul>
<li>We have to make sure that <u>the same resource (e.g., ALU) is not used in more than one pipeline stage</u>.</li>
<li>If the resources used in the same pipelining stage are different, then <strong>overlapping</strong> is possible.</li>
<li>However, we must note that to retain the <strong>intermediate values</strong> produced by an individual instruction for all its pipeline stages, we must include <strong>temporary registers</strong> between the pipeline stages.</li>
</ul>
<img src="https://pic.imgdb.cn/item/626e8d05239250f7c5f37bbf.jpg" style="zoom: 67%;" />

<p>($1, $2 or $3 - represent Register #1, #2 and #3)</p>
<ul>
<li>Pipelining increases the processor <strong>instruction throughput</strong> — the <u>number of instructions completed per unit time</u>.</li>
<li>Remember: pipelining does not reduce the execution time of a single instruction.</li>
<li>The increase in instruction throughput means that <u>the program runs faster</u>, even though no single instruction runs faster.</li>
<li>Imbalance among the pipeline stages reduces performance since the <strong>clock</strong> cannot run faster than the time needed for the slowest pipeline stage.</li>
<li>Pipelining overhead can arise from the combination of <strong>pipeline register delay</strong> (propagation delay of the register to transfer the values between the pipeline stages) and other factors.</li>
</ul>
<h4 id="Graphically-Representing-Pipelines"><a href="#Graphically-Representing-Pipelines" class="headerlink" title="Graphically Representing Pipelines"></a>Graphically Representing Pipelines</h4><p><strong>Conventional Pipelined Execution Representation</strong></p>
<img src="https://pic.imgdb.cn/item/626e8f04239250f7c5fa5f47.jpg" style="zoom:80%;" />

<p><strong>Single Cycle, Multiple Cycle, vs. Pipeline</strong></p>
<img src="https://pic.imgdb.cn/item/626e8f3a239250f7c5fb2a2c.jpg" style="zoom:80%;" />

<p>Suppose we execute 100 instructions:</p>
<ul>
<li><p><strong>Single Cycle Machine</strong></p>
<p>- 45 ns&#x2F;cycle x 1 CPI x 100 instructions &#x3D; 4500ns</p>
</li>
<li><p><strong>Multi-Cycle Machine</strong></p>
<p>- 10 ns&#x2F;cycle x 4.6 CPI (due to instruction mix) x 100 instructions &#x3D; 4600ns</p>
</li>
<li><p><strong>Ideal pipelined machine</strong></p>
</li>
</ul>
<p>  - 10 ns&#x2F;cycle x (1 CPI x 100 instructions + 4 cycles drain) &#x3D; 1040ns!!</p>
<p>Ans: pipelining is much faster, i.e. in the above example, the total duration is around 1&#x2F;4 of the total time required for single-sysle machine!</p>
<p><strong>Why Pipeline? Because We Can!</strong></p>
<img src="https://pic.imgdb.cn/item/626e9041239250f7c5fecac6.jpg" style="zoom:80%;" />

<h4 id="Pipeline-Hazards"><a href="#Pipeline-Hazards" class="headerlink" title="Pipeline Hazards"></a>Pipeline Hazards</h4><h5 id="Structural-Hazards"><a href="#Structural-Hazards" class="headerlink" title="Structural Hazards:"></a><strong>Structural Hazards</strong>:</h5><p>attempt to use the same resource in two different ways (e.g., by two different instructions) at the same time.</p>
<p>- e.g., combined washer&#x2F;dryer would be a structural hazard or “folder” busy doing something else (e.g., watching TV ;-)</p>
<img src="https://pic.imgdb.cn/item/626e9224239250f7c5055a4b.jpg" style="zoom:80%;" />



<h5 id="Control-Hazards"><a href="#Control-Hazards" class="headerlink" title="Control Hazards:"></a><strong>Control Hazards</strong>:</h5><p><u>attempt to make a decision <strong>before</strong> condition is evaluated</u></p>
<p>- e.g., washing football uniforms and need to get proper detergent level; need to see after dryer before next load in</p>
<p>- <u>branch instructions</u></p>
<ul>
<li><p><strong>Control Hazard Solution #1: Stall</strong></p>
<img src="https://pic.imgdb.cn/item/626e952d239250f7c50f6c42.jpg" style="zoom:80%;" />

<p><u>Stall</u>: wait until decision is clear</p>
<p><u>Impact</u>: 2 lost cycles (i.e. 3 clock cycles per branch instruction) &#x3D;&gt; slow</p>
<p><u>Move decision to the end of decode</u>. (earlier to the decoder stage) —— save 1 cycle per branch.</p>
</li>
<li><p><strong>Control Hazard Solution #2: Predict</strong></p>
<img src="https://pic.imgdb.cn/item/626e95fa239250f7c5128041.jpg" style="zoom:80%;" />

<p><u>Predict</u>: guess one direction then back up if wrong</p>
<p><u>Impact</u>: 0 lost cycles per branch instruction if right, 1 if wrong (right - 50% of time)</p>
<ul>
<li>Need to “Squash” and restart following instruction if wrong</li>
<li>Produce CPI on branch of (1 * 0.5 + 2 * 0.5 &#x3D; 1.5) （the CPI of the branch instructions）</li>
<li>Total CPI might then be: 1.5 * 0.2 + 1 * 0.8 &#x3D; 1.1 (20% branch)</li>
</ul>
<p><u>More dynamic scheme</u>: history of 1 branch ( - 90%) , e.g. if there is 30% branch, then the total CPI &#x3D; 1.5 * 0.3 + 1 * 0.7</p>
<img src="https://pic.imgdb.cn/item/626e9b00239250f7c52578d9.jpg" style="zoom:80%;" />

<p>Delayed Branch: Redefine branch behavior (takes place after next instruction)</p>
<p>Impact: 0 clock cycles per branch instruction if can find instruction to put in “slot” ( - 50% of time)</p>
<p>As launch more instruction per clock syscle, less useful</p>
</li>
</ul>
<h5 id="Data-Hazards"><a href="#Data-Hazards" class="headerlink" title="Data Hazards:"></a><strong>Data Hazards</strong>:</h5><p>attempt to use item before it is ready ( an instruction depends on the result of a previous instruction still in the pipeline.)</p>
<p>- e.g., one sock of pair in dryer and one in washer; can’t fold until get sock from washer through dryer</p>
<p>- <u>instruction depends on result of prior instruction still in the pipeline</u></p>
<p><strong>Data Hazard on r1: Read After Write (RAW)</strong></p>
<img src="https://pic.imgdb.cn/item/626e9c70239250f7c52ae07d.jpg" style="zoom:80%;" />

<img src="https://pic.imgdb.cn/item/626ea026239250f7c539334f.jpg" style="zoom:80%;" />

<p><strong>Data Hazard Solution: Forwarding</strong></p>
<img src="https://pic.imgdb.cn/item/626e9d7c239250f7c52ea8e7.jpg" style="zoom:80%;" />

<p><strong>Forwarding (or Bypassing): What About Loads?</strong></p>
<img src="https://pic.imgdb.cn/item/626f6cdc239250f7c5971695.jpg" style="zoom:80%;" />

<img src="C:\Users\win10\AppData\Roaming\Typora\typora-user-images\image-20220502133433952.png" alt="image-20220502133433952" style="zoom:80%;" />

<p><strong>Can always resolve these hazards by waiting(pipeline stall)</strong></p>
<p>- pipeline control must detect the hazard</p>
<p>- take action (or delay action) to resolve hazards</p>
<img src="https://pic.imgdb.cn/item/62790e490947543129ab86b8.jpg" style="zoom:80%;" />



<h4 id="Summary-of-Concepts"><a href="#Summary-of-Concepts" class="headerlink" title="Summary of Concepts"></a>Summary of Concepts</h4><ul>
<li>Reduce CPI by overlapping many instructions<ul>
<li>average throughput of approximately 1 CPI with fast clock</li>
</ul>
</li>
<li>Utilize capabilities of the datapath<ul>
<li>start next instruction while working on the current one</li>
<li>limited by length of longest stage (plus fill&#x2F;flush)</li>
<li>detect and resolve hazards</li>
</ul>
</li>
<li>What makes it easy</li>
<li><u>all instructions are of the same length</u> (very import for the pipeline design)</li>
<li>just a few instruction formats</li>
<li>memory operands appear only in loads(LW) and store(SW)</li>
<li>What makes it hard?<ul>
<li>structural hazards: suppose we had only one memory</li>
<li>control hazards: need to worry about branch instructions</li>
<li>data hazards: an instruction depends on a previous instruction (whenever two instructions have data dependence, there will be data hazards)</li>
</ul>
</li>
</ul>
<h4 id="Issues-in-Pipelined-Design"><a href="#Issues-in-Pipelined-Design" class="headerlink" title="Issues in Pipelined Design"></a>Issues in Pipelined Design</h4><img src="https://pic.imgdb.cn/item/626f7439239250f7c5a839d6.jpg" style="zoom:80%;" />

<h3 id="High-Performance-Techniques"><a href="#High-Performance-Techniques" class="headerlink" title="High Performance Techniques"></a>High Performance Techniques</h3><ul>
<li>How to Optimize the Pipeline? Extract More Parallelism! (<strong>multiple execution-stage PL</strong> computers e.g. ADD - EX1 and EX2, etc)</li>
<li><strong>Compiler-Directed (Static)</strong> Approaches<ul>
<li>VLIW (Very Long Instruction Word)</li>
<li>EPIC (Explicit Parallel Instruction Computer)</li>
<li>Superscalar</li>
<li>Software Pipelining</li>
</ul>
</li>
<li>A Dynamic Approach—Scoreboard</li>
</ul>
<p><strong>Pipelining: Can we somehow make CPI closer to 1?</strong></p>
<ul>
<li><p>Let’s assume FP ( full pipelining):</p>
</li>
<li><p>If we have a 4-cycle instruction (an instruction requiring 4 execution cycles), then we need 3 instructions between a producing instruction and its use:</p>
<img src="https://pic.imgdb.cn/item/626fb289239250f7c53ab10f.jpg" style="zoom:80%;" />
</li>
<li><p>Getting CPI &lt;1 : Processing Multiple Instructions&#x2F;Cycles</p>
<ul>
<li>Use parallel processing!!</li>
<li>Two main variations: superscalar and VLIW</li>
<li>Superscalar: varying number of instructions&#x2F;cycle (1 to 6)<ul>
<li>parallelism and dependencies determined&#x2F;resolved by HW(hardware)</li>
<li>IBM PowerPC 604, Sun UltraSPARC, DEC Alpha 21164, HP 7100</li>
</ul>
</li>
<li>Very Long Instruction Words (VLIW): fixed number of instructions (16) determined by compiler<ul>
<li>pipeline is exposed; compiler must schedule delays to get right results</li>
</ul>
</li>
<li>Explicit Parallel Instruction Computer (EPIC)&#x2F;Intel<ul>
<li>128 bit packets containing 3 instructions (can execute sequentially)</li>
<li>can link 128 bit packets together to allow more parallelism</li>
<li><strong>compiler determines parallelism</strong>, HW checks dependencies and <strong>forwards&#x2F;stalls</strong></li>
</ul>
</li>
</ul>
</li>
<li><p>Parallelism: Overt vs. Covert</p>
<img src="https://pic.imgdb.cn/item/626fc41e239250f7c56323bd.jpg" style="zoom:80%;" />

<img src="https://pic.imgdb.cn/item/626fc453239250f7c563973e.jpg" style="zoom:80%;" /></li>
</ul>
<h4 id="Compliation-and-ISA-Instruction-Set-Architecture"><a href="#Compliation-and-ISA-Instruction-Set-Architecture" class="headerlink" title="Compliation and ISA (Instruction Set Architecture)"></a>Compliation and ISA (Instruction Set Architecture)</h4><ul>
<li><p>Efficient compilation requires knowledge of the pipeline structure</p>
<ul>
<li><strong>latency</strong> and <strong>bandwidth</strong> of each operation type</li>
</ul>
</li>
<li><p>But a good ISA transcends several implementations with different pipelines</p>
<ul>
<li>should things like a delayed branch be in an ISA?</li>
<li>should a compiler use the properties of one implementation when compiling for an ISA?</li>
<li>do we need a new interface?</li>
</ul>
<img src="https://pic.imgdb.cn/item/626fca4d239250f7c571fcca.jpg" style="zoom:80%;" /></li>
</ul>
<h4 id="Very-Long-Instruction-Word-VLIW-Computers"><a href="#Very-Long-Instruction-Word-VLIW-Computers" class="headerlink" title="Very Long Instruction Word (VLIW) Computers"></a>Very Long Instruction Word (VLIW) Computers</h4><img src="https://pic.imgdb.cn/item/626fcd40239250f7c5794c31.jpg" style="zoom:80%;" />

<p><strong>Pros</strong>(Strength)</p>
<ul>
<li>Very simple hardware<ul>
<li>no dependency detection</li>
<li>simple issue logic</li>
<li>just ALUs and register files</li>
</ul>
</li>
<li>Potentially exploits large amounts of ILP</li>
</ul>
<p><strong>Cons</strong>(Weakness)</p>
<ul>
<li>Lockstep execution (static schedule)<ul>
<li>very sensitive to long latency operations(cache misses)</li>
</ul>
</li>
<li>Global register file hard to build</li>
<li>Lots of NO-OPs<ul>
<li>poor “code density”</li>
<li>I-cache capacity and bandwidth compromised</li>
</ul>
</li>
<li>Must recompile sources to deliver potential</li>
<li>Implementation visible through ISA</li>
</ul>
<h4 id="EPIC-Explicit-Parallel-Instruction-Computer"><a href="#EPIC-Explicit-Parallel-Instruction-Computer" class="headerlink" title="EPIC: Explicit Parallel Instruction Computer"></a>EPIC: Explicit Parallel Instruction Computer</h4><p><strong>128-bit instructions</strong>:</p>
<ul>
<li><p>three 3-address operations</p>
</li>
<li><p>a template that encodes dependencies</p>
</li>
<li><p>128 general registers</p>
</li>
<li><p>predication (branch prediction)</p>
</li>
<li><p>speculative load (load prediction)</p>
</li>
<li><p>Example: IA-64 of Intel&#x2F;HP</p>
<img src="C:\Users\win10\AppData\Roaming\Typora\typora-user-images\image-20220502204711061.png" alt="image-20220502204711061" style="zoom:80%;" /></li>
</ul>
<h4 id="Superscalar"><a href="#Superscalar" class="headerlink" title="Superscalar"></a>Superscalar</h4><p>Superscalar DLX: 2 instructions, 1 FP &amp; 1 anything else (int &#x2F; LW &#x2F; SW)</p>
<ul>
<li><p>fetch 64 bits&#x2F;clock cycle; integer on left, FP on right</p>
</li>
<li><p>can only issue 2nd instruction if 1st instruction issues</p>
</li>
<li><p>more ports for FP registers to do FP load &amp; FP op in a pair</p>
<img src="https://pic.imgdb.cn/item/626fd33f239250f7c588b92f.jpg" style="zoom: 67%;" />
</li>
<li><p>1 cycle load delay expands to 3 instructions in SS (super-scalar)</p>
<ul>
<li>instruction in right half can’t use it, nor instructions in next slot</li>
</ul>
</li>
</ul>
<p>Limits of Superscalar:</p>
<ul>
<li><p>While integer&#x2F;FP split is simple for the HW, get CPI of 0.5 only for programs with:</p>
<ul>
<li>exactly 50% FP operations</li>
<li>no hazards</li>
</ul>
</li>
<li><p>If more instructions issue at same time, greater difficulty of decode and issue</p>
<ul>
<li><p>even 2-scalar &#x3D;&gt; examine 2 opcodes, 6 register specifiers, &amp; decide if 1 or 2 instructions</p>
<p>can issue</p>
</li>
</ul>
</li>
<li><p>VLIW: tradeoff instruction space for simple decoding</p>
<ul>
<li>the long instruction word has room for many operations</li>
<li>by definition, all the operations the compiler puts in the long instruction word can execut in parallel</li>
<li>e.g., 2 integer operations, 2 FP ops, 2 memory references, 1 branch; 16 to 24 bits for each of these fields &#x3D;&#x3D;&gt; 7 x 16 or 112 bits to 7 x 24 or 168 bits wide</li>
<li>need compiling technique that schedules across several branches</li>
</ul>
</li>
</ul>
<h4 id="Software-Pipelining"><a href="#Software-Pipelining" class="headerlink" title="Software Pipelining"></a>Software Pipelining</h4><ul>
<li><p>Observation: if iterations from loops are independent, then can get more ILP (instruction level parallelism) by taking instructions from different iterations</p>
</li>
<li><p>Software pipelining: reorganizes loops so that each iteration is made from instructions chosen from different iterations of the original loop (i.e., Tomasulo algorithms in SW)</p>
<img src="https://pic.imgdb.cn/item/626fd999239250f7c599aa88.jpg" style="zoom: 67%;" /></li>
</ul>
<p><strong>Example:</strong></p>
<img src="https://pic.imgdb.cn/item/626fd9f5239250f7c59aa218.jpg" style="zoom:80%;" />

<h4 id="Multiple-Issue-as-compared-with-VLIW"><a href="#Multiple-Issue-as-compared-with-VLIW" class="headerlink" title="Multiple Issue as compared with VLIW"></a>Multiple Issue as compared with VLIW</h4><p><strong>Multiple Issue:</strong></p>
<ul>
<li>more complex issue logic<ul>
<li>check dependencies</li>
<li>check structural hazards</li>
<li>issue variable number of instructions (0-N)</li>
<li>shift unissued instructions over</li>
</ul>
</li>
<li>Able to run existing binaries<ul>
<li>recompile for performance, not correctness</li>
</ul>
</li>
<li>Data paths identical<ul>
<li>but bypass requires detection</li>
</ul>
</li>
<li>Neither VLIW or multiple-issue can schedule around run-time variation in instruction latency<ul>
<li>cache misses</li>
</ul>
</li>
<li>Dealing with run-time variation requires run-time or dynamic scheduling</li>
</ul>
<h4 id="The-problem-with-Static-Scheduling-Compile-Time"><a href="#The-problem-with-Static-Scheduling-Compile-Time" class="headerlink" title="The problem with Static Scheduling (Compile-Time)"></a>The problem with Static Scheduling (Compile-Time)</h4><p><strong>In-Order Execution</strong>:</p>
<ul>
<li>an unexpected long latency blocks <u>ready instructions</u> from executing (scheduled code cannot be changed at run-time)</li>
<li>binaries need to be <u>rescheduled (recompiled)</u> for each new processor implementation</li>
<li>small number of named registers becomes a bottleneck.</li>
</ul>
<p><strong>动态调度：</strong></p>
<ul>
<li><p>通过硬件在程序执行时重新安排代码的执行序列来减少竞争引起的流水线停顿时间</p>
</li>
<li><p>动态调度流水线具备以下功能：</p>
<ul>
<li>允许按序取多条指令和发射多条指令—-取指(IF)流水级允许按顺序取多条指令进入单口暂存器(single-entry latch)或队列(queue), 指令然后从latch或queue取出，进入ID节拍。</li>
<li>能检查并消除hazards—-将ID流水级分为独立的两级：Issue（ID1）级和Read operand（ID2）级：<ul>
<li>Issue级功能 —-指令译码，检查是否存在结构竞争(即在这一流水级解决结构竞争问题）；</li>
<li>Read operands级功能 —-等到无数据竞争(RAW)后，读出操作数，即在这一流水级解决数据竞争问题</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Scoreboard-a-bookkeeping-technique"><a href="#Scoreboard-a-bookkeeping-technique" class="headerlink" title="Scoreboard: a bookkeeping technique"></a>Scoreboard: a bookkeeping technique</h3><ul>
<li>Out-of-order execution divides <strong>ID stage</strong>:<ul>
<li><strong>Issue</strong>——decode instructions, check for <strong>structural hazards</strong></li>
<li><strong>Read operands</strong>——<strong>wait until no data hazards</strong>, then read operands</li>
</ul>
</li>
<li>Scoreboards date to CDC6600 designed in 1963</li>
<li>Instructions execute whenever not dependent on previous instructions and no hazards</li>
<li>CDC6600: <strong>in-order issue, out-of-order execution, out-of-order commit</strong> (or completion) (out-of-order or dynamic order&#x2F;scheduling, means that it DOES NOT have to follow the original order of the program code)<ul>
<li>no forwarding</li>
<li>imprecise interrupt&#x2F;exception model for now</li>
</ul>
</li>
</ul>
<h4 id="Scoreboard-Implications"><a href="#Scoreboard-Implications" class="headerlink" title="Scoreboard Implications"></a>Scoreboard Implications</h4><p><strong>算法设计</strong></p>
<ul>
<li>动态调度技术需要将ID译码段分成两个阶段：1是发射，2是读取操作数。<ul>
<li>发射阶段对指令进行译码，检查<strong>结构冒险</strong>（例如有四个运算器：整数运算、加法器、乘法器、除法器，检查该指令需要使用的运算器是否正在被占用）读取操作数阶段检查数据冒险（读之前检查寄存器的值是否已经写回，或者是否会覆盖了之前的值）。</li>
<li><strong>数据冒险</strong>的解决方法：<ul>
<li>读写冒险(RAW)：将指令和操作数保存起来，然后只能在读操作数阶段进行读取；</li>
<li>写写冒险(WAW)：检测是否有其它指令会写回到相同的寄存器（检测到冒险），有则等待，直到其它的完成</li>
</ul>
</li>
<li>发射阶段：假如检测到没有结构冒险和数据冒险，那么记分板将会将指令发射到相关的运算器，假如结构冒险或者写写冒险发生了，那么该指令将会等待，直到冒险消失为止。</li>
<li>读取操作数：没有数据相关了以后（之前的指令不会写回源寄存器或者正在写寄存器的情况时，读写冒险），读取操作数。读取操作数后将交给运算器，之后开始运算。发送到运算器的顺序可能是乱序的。</li>
</ul>
</li>
<li>之后就是执行段以及写回段了。执行段在完成计算以后会通知记分板。记分板直到计算已经完成了，那么它进行读写冒险检验（即写之前是否已经读取了寄存器的值，例如 ADD F10,F0,F8 SUB F8,F8,F14，这里SUB指令写回时要检查ADD指令的F8是否已经读取了，仅此而已）假如检测到冒险，则等待，不然就可以写寄存器了。</li>
</ul>
<p>Out-of-order completion &#x3D;&#x3D;&gt; WAR, WAW hazards?</p>
<ul>
<li>Solutions for WAR:<ul>
<li><u>stall writeback until registers have been read</u></li>
<li>read registers only during Read Operands stage</li>
</ul>
</li>
<li>No register renaming!  (This is different from the Tomasulo’s computers to be discussed)</li>
<li>Need to have multiple instructions in execution phase &#x3D;&#x3D;&gt;multiple execution units or pipelined execution units</li>
<li>Scoreboard keeps track of dependencies between instructions that have already issued</li>
<li>Scoreboard replaces ID, EX, WB with 4 stages (ID1(Issue), ID2(Read Operand), EX, WB(or completion))</li>
</ul>
<h4 id="Four-Stages-of-Scoreboard-Control"><a href="#Four-Stages-of-Scoreboard-Control" class="headerlink" title="Four Stages of Scoreboard Control"></a>Four Stages of Scoreboard Control</h4><ul>
<li><p>Issue—decode instructions &amp; check for structural hazards (ID1)</p>
<ul>
<li>instructions issued in program order (for hazard checking)</li>
<li>don’t issue if structural hazard</li>
<li>don’t issue if instruction is output dependent on any previously issued but uncompleted instruction (no WAW hazards)</li>
</ul>
</li>
<li><p>Read operands—wait until no data hazards, then read operands (ID2)</p>
<ul>
<li>all real dependencies (RAW hazards) resolved in this stage, since we wait for instructions to write back data</li>
<li>no forwarding of data in this model</li>
</ul>
</li>
<li><p>Execution—operate on operands (EX)</p>
<ul>
<li>the functional unit begins execution upon receiving operands; when the result is ready, it notifies the scoreboard that it has completed execution</li>
<li>note that different instructions will require different number of clock cycles for the execution stage!</li>
</ul>
</li>
<li><p>Write result—finish execution (WB)</p>
<ul>
<li><strong>stall until no WAR hazards</strong> with previous instructions:</li>
</ul>
<img src="https://pic.imgdb.cn/item/626fe9da239250f7c5db2acb.jpg" style="zoom:80%;" /></li>
</ul>
<h4 id="Three-Parts-of-the-Scoreboard"><a href="#Three-Parts-of-the-Scoreboard" class="headerlink" title="Three Parts of the Scoreboard"></a>Three Parts of the Scoreboard</h4><ul>
<li><p><strong>Instruction status</strong>:</p>
<p>Which of 4 steps the instruction is in</p>
</li>
<li><p><strong>Functional unit status</strong>:</p>
<p>Indicates the state of the functional unit (FU). 9 fields <u>for each functional unit</u>:</p>
<img src="https://pic.imgdb.cn/item/626fea7f239250f7c5dcf4fc.jpg" style="zoom:80%;" />
</li>
<li><p><strong>Register result status</strong>:</p>
<p>Indicates which <u>functional unit will write each register</u>, if one exists; <u>blank</u> when no pending instructions will write that register</p>
</li>
</ul>
<p><strong>Scoreboard Example:</strong></p>
<img src="https://pic.imgdb.cn/item/626feb92239250f7c5e041c4.jpg" style="zoom:80%;" />

<h4 id="Summary-of-Concepts-1"><a href="#Summary-of-Concepts-1" class="headerlink" title="Summary of Concepts"></a>Summary of Concepts</h4><ul>
<li>Compiler scheduling</li>
<li>HW exploiting ILP<ul>
<li>works when we can’t possibly know dependencies at compile time</li>
<li>code for one machine runs well on another</li>
</ul>
</li>
<li>Key idea of scoreboard: allow instructions behind stall to proceed (decode &#x3D;&gt; issue instructions and read operands)<ul>
<li>enables out-of-order execution &#x3D;&#x3D;&gt; out-of-order completion</li>
<li>ID stage checked both for structural and data dependencies</li>
<li>original version didn’t handle forwarding</li>
<li>no automatic register renaming (Tomasulo’s computer)</li>
</ul>
</li>
</ul>
<h4 id="要点总结和补充（重点）"><a href="#要点总结和补充（重点）" class="headerlink" title="要点总结和补充（重点）"></a>要点总结和补充（重点）</h4><p>总结和补充一下记分牌工作流程中的要点：</p>
<ul>
<li>一条指令能否发射，一看是否有功能部件空闲可用，这个信息包含在功能状态中；二看指令要写的寄存器是否正要被别的指令写，这个信息包含在寄存器状态中，观察这个信息是为了解决WAW冒险。</li>
<li>一条指令能否读数，要看记分牌是否提示源寄存器不可读，如果不可读，就说明该寄存器将要被别的前序指令改写，现在的指令要等待前序指令写回，观察这个信息是为了解决RAW冒险。</li>
<li>一条指令一旦读数完成，就必然可以进行运算，运算可以是多周期的，在第一个周期结束时应该改写功能状态，表明自己不再需要读寄存器。</li>
<li>一条指令能否写回，要看是否有指令需要读即将被改写的这个寄存器，具体一点来说，就是要观察标记Yes的Rj、Rk对应的寄存器里是否有当前指令的目的寄存器，如果有，就说明有指令需要读取寄存器的旧值，这样一来我们就要等指令读完旧值之后再写回，观察这个信息是为了解决WAR冒险。</li>
</ul>
<h3 id="Tomasulo-Algorithm"><a href="#Tomasulo-Algorithm" class="headerlink" title="Tomasulo Algorithm"></a>Tomasulo Algorithm</h3><p>Improved Dynamic Instruction Scheduling: Tomasulo Algorithm</p>
<p>由于<strong>记分牌算法只能检测竞争(WAR,WAW)并不能消除这两种竞争</strong>，所以将记分牌算法改进为Tomasulo算法。</p>
<p>Tomasulo算法的基本思想：</p>
<ul>
<li>Tomasulo算法采用寄存器重命名（Renaming）方法，将记分牌中的寄存器用一大组虚拟寄存器名来代替，即用虚拟寄存器集来代替真实的FP寄存器组，由于虚拟寄存器集合所含有的寄存器数目远大于真是的寄存器组，所以可以用虚拟寄存器集来实现寄存器重命名。</li>
<li>虚拟寄存器组由三部分组成：<ul>
<li>每个功能单元（FU）都带有的保留站（Reservation station）</li>
<li>取数缓冲区（Load buffers）—-保存被访问的存储单元的数据和地址</li>
<li>存数缓冲区（Store buffers）</li>
</ul>
</li>
</ul>
<h4 id="Recall-Compiler-Techniques-for-Parallelism"><a href="#Recall-Compiler-Techniques-for-Parallelism" class="headerlink" title="Recall: Compiler Techniques for Parallelism"></a>Recall: Compiler Techniques for Parallelism</h4><ul>
<li><strong>Loop unrolling</strong> &#x3D;&gt; multiple iterations of loop in software:<ul>
<li>amortizes loop overhead over several iterations</li>
<li>gives more opportunity for scheduling around stalls</li>
</ul>
</li>
<li><strong>Software Pipelining</strong> &#x3D;&gt; take one instruction from each of several iterations of the loop<ul>
<li>software overlapping of loop iterations</li>
</ul>
</li>
<li><strong>Very Long Instruction Word machines</strong> (VLIW) &#x3D;&gt;multiple operations coded in single, long instruction<ul>
<li>requires sophisticated compiler to decide which operations can be done in parallel</li>
<li>trace scheduling &#x3D;&gt; find common path and schedule code as if branches didn’t exist (add “fixup code”)</li>
</ul>
</li>
<li><u>ALL OF THE ABOVE require additional registers</u>!</li>
</ul>
<h4 id="Recall-How-are-WAR-and-WAW-hazard-handled-in-scoreboard"><a href="#Recall-How-are-WAR-and-WAW-hazard-handled-in-scoreboard" class="headerlink" title="Recall: How are WAR and WAW hazard handled in scoreboard?"></a>Recall: How are WAR and WAW hazard handled in scoreboard?</h4><ul>
<li><p><strong>WAR</strong> hazards handled by <u>stalling in WriteBack stage</u></p>
</li>
<li><p><strong>WAW</strong> hazards handled by <u>stalling in Issue stage</u></p>
</li>
<li><p>Are either of these <em>real</em> hazards???</p>
<img src="https://pic.imgdb.cn/item/627011fc239250f7c546a61c.jpg" style="zoom:80%;" /></li>
</ul>
<h4 id="Tomasulo-Algorithm-vs-Scoreboard"><a href="#Tomasulo-Algorithm-vs-Scoreboard" class="headerlink" title="Tomasulo Algorithm vs. Scoreboard"></a>Tomasulo Algorithm vs. Scoreboard</h4><ul>
<li>Control and buffers <u>distributed</u> with Function Units (FU) vs. <u>centralized</u> in scoreboard:<ul>
<li>FU buffers called “<u>reservation stations</u>“(A Buffer to a specific FU), have pending operands</li>
</ul>
</li>
<li>Registers in instructions replaced by values or pointers to reservation stations(RS); called <strong>Register Renaming</strong>. (i.e. pointing to a specific RS to wait for its register result)<ul>
<li><u>avoids WAR, WAW hazards</u></li>
<li><u>more reservation stations than registers</u>, so can do optimizations that compilers can’t do</li>
</ul>
</li>
<li>Results to FU <u>from RS</u>, not through registers, over <strong>Common Data Bus</strong> that broadcasts results to all FUs.</li>
<li>Load and Store treated as FUs with RSs as well</li>
<li>Integer instructions can go past branches, allowing FP ops beyond basic block in FP queue.</li>
</ul>
<img src="https://pic.imgdb.cn/item/6270bfa2239250f7c55636f2.jpg" style="zoom:80%;" />

<h4 id="Organization"><a href="#Organization" class="headerlink" title="Organization"></a>Organization</h4><img src="https://pic.imgdb.cn/item/6270b8af239250f7c5461af3.jpg" style="zoom:80%;" />

<ul>
<li>浮点寄存器（FP）通过一对总线与每一个功能单元（FU）相连接，这一对总线分别对应两个操作数，并通过一条总线与存数缓冲区（Load buffer）相连接。这里是浮点指令队列，指令在这里等待发射；</li>
<li>功能单元（FU）的输出和存数缓冲区（Load Buffer）的输出汇总在CDB与浮点寄存器（FP）的输入相连接。在这个算法中存储指令在执行前会先计算好存储地址；</li>
<li>公共数据总线（Common data bus）CDB：CDB与FP，Reservation station，store buffer等输入相连接，唯一无连接关系的是Load Buffer的输入。它可以直达寄存器堆（用来更新通用寄存器）、加法乘法存储单元的保留站（输送保留站中指令需要的数据）</li>
<li>由于保留站和Buffer都有对应的标识符，所以这里实现了重命名。保留站保留已经发射的指令的信息和缓冲下来的数据，指令一旦离开保留站就意味着指令开始执行</li>
</ul>
<h4 id="RS-Components"><a href="#RS-Components" class="headerlink" title="RS Components"></a>RS Components</h4><ul>
<li>Op: operation to perform in the unit(e.g., add or sub)</li>
<li>Vj, Vk, Value of source operands<ul>
<li>store buffers has V field, result to be stored</li>
</ul>
</li>
<li>Qj, Qk: reservation stations producing source registers (value to be written)<ul>
<li>note: no ready flags as in scoreboard; Qj, Qk &#x3D; 0 &#x3D;&#x3D;&gt; ready</li>
<li>store buffers only have Qi for RS producing result</li>
</ul>
</li>
<li>Busy: indicates reservation station or FU is busy</li>
<li>Register result status — indicates which functional unit will write each register, if one exists; blank when no pending instructions that will write that register.</li>
</ul>
<img src="https://pic.imgdb.cn/item/6277e6510947543129bf7d99.jpg" style="zoom:80%;" />

<ul>
<li><p>保留站的结构有点像cache，可能有多行数据，每一行都对应一条被发射到保留站的指令。</p>
<ul>
<li>保留站每一行都有Busy位，指示这一行是否现存有指令；</li>
<li>Vj和Vk与记分牌不同，记分牌的Vj和Vk会记录源寄存器的编号，<strong>而保留站则直接把能读取的数据直接拷贝到保留站中</strong>，可想而知，一旦数据进入保留站，那对应的寄存器就和这条指令没瓜葛了；</li>
<li>Qj和Qk的信息和记分牌一样，记录尚不能读取的数据将由哪条指令算出；</li>
<li>A是存储指令的地址，用于存放立即数和计算得到的地址数据。</li>
</ul>
</li>
<li><p>看上去保留站和记分牌非常相似，但是两者其实有很大的不同。</p>
<ul>
<li>以Add为例，保留站中有三行Add信息，这三行数据对应的是同一个加法单元，而在记分牌中这代表着三个加法单元。</li>
<li>记分牌那样的一条通路只对应一条信息的做法容易造成指令堵塞、无法发射，<strong>而保留站则为每条通路预留了缓冲区，指令可以在加法单元忙碌的时候发射到保留站的缓冲区待命</strong>。</li>
</ul>
</li>
<li><p>其次，保留站会直接把读取的数据缓冲下来，而不像记分牌一样只记录一个寄存器编号，只记录编号的话会造成读后写阻塞，因为一条指令在正式执行前一直在监控着它的源寄存器，源寄存器的值是不能改变的，因此后续指令无法写回，只能阻塞流水，<strong>而保留站则贯彻了“数据一旦准备完毕，就立马执行指令”的思想</strong>，指令一旦发现有数据可读，就立马读下来，读下来之后，那个源寄存器的写与不写就不关己事了。</p>
</li>
<li><p>记分牌和保留站相同的地方是都记录了Qj和Qk，即一旦需要的数据被算出来，就通过Qj和Qk捕捉广播数据，<strong>这样的做法其实就是重命名，即用保留站的编号而不是寄存器编号来标记数据源</strong>。</p>
</li>
</ul>
<img src="https://pic.imgdb.cn/item/6277e7030947543129c268cd.jpg" style="zoom:80%;" />

<ul>
<li>除了保留站数据结构之外，Tomasulo同样要记录寄存器结果状态，记录信息和记分牌一样，Tomasulo也会记录寄存器将被哪条指令更新，这个信息在指令寻找源数据时被使用。</li>
</ul>
<h4 id="Three-Stages"><a href="#Three-Stages" class="headerlink" title="Three Stages"></a>Three Stages</h4><ul>
<li>发射级（Issue）<ul>
<li>若是一条FP操作指令，如果<strong>保留站有空</strong>（判断能否发射的唯一标准），则将其送至保留站，如果该指令的操作数已在FP寄存器，将操作数的值送往保留站。</li>
<li>若是一条Load或者Store指令，如果Buffer有空，将其送往相应的Buffer</li>
<li>如果保留站或者Buffer没有空，则存在结构竞争，停顿该指令，直到对应的保留站或者Buffer有空为止。</li>
<li>这一级完成了重命名，因为在保留站中的操作数不再使用寄存器号。</li>
</ul>
</li>
<li>执行级（Execute）<ul>
<li>若有一个或几个操作数未就绪，等待该操作数，并同时监控CDB。一旦操作数就绪，立即存入相应的保留站，若两个操作数均已就绪，则执行该操作，此级检查了是否存在RAW竞争。</li>
</ul>
</li>
<li>写回级（Write Back）<ul>
<li>当结果计算出来之后，将其写入CDB，并从CDB写入目的寄存器以及等待此结果的保留站，当连续写同一寄存器时，只有最后一次才能写入，消除了WAW竞争。</li>
</ul>
</li>
</ul>
<p><strong>1. Issue</strong>:</p>
<ul>
<li>Get instruction from FP Op Queue<ul>
<li>if reservation station free (no structural hazard), control issues instructions and sends operands (renames registers);</li>
</ul>
</li>
</ul>
<p><strong>2. Execution</strong>:</p>
<ul>
<li>Operate on operands (EX)<ul>
<li>when both operands ready then execute; if not ready, watch Common Data Bus for result</li>
</ul>
</li>
</ul>
<p><strong>3. Write Result</strong>:</p>
<ul>
<li>Finish execution (WB)<ul>
<li>write on Common Data Bus to all awaiting units(all the FU that are waiting for its broadcasted result); mark reservation station available</li>
</ul>
</li>
</ul>
<p><strong>Remarks</strong>:</p>
<ul>
<li>Normal data bus: data + destination (“go to” bus) (i.e. destination-oriented data bus in the conventional computers)</li>
<li>Common Data Bus: data + source (“come from” bus) (i.e. a NEW source-oriented data bus trying to broadcast result FROM a specific FU as the data source)<ul>
<li>64 bits of data + 4 bits of Functional Unit source address</li>
<li>write if matches expected Functional Unit (produces result); does the broadcast</li>
</ul>
</li>
</ul>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p><strong>Tomasulo Example Cycle 57</strong></p>
<img src="https://pic.imgdb.cn/item/6270bf24239250f7c5551ddc.jpg" style="zoom:80%;" />

<p><strong>Compare to Scoreboard Cycle 62</strong></p>
<img src="https://pic.imgdb.cn/item/6270bffa239250f7c55700ed.jpg" style="zoom:80%;" />



<p><strong>Tomuasulo调度流程中的要点</strong>：</p>
<ul>
<li>一条指令能否发射，要看对应配置通路的保留站是否有空余，<strong>只要有空余，就可以发射到保留站中等待执行；发射的同时会被能读取的数据直接拷贝到保留站</strong>，这样做就不用考虑读后写冒险，后续的指令只要完成就可以写回，不用顾虑是否会有前序指令需要读取寄存器，换句话说，每一条被发射到保留站中的指令都不再需要读取寄存器堆。</li>
<li>指令在发射的时候会更新寄存器状态表，如果后序指令和前序指令的目的寄存器重合了，就用后序指令的写信息标志寄存器，<strong>表示只会把后序指令的计算结果写进寄存器</strong>，这样可以解决写后写冒险；</li>
<li>如果执行单元中有指令正在执行，其他指令就在保留站中等待；<strong>如果指令缺少源数据，就留在保留站中，时刻监听CDB总线</strong>，如果CDB总线广播了需要的数据，就立马拷贝下来，然后准备执行。</li>
<li>一条指令在源数据全部准备好之后就可以执行，执行可能是多周期的。</li>
<li>一条指令只要完成计算，就可以写回，<strong>写回的数据通过CDB总线直通寄存器堆和各个保留站</strong>。<strong>但是要注意的一点是指令的结果未必会写进寄存器堆</strong>，因为寄存器结果状态表中总是存有最新的状态，即如果发生写后写冒险，Tomasulo算法会记录下最新的写指令，而抛弃前序的写指令结果，前序写指令的结果不会写回到寄存器堆，这样的做法很符合数据流思维。</li>
</ul>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>Tomasulo成功地解决了三种冒险，实现了指令的乱序执行，<strong>且性能比记分牌更好，具体优化的地方有三</strong>：</p>
<ul>
<li>记分牌每条通路只能存一条指令，导致经常有指令因为结构冒险而不能发射，<strong>而Tomasulo引入保留站之后每条通路可以缓冲下多条指令，这样的做法平缓了指令发射的速度</strong>；</li>
<li>写后写冒险时，记分牌过度纠结寄存器名字，会把所有指令的结果都写进寄存器堆，会因为写后写冒险阻塞指令发射，而Tomasulo只保存最新的写入值，这样即保证了正确的结果，又减少了无谓的工作；</li>
<li>读后写冒险时，记分牌过度纠结寄存器名字，指令在执行之前一直检测的是寄存器堆，一旦数据准备好，就会从寄存器堆中取数，这样的后果就是后序指令即使计算完结果也可能不能立刻写回寄存器堆，而Tomasulo则在发射时就拷贝数据，贯彻数据流的思想——“<strong>寄存器名字不重要，寄存器里的数据才重要</strong>”。</li>
</ul>
<p>在写后读冒险中两者都用CDB总线实现了逻辑上的正确，都解决了写后读冒险。</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>但是Tomasulo也不是完美的，它也存在一些问题，图7的PPT显示了Tomasulo算法的一系列问题。</p>
<p>Tomasulo算法中每一个执行单元对应一个保留站，保留站中缓冲多条指令，所以有可能在同一周期有多条指令准备好数据，但是执行单元同时只能执行一条指令，所以就需要从中选择一条指令，简单的解决办法是为保留站的每一行增加一个年龄位，每次出现冲突，就选择最老的指令送到执行单元。</p>
<p>在前文的举例中，电路里的CDB总线只有一组，<strong>这意味着每一个周期只能写回一条指令</strong>，如果同时有多条指令完成，那就只能选择一条指令进行广播，别的指令等待；第二种办法是增加CDB总线，支持多指令广播，但是这会让电路面积大增，包括增加寄存器堆写口、增加保留站tag和CDB总线的比较电路、增加保留站写口。</p>
<h4 id="Drawbacks"><a href="#Drawbacks" class="headerlink" title="Drawbacks"></a>Drawbacks</h4><ul>
<li>Complexity<ul>
<li>delays of 360&#x2F;91, MIPS 10000, IBM 620?</li>
</ul>
</li>
<li>Many associative stores(CDB) at high speed</li>
<li>Performance limited by Common Data Bus<ul>
<li>multiple CDBs &#x3D;&#x3D;&gt; more FU logic for parallel associative stores</li>
</ul>
</li>
</ul>
<h4 id="Why-issue-in-order"><a href="#Why-issue-in-order" class="headerlink" title="Why issue in-order?"></a>Why issue in-order?</h4><ul>
<li>In-order issue permits us to analyze dataflow of program</li>
<li>This way , we know exactly which results should flow to which subsequent instructions<ul>
<li>if we issued out-of-order, we <strong>would confuse RAW and WAR hazards</strong></li>
<li>the most advanced machines ALL issue in-order ;-)</li>
</ul>
</li>
<li>This idea works perfectly well “in principle” with multiple instructions issued per clock:<ul>
<li>need to multi-port “rename table” and be able to re name a sequence of instructions together</li>
<li>need to be able to issue to multiple reservation stations in a single cycle</li>
<li>need to have 2x number of read ports and 1x number of write ports in register file</li>
</ul>
</li>
<li>In-order issue can be serious bottleneck when issuing multiple instructions per clock-cycle</li>
</ul>
<h3 id="The-5-tips-to-develop-an-effective-cloud-architecture-application"><a href="#The-5-tips-to-develop-an-effective-cloud-architecture-application" class="headerlink" title="The 5 tips to develop an effective cloud architecture application"></a>The 5 tips to develop an effective cloud architecture application</h3><ul>
<li>Ensure that your application is scalable by designing each component to be scalable on its own. If every component implements a service interface, responsible for its own scalability in all appropriate dimensions, the overall system will have a scalable base. </li>
<li>For better manageability and high-availability, make sure that your components are loosely coupled. The key is to build components without having tight dependencies between each other, so that if one component were to die (fail), sleep (not respond) or remain busy (slow to respond) for some reason, the other components in the system are built so as to continue to work as if no failure is happening.</li>
<li>Implement parallelization for better use of the infrastructure and for performance. Distributing the tasks on multiple machines, multithreading your requests and effective aggregation of results obtained in parallel are some of the techniques that help exploit the infrastructure. </li>
<li>After designing the basic functionality, use techniques and approaches that will ensure resilience. If any component fails (and failures happen all the time), the system should automatically alert, failover, and re-sync back to the ―last known state as if nothing had failed. </li>
<li>Don’t forget the cost factor. The key to building a cost-effective application is using on demand resources in your design. It’s wasteful to pay for infrastructure that is sitting idle.</li>
</ul>
<p><strong>There are numerous examples of cloud architectures including:</strong> </p>
<ul>
<li><strong>Processing pipelines</strong><ul>
<li>Document processing pipelines to convert hundreds of thousands of documents from one format to another, e.g. from MS Word to PDF; </li>
<li>Image processing piplelines – say resizing millions of images; </li>
<li>Video transcoding piplelines – transcoding AVI to MPEG movies; </li>
<li>Indexing – creating an index of web crawled documents; </li>
<li>Data mining – performing search over millions of records.</li>
</ul>
</li>
<li><strong>Batch processing systems</strong>: back-office applications in finance, insurance or retail sectors, log analysis, nightly builds or automated unit testing and deployment, etc</li>
</ul>
<h3 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h3><h4 id="MIPS-instructions"><a href="#MIPS-instructions" class="headerlink" title="MIPS instructions"></a>MIPS instructions</h4><ul>
<li><strong>Arithmetic Instructions</strong></li>
</ul>
<img src="https://pic.imgdb.cn/item/626fb4a1239250f7c53f9ffc.jpg" style="zoom:80%;" />

<ul>
<li><strong>Logical</strong></li>
</ul>
<img src="https://pic.imgdb.cn/item/626fb4d6239250f7c5400ed9.jpg" style="zoom:80%;" />

<ul>
<li><strong>Data Transfer</strong></li>
</ul>
<img src="https://pic.imgdb.cn/item/626fb4fa239250f7c5405a43.jpg" style="zoom:80%;" />

<img src="https://pic.imgdb.cn/item/626fb51a239250f7c5409d42.jpg" style="zoom:80%;" />

<ul>
<li><strong>Conditional Branch</strong></li>
</ul>
<img src="https://pic.imgdb.cn/item/626fb542239250f7c540f7f1.jpg" style="zoom:80%;" />

<ul>
<li><strong>Comparison</strong></li>
</ul>
<img src="https://pic.imgdb.cn/item/626fb566239250f7c54148d6.jpg" style="zoom:80%;" />

<ul>
<li><strong>Unconditional Jump</strong></li>
</ul>
<img src="https://pic.imgdb.cn/item/626fb586239250f7c54184f4.jpg" style="zoom:80%;" />

<ul>
<li><strong>Registers</strong></li>
</ul>
<img src="https://pic.imgdb.cn/item/626fb5c7239250f7c5420cd1.jpg" style="zoom:80%;" />
]]></content>
      <categories>
        <category>HKU</category>
      </categories>
      <tags>
        <tag>HKU</tag>
      </tags>
  </entry>
  <entry>
    <title>applicationLayers</title>
    <url>/2022/04/29/applicationLayers/</url>
    <content><![CDATA[<p>—— ELEC6036 High Performance Computer Architecture.</p>
<span id="more"></span>



<h3 id="应用分层"><a href="#应用分层" class="headerlink" title="应用分层"></a>应用分层</h3><img src="https://pic.imgdb.cn/item/626b6309239250f7c5458cdb.jpg" style="zoom:67%;" />

<ul>
<li>开放接口层：可直接封装 Service 方法暴露成 RPC 接口;通过 Web 封装成 http 接口;进行网关安全控制、流量控制等。</li>
<li>终端显示层：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP 渲染，移动端展示等。</li>
<li>Web 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</li>
<li>Service 层：相对具体的业务逻辑服务层。</li>
<li>Manager 层：通用业务处理层。它有如下特征:<ul>
<li>对第三方平台封装的层，预处理返回结果及转化异常信息。</li>
<li>对 Service 层通用能力的下沉，如缓存方案、中间件通用处理。</li>
<li>与 DAO 层交互，对多个 DAO 的组合复用。</li>
</ul>
</li>
<li>DAO 层：数据访问层，与底层 MySQL、Oracle、Hbase 进行数据交互。</li>
</ul>
<h3 id="分层领域模型"><a href="#分层领域模型" class="headerlink" title="分层领域模型"></a>分层领域模型</h3><p>在阿里巴巴编码规约中列举了下面几个领域模型规约：</p>
<ul>
<li>DO(Data Object)：与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。</li>
<li>DTO(Data Transfer Object)：数据传输对象，Service 或 Manager 向外传输的对象。</li>
<li>BO(Business Object)：业务对象。由 Service 层输出的封装业务逻辑的对象。</li>
<li>AO(Application Object)：应用对象。在 Web 层与 Service 层之间抽象的复用对象模型，极为贴近展示层，复用度不高。</li>
<li>VO(View Object)：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。</li>
<li>Query：数据查询对象，各层接收上层的查询请求。注意超过2个参数的查询封装，禁止使用 Map 类来传输。</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Sort Algorithms</title>
    <url>/2022/04/27/SortAlgorithms/</url>
    <content><![CDATA[<p>概述：本文主要记录了八大排序算法的Java实现</p>
<span id="more"></span>

<h3 id="部分性能总结"><a href="#部分性能总结" class="headerlink" title="部分性能总结"></a>部分性能总结</h3><img src="https://pic.imgdb.cn/item/626907de239250f7c5bfe4f8.jpg" style="zoom:80%;" />

<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzzzzq.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 步骤：</span></span><br><span class="line"><span class="comment"> * 1. 比较相邻的元素，如果第一个比第二个大，就交换他们两个</span></span><br><span class="line"><span class="comment"> * 2. 对每一对相邻元素作同样的工作，每经过一次循环，会有一个最大的元素移到数组后段</span></span><br><span class="line"><span class="comment"> * 3. 重复上述循环直到没有任何一对数字需要比较</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 时间复杂度O(n^2), 空间复杂度O(1)</span></span><br><span class="line"><span class="comment"> * 稳定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bubble</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n - <span class="number">1</span> - i; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;arr = &quot;</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzzzzq.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 从第一个元素开始</span></span><br><span class="line"><span class="comment"> * 2. 取出下一个元素，在已经排序号的元素序列中从后向前扫描</span></span><br><span class="line"><span class="comment"> * 3. 如果已排序的元素大于新元素，则两两交换</span></span><br><span class="line"><span class="comment"> * 4. 如果扫描到的已排序的元素小于新元素，则视为找到了&quot;插入位置&quot;，这个元素已经完成排序</span></span><br><span class="line"><span class="comment"> * 5. 重复步骤2，3，4</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 时间复杂度O(n^2),空间复杂度O(1)</span></span><br><span class="line"><span class="comment"> * 稳定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Insertion</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i-<span class="number">1</span> ; j &gt;= <span class="number">0</span>; --j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j]&gt;arr[i])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;arr = &quot;</span> + Arrays.toString(arr));;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzzzzq.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.api.model.wsdl.WSDLOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 希尔排序(又称递减增量排序算法)</span></span><br><span class="line"><span class="comment"> * 是简单插入排序的改进版，会有限比较距离较远的元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 步骤：</span></span><br><span class="line"><span class="comment"> * 1. 设置一个增量序列t1, t2, ... tk,我的设置一般为t1 = n/3 +1 , tn = tn-1/3 +1</span></span><br><span class="line"><span class="comment"> * 2. 按增量序列个数k面对序列进行k趟排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(h&lt;n/<span class="number">3</span>) h = <span class="number">3</span> * h + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(h&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//h-sort the array</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> h; i &lt; n;i ++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=i;j&gt;=h &amp;&amp; arr[j]&lt;arr[j-h]; j-=h)&#123;</span><br><span class="line">                    exch(arr[j],arr[j-h]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            h/=<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;arr = &quot;</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a;</span><br><span class="line">        a=b;</span><br><span class="line">        b=temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzzzzq.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 从待排序序列中找到最小的元素</span></span><br><span class="line"><span class="comment"> * 2. 将该元素与待排序序列的第一个元素进行交换</span></span><br><span class="line"><span class="comment"> * 3. 从余下的N-1个元素中找出关键字最小的元素，重复1.2两步，直到排序结束</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 时间复杂度O(n^2),空间复杂度O(n)</span></span><br><span class="line"><span class="comment"> * 不稳定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Selection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i!= n; ++i)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">minindex</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i; j != n; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j]&lt;arr[minindex])&#123;</span><br><span class="line">                    minindex=j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(minindex!=i)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                arr[i] = arr[minindex];</span><br><span class="line">                arr[minindex] = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;arr = &quot;</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzzzzq.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆排序</span></span><br><span class="line"><span class="comment"> * 基本思想：堆排序的过程就是将待排序的序列构造成一个堆，选出堆中最大的移走</span></span><br><span class="line"><span class="comment"> * 再把剩余的元素调整成堆，找出最大的再移走，重复直至有序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 步骤:</span></span><br><span class="line"><span class="comment"> * 1. 先将初始序列构造成一个大根堆，此时第一个元素最大，此堆为初始的无序区</span></span><br><span class="line"><span class="comment"> * 2. 将堆顶元素(最大元素)和无序区的最后一个元素交换，并进行调整</span></span><br><span class="line"><span class="comment"> * 3. 重复步骤2直到无序区只有一个元素时停止</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 需要定义如下几种操作:</span></span><br><span class="line"><span class="comment"> * 1. 最大堆调整(Max_Heapify): 将堆的末端子节点作调整，使得子节点永远小于父节点</span></span><br><span class="line"><span class="comment"> * 2. 创建最大堆(Build_Max_Heap): 将堆所有数据重新排序</span></span><br><span class="line"><span class="comment"> * 3. 堆排序(HeapSort): 移除位在第一个数据的根节点，并做最大堆调整的递归运算</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 用数组表示堆，对于节点的访问:</span></span><br><span class="line"><span class="comment"> * 1. 父节点 i 的左子节点在位置 (2*i+1)</span></span><br><span class="line"><span class="comment"> * 2. 父节点 i 的左子节点在位置 (2*i+2)</span></span><br><span class="line"><span class="comment"> * 3. 子节点 j 的父节点在位置 floor((i-1)/2)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 时间复杂度O(nlogn),空间复杂度O(n)</span></span><br><span class="line"><span class="comment"> * 稳定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Heap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=arr.length;i&gt;<span class="number">0</span>;--i)&#123;</span><br><span class="line">            max_heapify(arr,i);</span><br><span class="line">            <span class="comment">//将堆中最大的元素放到末尾</span></span><br><span class="line">            exch(arr[<span class="number">0</span>],arr[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;arr = &quot;</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">max_heapify</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> limit)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.length &lt;= <span class="number">0</span> || arr.length &lt; limit) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">parentIdx</span> <span class="operator">=</span> limit / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(; parentIdx&gt;=<span class="number">0</span>;parentIdx--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(parentIdx*<span class="number">2</span>&gt;=limit) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> parentIdx*<span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> (left+<span class="number">1</span>) &gt;= limit ? left : left+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">maxChildId</span> <span class="operator">=</span> arr[left] &gt;= arr[right] ? left : right;</span><br><span class="line">            <span class="keyword">if</span>(arr[maxChildId] &gt; arr[parentIdx])&#123;</span><br><span class="line">                exch(arr[maxChildId],arr[parentIdx]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a;</span><br><span class="line">        a=b;</span><br><span class="line">        b=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzzzzq.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 步骤：</span></span><br><span class="line"><span class="comment"> * 1. 从数列中挑出一个元素，称为pivot</span></span><br><span class="line"><span class="comment"> * 2. 重新排列数组，所有比pivot小的元素摆放在基准前面，所有比pivot大的元素摆在基准的后面</span></span><br><span class="line"><span class="comment"> * 3. &quot;递归地&quot;把小于pivot的子数列和大于pivot的子数列排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Quick</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        quickSort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;arr = &quot;</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> low, <span class="type">int</span> high)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(low &gt; high) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> partition(arr,low,high);</span><br><span class="line">        quickSort(arr,low,index-<span class="number">1</span>);</span><br><span class="line">        quickSort(arr,index+<span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> low, <span class="type">int</span> high)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> arr[low];</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">            <span class="keyword">while</span>(low &lt; high &amp;&amp; arr[high] &gt;= pivot)&#123;</span><br><span class="line">                --high;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[low] = arr[high];</span><br><span class="line">            <span class="keyword">while</span>(low &lt; high &amp;&amp; arr[low] &lt;= pivot)&#123;</span><br><span class="line">                ++low;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[high] = arr[low];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> high;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzzzzq.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 步骤:</span></span><br><span class="line"><span class="comment"> * 1. 将序列每相邻两个数字进行归并操作，形成floor(n/2)个序列，排序后每个序列包含两个元素；</span></span><br><span class="line"><span class="comment"> * 2. 将上述序列再次合并，形成floor(n/4)个序列，每个序列包含四个元素</span></span><br><span class="line"><span class="comment"> * 3. 重复步骤2，直到所有元素排序完毕</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Merge</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] aux = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">        mergeSort(arr,aux,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;arr = &quot;</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span>[] aux, <span class="type">int</span> low, <span class="type">int</span> high)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(high &lt;= low) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + ( high - low ) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//优化方案，将mergeSort中aux,arr互换可以节省拷贝到辅助数组的时间，但不能节省空间</span></span><br><span class="line">        mergeSort(arr, aux, low, mid);</span><br><span class="line">        mergeSort(arr, aux, mid+<span class="number">1</span>, high);</span><br><span class="line">        <span class="comment">//优化方案，若a[mid]&lt;a[mid+1]，则表示两边已经有序，不需要merge，直接return</span></span><br><span class="line">        <span class="keyword">if</span>(arr[mid]&lt;arr[mid+<span class="number">1</span>])&#123;</span><br><span class="line">            merge(arr, aux, low, mid, high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span>[] aux, <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span>&#123;</span><br><span class="line">        <span class="comment">//copy</span></span><br><span class="line">        <span class="keyword">if</span> (high + <span class="number">1</span> - low &gt;= <span class="number">0</span>) System.arraycopy(arr, low, aux, low, high + <span class="number">1</span> - low);</span><br><span class="line">        <span class="comment">//merge</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> low, j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> low; k &lt;= high ;++k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; mid)             arr[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j &gt; high)       arr[k] = aux[i++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(aux[j]&lt;aux[i])  arr[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span>                    arr[k] = aux[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzzzzq.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 桶排序</span></span><br><span class="line"><span class="comment"> * 基本思想：把数组arr划分为n个大小相同子区间(桶)，每个子区间各自排序，最后合并</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 找出待排序数组中的最大值max，最小值min</span></span><br><span class="line"><span class="comment"> * 2. 使用动态数组ArrayList作为桶，桶里放的元素也用ArrayList存储。桶的数量为(max-min)/arr.length+1</span></span><br><span class="line"><span class="comment"> * 3. 遍历数组arr，计算每个元素arr[i]放的痛</span></span><br><span class="line"><span class="comment"> * 4. 每个桶各自排序</span></span><br><span class="line"><span class="comment"> * 5. 遍历桶数组，把排序号的元素放进输出数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bucket</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bucketSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i != arr.length; ++i)&#123;</span><br><span class="line">            max = Math.max(max, arr[i]);</span><br><span class="line">            min = Math.min(min, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//桶数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">bucketNum</span> <span class="operator">=</span> (max - min) / arr.length + <span class="number">1</span>;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketArr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(bucketNum);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i != bucketNum; ++i)&#123;</span><br><span class="line">            bucketArr.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将每个元素放入桶中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i != arr.length; ++i)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (arr[i] - min) / (arr.length);</span><br><span class="line">            bucketArr.get(num).add(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//堆每个桶进行排序并修改原数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i != bucketNum; ++i)&#123;</span><br><span class="line">            Collections.sort(bucketArr.get(i));</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j != bucketArr.get(i).size(); ++j)&#123;</span><br><span class="line">                arr[index] = bucketArr.get(i).get(j);</span><br><span class="line">                ++index;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;arr = &quot;</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="测试模块"><a href="#测试模块" class="headerlink" title="测试模块"></a>测试模块</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zzzzzq.sort.Bubble;</span><br><span class="line"><span class="keyword">import</span> com.zzzzzq.sort.Bucket;</span><br><span class="line"><span class="keyword">import</span> com.zzzzzq.sort.Heap;</span><br><span class="line"><span class="keyword">import</span> com.zzzzzq.sort.Insertion;</span><br><span class="line"><span class="keyword">import</span> com.zzzzzq.sort.Merge;</span><br><span class="line"><span class="keyword">import</span> com.zzzzzq.sort.Quick;</span><br><span class="line"><span class="keyword">import</span> com.zzzzzq.sort.Selection;</span><br><span class="line"><span class="keyword">import</span> com.zzzzzq.sort.Shell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">6</span>,<span class="number">34</span>,<span class="number">32</span>,<span class="number">44</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">23</span>&#125;;</span><br><span class="line">        Bubble.bubbleSort(arr);</span><br><span class="line">        Selection.selectionSort(arr);</span><br><span class="line">        Insertion.insertionSort(arr);</span><br><span class="line">        Shell.shellSort(arr);</span><br><span class="line">        Heap.heapSort(arr);</span><br><span class="line">        Quick.quickSort(arr);</span><br><span class="line">        Merge.mergeSort(arr);</span><br><span class="line">        Bucket.bucketSort(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Buildup the Java environment on MacOS</title>
    <url>/2022/04/26/buildup/</url>
    <content><![CDATA[<p>本文主要介绍了在Mac上进行开发环境搭建的主要步骤</p>
<span id="more"></span>



<h3 id="效率工具"><a href="#效率工具" class="headerlink" title="效率工具"></a>效率工具</h3><h4 id="Homebrew软件管理工具"><a href="#Homebrew软件管理工具" class="headerlink" title="Homebrew软件管理工具"></a>Homebrew软件管理工具</h4><p><a href="https://blog.51cto.com/u_15346415/3691436">教程</a></p>
<h4 id="Iterm2替换默认终端"><a href="#Iterm2替换默认终端" class="headerlink" title="Iterm2替换默认终端"></a>Iterm2替换默认终端</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install --cask iterm2</span><br></pre></td></tr></table></figure>



<h4 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h4><p><a href="https://zhuanlan.zhihu.com/p/35283688">安装和配置</a></p>
<h4 id="AIfred-4替代spotlight"><a href="#AIfred-4替代spotlight" class="headerlink" title="AIfred 4替代spotlight"></a>AIfred 4替代spotlight</h4><h3 id="Java开发环境"><a href="#Java开发环境" class="headerlink" title="Java开发环境"></a>Java开发环境</h3><h4 id="sdkman管理各种开发sdk"><a href="#sdkman管理各种开发sdk" class="headerlink" title="sdkman管理各种开发sdk"></a>sdkman管理各种开发sdk</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -s &quot;https://get.sdkman.io&quot; | zsh</span><br><span class="line">source &quot;$HOME/.sdkman/bin/sdkman-init.sh&quot;</span><br><span class="line">sdk version</span><br></pre></td></tr></table></figure>

<p>sdkman版本：5.15.0</p>
<p><strong>jdk使用sdkman来安装管理</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sdk install java 8.0.292.hs-adpt</span><br><span class="line">sdk current java</span><br></pre></td></tr></table></figure>



<p><strong>maven使用sdkman来安装管理</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sdk install maven</span><br></pre></td></tr></table></figure>

<p>maven版本：3.8.5</p>
<p>下载 setting.xml ⽂件并放置在 ~&#x2F;.m2 ⽬录下，其中配置了公司内部 maven 仓库</p>
<p>注：找不到.m2文件夹要注意开启显示隐藏文件夹，并且任意执行一条maven命令，如 <code>mvn -version</code>,即会自动创建文件夹</p>
<h4 id="git-版本控制管理⼯具"><a href="#git-版本控制管理⼯具" class="headerlink" title="git 版本控制管理⼯具"></a>git 版本控制管理⼯具</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install git</span><br><span class="line">git config</span><br><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line">git config --global user.email username@meituan.com</span><br></pre></td></tr></table></figure>

<p>git版本：2.30.1</p>
<p>安装失败：提示No available formula or cask with the name “git”</p>
<p><a href="https://www.jianshu.com/p/28c99973cb5f">解决方案</a></p>
<p><strong>add ssh key</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>



<h3 id="Idea配置"><a href="#Idea配置" class="headerlink" title="Idea配置"></a>Idea配置</h3><p>直接官⽹下载社区版，或者公司内部申请Ultimate版。 </p>
<ul>
<li>Settings <ul>
<li>Code Style -&gt; Wrap on typing at 120 </li>
<li>Code Style -&gt; Java -&gt; Tab size, Indent, Continuation indent: 4 </li>
<li>Code Style -&gt; Java -&gt; Imports <ul>
<li>Class count to use import with “*”: 20 *</li>
<li><em>Names count to use static import with “</em>“: 8</li>
</ul>
</li>
<li>Editor Tabs -&gt; Tab placement: None(Use <code>cmd + E</code> instead)</li>
</ul>
</li>
<li>plugins <ul>
<li>Lombok</li>
<li>Meituan IDEKit </li>
<li>Maven Helper </li>
<li>SequenceDiagram </li>
<li>IdeaVim </li>
<li>GitToolBox </li>
<li>Presentation Assistant </li>
<li>…</li>
</ul>
</li>
</ul>
<p>[使用小技巧](<a href="https://blog.jetbrains.com/idea/2015/10/intellij-idea-tips-and-tricks/">IntelliJ IDEA Tips and Tricks | The IntelliJ IDEA Blog (jetbrains.com)</a>)</p>
<h3 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h3><p>每台机器有唯⼀的环境归属、泳道归属。泳道配置在机器的<code>/data/webapps/appenv</code>⽂件⾥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">env=test</span><br><span class="line">deployenv=test</span><br><span class="line">zkserver=lion.dev.sankuai.com:2181</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果没有配置swimlane参数，则认为机器归属于⻣⼲链路</span></span><br><span class="line">swimlane=misid</span><br></pre></td></tr></table></figure>

<p>ps1: 如果没有配置swimlane参数，则认为机器归属于⻣⼲链路。 </p>
<p>如果是新电脑，修改环境⽬录⽆权限请参考如下解决⽅案： </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.禁⽤SIP（重启，按住Command+R进⼊恢复模式，在⼯具⻚⾯打开终端，运⾏如下命令：）</span></span><br><span class="line">csrutil disable</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 开启写权限</span></span><br><span class="line">sudo mount -uw /</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 3. 创建⽂件</span></span></span><br><span class="line">cd /</span><br><span class="line">sudo mkdir data</span><br><span class="line">sudo chmod -R 777 /data</span><br><span class="line">mkdir /data/webapps</span><br><span class="line">cd /data/webapps</span><br><span class="line">touch appenv</span><br></pre></td></tr></table></figure>

<p>这里有个坑，如果macOS是Big Sur则版本过高，关闭SIP后仍无法修改文件夹下的文件，解决方案较为复杂，我在尝试的过程中系统崩溃导致只能重装系统，耗费了非常大量的时间。</p>
<p><a href="https://www.zhihu.com/question/403361335">解决方案</a></p>
]]></content>
      <categories>
        <category>Mac</category>
        <category>EnvBuildUp</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot05 —— 程序运行相关</title>
    <url>/2022/04/23/SpringBoot05/</url>
    <content><![CDATA[<p>概述：SpringBoot框架中程序的打包与运行，高级配置相关，多环境开发，日志</p>
<span id="more"></span>

<h3 id="程序的打包与运行"><a href="#程序的打包与运行" class="headerlink" title="程序的打包与运行"></a>程序的打包与运行</h3><p><strong>为什么要打包？</strong></p>
<p>实际开发完成后，我们的项目是不可能运行在自己的电脑上的。</p>
<p>我们以后制作的程序是运行在专用的服务器上的，这就要将我们的程序先组织成一个文件，然后将这个文件传输到这台服务器上。这里面就存在两个过程，一个是打包的过程，另一个是运行的过程。</p>
<p><strong>程序打包</strong></p>
<p>SpringBoot程序是基于Maven创建的，在Maven中提供有打包的指令，叫做package。本操作可以在Idea环境下执行。（注意打包应该把test部分排除）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mvn <span class="keyword">package</span></span><br></pre></td></tr></table></figure>

<p>打包后会产生一个与工程名类似的jar文件，其名称是由模块名+版本号+.jar组成的。</p>
<p><strong>程序运行</strong></p>
<p>程序包打好以后，就可以直接执行了。在程序包所在路径下，执行指令。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar 工程包名.jar</span><br></pre></td></tr></table></figure>

<p>执行程序打包指令后，程序正常运行，与在Idea下执行程序没有区别。</p>
<p><strong>特别关注</strong>：</p>
<ul>
<li>如果你的计算机中没有安装java的jdk环境，是无法正确执行上述操作的，因为程序执行使用的是java指令。</li>
<li>在使用向导创建SpringBoot工程时，pom.xml文件中会有如下配置，这一段配置千万不能删除，否则打包后无法正常执行程序。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<ul>
<li>SpringBoot工程可以基于java环境下独立运行jar文件启动服务</li>
<li>SpringBoot工程执行mvn命令package进行打包</li>
<li>执行jar命令：java –jar 工程名.jar</li>
</ul>
<p><strong>程序的打包与运行（Linux版本）</strong></p>
<ul>
<li>基于Linux（CenterOS7） </li>
<li>安装JDK，且版本不低于打包时使用的JDK版本</li>
<li>安装包保存在&#x2F;usr&#x2F;local&#x2F;自定义目录中或$HOME下 </li>
<li>其他操作参照Windows版进行</li>
</ul>
<h3 id="配置高级"><a href="#配置高级" class="headerlink" title="配置高级"></a>配置高级</h3><h4 id="临时属性设置"><a href="#临时属性设置" class="headerlink" title="临时属性设置"></a>临时属性设置</h4><p>我们的程序包打好了，可以发布了。但是程序包打好以后，里面的配置都已经是固定的了，比如配置了服务器的端口是8080。如果我要启动项目，发现当前我的服务器上已经有应用启动起来并且占用了8080端口，此时就需要临时设置端口数形。</p>
<p>SpringBoot提供了灵活的配置方式，如果你发现你的项目中有个别属性需要重新配置，可以使用临时属性的方式快速修改某些配置。方法也特别简单，在启动的时候添加上对应参数就可以了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java –jar springboot.jar --server.port=<span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>上面的命令是启动SpringBoot程序包的命令，在命令输入完毕后，空一格，然后输入两个<code>-</code>号。下面按照属性名<code>=</code>属性值的形式添加对应参数就可以了。</p>
<p>注意这里的格式不是yaml中的书写格式，当属性存在多级名称时，中间使用点分隔，和properties文件中的属性格式完全相同。</p>
<p>如果你发现要修改的属性不止一个，可以按照上述格式继续写，属性与属性之间使用空格分隔。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java –jar springboot.jar –-server.port=<span class="number">80</span> --logging.level.root=debug</span><br></pre></td></tr></table></figure>

<p>现在我们的程序配置受配置文件和临时属性共同控制。并且我们发现临时属性的加载优先级要高于配置文件的。</p>
<p>那是否还有其他的配置方式呢？其实是有的，打开官方文档中对应的内容，就可以查看配置读取的优先顺序。<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html">地址</a></p>
<p><strong>总结</strong></p>
<ul>
<li>使用jar命令启动SpringBoot工程时可以使用临时属性替换配置文件中的属性</li>
<li>临时属性添加方式：java –jar 工程名.jar –-属性名&#x3D;值</li>
<li>多个临时属性之间使用空格分隔</li>
<li>临时属性必须是当前boot工程支持的属性，否则设置无效</li>
</ul>
<h4 id="配置文件分配"><a href="#配置文件分配" class="headerlink" title="配置文件分配"></a>配置文件分配</h4><h4 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h4>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot04 —— SSMP整合案例</title>
    <url>/2022/04/21/SpringBoot04/</url>
    <content><![CDATA[<p>概述：SpringBoot整合JUnit，MyBatis，MyBatis-Plus，Druid的简单案例</p>
<span id="more"></span>

<h3 id="功能及技术概述"><a href="#功能及技术概述" class="headerlink" title="功能及技术概述"></a>功能及技术概述</h3><p>实现一个图书管理系统，完成增删改查的功能</p>
<p>整体案例中需要采用的技术如下，先了解一下，做到哪一个说哪一个</p>
<ul>
<li><p>实体类开发————使用Lombok快速制作实体类</p>
</li>
<li><p>Dao开发————整合MyBatisPlus，制作数据层测试</p>
</li>
<li><p>Service开发————基于MyBatisPlus进行增量开发，制作业务层测试类</p>
</li>
<li><p>Controller开发————基于Restful开发，使用PostMan测试接口功能</p>
</li>
<li><p>Controller开发————前后端开发协议制作</p>
</li>
<li><p>页面开发————基于VUE+ElementUI制作，前后端联调，页面数据处理，页面消息处理</p>
<ul>
<li>列表</li>
<li>新增</li>
<li>修改</li>
<li>删除</li>
<li>分页</li>
<li>查询</li>
</ul>
</li>
<li><p>项目异常处理</p>
</li>
<li><p>按条件查询————页面功能调整、Controller修正功能、Service修正功能</p>
</li>
</ul>
<p>SSMP案例制作流程解析</p>
<ul>
<li>先开发基础CRUD功能，做一层测一层</li>
<li>调通页面，确认异步提交成功后，制作所有功能</li>
<li>添加分页功能与查询功能</li>
</ul>
<h3 id="模块创建"><a href="#模块创建" class="headerlink" title="模块创建"></a>模块创建</h3><p>如果按照企业开发的形式进行应该制作后台微服务，前后端分离的开发。</p>
<img src="https://pic.imgdb.cn/item/6261534f239250f7c59fa635.jpg" style="zoom: 67%;" />

<p>这里进行了简化，后台做单体服务器，前端不使用前后端分离的制作。一个服务器即充当后台服务调用，又负责前端页面展示。</p>
<img src="https://pic.imgdb.cn/item/62615380239250f7c5a01911.jpg" style="zoom:67%;" />

<p>下面我们创建一个新的模块，加载要使用的技术对应的starter，修改配置文件格式为yml格式，并把web访问端口先设置成80。</p>
<p><strong>pom.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>application.yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<h3 id="实体类开发"><a href="#实体类开发" class="headerlink" title="实体类开发"></a>实体类开发</h3><p>本案例对应的模块表结构如下：（mysql创建tbl_book表并插入数据）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for tbl_book</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `tbl_book`;</span><br><span class="line">CREATE TABLE `tbl_book`  (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `type` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 51 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of tbl_book</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `tbl_book` VALUES (1, &#x27;计算机理论&#x27;, &#x27;Spring实战 第5版&#x27;, &#x27;Spring入门经典教程，深入理解Spring原理技术内幕&#x27;);</span><br><span class="line">INSERT INTO `tbl_book` VALUES (2, &#x27;计算机理论&#x27;, &#x27;Spring 5核心原理与30个类手写实战&#x27;, &#x27;十年沉淀之作，手写Spring精华思想&#x27;);</span><br><span class="line">INSERT INTO `tbl_book` VALUES (3, &#x27;计算机理论&#x27;, &#x27;Spring 5 设计模式&#x27;, &#x27;深入Spring源码剖析Spring源码中蕴含的10大设计模式&#x27;);</span><br><span class="line">INSERT INTO `tbl_book` VALUES (4, &#x27;计算机理论&#x27;, &#x27;Spring MVC+MyBatis开发从入门到项目实战&#x27;, &#x27;全方位解析面向Web应用的轻量级框架，带你成为Spring MVC开发高手&#x27;);</span><br><span class="line">INSERT INTO `tbl_book` VALUES (5, &#x27;计算机理论&#x27;, &#x27;轻量级Java Web企业应用实战&#x27;, &#x27;源码级剖析Spring框架，适合已掌握Java基础的读者&#x27;);</span><br><span class="line">INSERT INTO `tbl_book` VALUES (6, &#x27;计算机理论&#x27;, &#x27;Java核心技术 卷I 基础知识（原书第11版）&#x27;, &#x27;Core Java 第11版，Jolt大奖获奖作品，针对Java SE9、10、11全面更新&#x27;);</span><br><span class="line">INSERT INTO `tbl_book` VALUES (7, &#x27;计算机理论&#x27;, &#x27;深入理解Java虚拟机&#x27;, &#x27;5个维度全面剖析JVM，大厂面试知识点全覆盖&#x27;);</span><br><span class="line">INSERT INTO `tbl_book` VALUES (8, &#x27;计算机理论&#x27;, &#x27;Java编程思想（第4版）&#x27;, &#x27;Java学习必读经典,殿堂级著作！赢得了全球程序员的广泛赞誉&#x27;);</span><br><span class="line">INSERT INTO `tbl_book` VALUES (9, &#x27;计算机理论&#x27;, &#x27;零基础学Java（全彩版）&#x27;, &#x27;零基础自学编程的入门图书，由浅入深，详解Java语言的编程思想和核心技术&#x27;);</span><br><span class="line">INSERT INTO `tbl_book` VALUES (10, &#x27;市场营销&#x27;, &#x27;直播就该这么做：主播高效沟通实战指南&#x27;, &#x27;李子柒、李佳琦、薇娅成长为网红的秘密都在书中&#x27;);</span><br><span class="line">INSERT INTO `tbl_book` VALUES (11, &#x27;市场营销&#x27;, &#x27;直播销讲实战一本通&#x27;, &#x27;和秋叶一起学系列网络营销书籍&#x27;);</span><br><span class="line">INSERT INTO `tbl_book` VALUES (12, &#x27;市场营销&#x27;, &#x27;直播带货：淘宝、天猫直播从新手到高手&#x27;, &#x27;一本教你如何玩转直播的书，10堂课轻松实现带货月入3W+&#x27;);</span><br></pre></td></tr></table></figure>

<p>根据上述表结构，制作对应的实体类</p>
<p><strong>实体类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实体类的开发可以自动通过工具手工生成get&#x2F;set方法，然后覆盖toString()方法，方便调试，等等。不过这一套操作书写很繁琐，有对应的工具可以帮助我们简化开发，介绍一个小工具，lombok。</p>
<p>Lombok，一个Java类库，提供了一组注解，简化POJO实体类开发，SpringBoot目前默认集成了lombok技术，并提供了对应的版本控制，所以只需要提供对应的坐标即可，在pom.xml中添加lombok的坐标。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用lombok可以通过一个注解<code>@Data</code>完成一个实体类对应的getter，setter，toString，equals，hashCode等操作的快速添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="数据层开发——基础CRUD"><a href="#数据层开发——基础CRUD" class="headerlink" title="数据层开发——基础CRUD"></a>数据层开发——基础CRUD</h3><p>数据层开发本次使用MyBatisPlus技术，数据源使用Druid。</p>
<p><strong>步骤①</strong>：导入MyBatisPlus与Druid对应的starter，注意mysql的驱动不能少</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤②</strong>：配置数据库连接相关的数据源配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤③</strong>：使用MyBatisPlus的标准通用接口BaseMapper加速开发，别忘了<code>@Mapper</code>和泛型的指定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Book&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤④</strong>：制作测试类测试结果（企业开发中往往都为加速开发跳过此步）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Book;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoTestCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(bookDao.selectById(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setType(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        book.setDescription(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        bookDao.insert(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setId(<span class="number">17</span>);</span><br><span class="line">        book.setType(<span class="string">&quot;测试数据abcdefg&quot;</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        book.setDescription(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        bookDao.updateById(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">        bookDao.deleteById(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        bookDao.selectList(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<p>MyBatisPlus技术默认的主键生成策略为雪花算法，生成的主键ID长度较大，和目前的数据库设定规则不相符，需要配置一下使MyBatisPlus使用数据库的主键生成策略，方式还是做配置。在application.yml中添加对应配置即可，具体如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">tbl_</span>		<span class="comment">#设置表名通用前缀</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span>				<span class="comment">#设置主键id字段的生成策略为参照数据库设定的策略，当前数据库设置id生成策略为自增</span></span><br></pre></td></tr></table></figure>

<p><strong>查看MyBatisPlus运行日志</strong></p>
<p>在进行数据层测试的时候，因为基础的CRUD操作均由MyBatisPlus给我们提供了，所以就出现了一个局面，开发者不需要书写SQL语句了，这样程序运行的时候总有一种感觉，一切的一切都是黑盒的，作为开发者我们啥也不知道就完了。如果程序正常运行还好，这个时候就不知道从何下手，因为传递参数、封装SQL语句这些操作完全不是你开发出来的，所以查看执行期运行的SQL语句就成为当务之急。</p>
<p>SpringBoot整合MyBatisPlus的时候充分考虑到了这点，通过配置的形式就可以查阅执行期SQL语句，配置如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">tbl_</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>

<p>再来看运行结果，此时能显示了运行期执行SQL的情况。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@2c9a6717] was not registered for synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@6ca30b8a] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: SELECT id,type,name,description FROM tbl<span class="built_in">_</span>book</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: id, type, name, description</span><br><span class="line">&lt;==        Row: 1, 计算机理论, Spring实战 第5版, Spring入门经典教程，深入理解Spring原理技术内幕</span><br><span class="line">&lt;==        Row: 2, 计算机理论, Spring 5核心原理与30个类手写实战, 十年沉淀之作，手写Spring精华思想</span><br><span class="line">&lt;==        Row: 3, 计算机理论, Spring 5 设计模式, 深入Spring源码剖析Spring源码中蕴含的10大设计模式</span><br><span class="line">&lt;==        Row: 4, 计算机理论, Spring MVC+MyBatis开发从入门到项目实战, 全方位解析面向Web应用的轻量级框架，带你成为Spring MVC开发高手</span><br><span class="line">&lt;==        Row: 5, 计算机理论, 轻量级Java Web企业应用实战, 源码级剖析Spring框架，适合已掌握Java基础的读者</span><br><span class="line">&lt;==        Row: 6, 计算机理论, Java核心技术 卷I 基础知识（原书第11版）, Core Java 第11版，Jolt大奖获奖作品，针对Java SE9、10、11全面更新</span><br><span class="line">&lt;==        Row: 7, 计算机理论, 深入理解Java虚拟机, 5个维度全面剖析JVM，大厂面试知识点全覆盖</span><br><span class="line">&lt;==        Row: 8, 计算机理论, Java编程思想（第4版）, Java学习必读经典,殿堂级著作！赢得了全球程序员的广泛赞誉</span><br><span class="line">&lt;==        Row: 9, 计算机理论, 零基础学Java（全彩版）, 零基础自学编程的入门图书，由浅入深，详解Java语言的编程思想和核心技术</span><br><span class="line">&lt;==        Row: 10, 市场营销, 直播就该这么做：主播高效沟通实战指南, 李子柒、李佳琦、薇娅成长为网红的秘密都在书中</span><br><span class="line">&lt;==        Row: 11, 市场营销, 直播销讲实战一本通, 和秋叶一起学系列网络营销书籍</span><br><span class="line">&lt;==        Row: 12, 市场营销, 直播带货：淘宝、天猫直播从新手到高手, 一本教你如何玩转直播的书，10堂课轻松实现带货月入3W+</span><br><span class="line">&lt;==        Row: 13, 测试类型, 测试数据, 测试描述数据</span><br><span class="line">&lt;==        Row: 14, 测试数据update, 测试数据update, 测试数据update</span><br><span class="line">&lt;==        Row: 15, -----------------, 测试数据123, 测试数据123</span><br><span class="line">&lt;==      Total: 15</span><br></pre></td></tr></table></figure>

<p>其中清晰的标注了当前执行的SQL语句是什么，携带了什么参数，对应的执行结果是什么，所有信息应有尽有。</p>
<p>此处设置的是日志的显示形式，当前配置的是控制台输出，当然还可以由更多的选择，根据需求切换即可</p>
<img src="https://pic.imgdb.cn/item/62619cac239250f7c54d1d93.jpg" style="zoom:80%;" />



<p><strong>总结</strong></p>
<ol>
<li><p>手工导入starter坐标（2个），mysql驱动（1个）</p>
</li>
<li><p>配置数据源与MyBatisPlus对应的配置</p>
</li>
<li><p>开发Dao接口（继承BaseMapper）</p>
</li>
<li><p>制作测试类测试Dao功能是否有效</p>
</li>
<li><p>使用配置方式开启日志，设置日志输出方式为标准输出即可查阅SQL执行日志</p>
</li>
</ol>
<h4 id="数据层开发——分页功能制作"><a href="#数据层开发——分页功能制作" class="headerlink" title="数据层开发——分页功能制作"></a>数据层开发——分页功能制作</h4><p>MyBatisPlus提供的分页操作API如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetPage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">    bookDao.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">    System.out.println(page.getCurrent());</span><br><span class="line">    System.out.println(page.getSize());</span><br><span class="line">    System.out.println(page.getTotal());</span><br><span class="line">    System.out.println(page.getPages());</span><br><span class="line">    System.out.println(page.getRecords());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中selectPage方法需要传入一个封装分页数据的对象，可以通过new的形式创建这个对象，当然这个对象也是MyBatisPlus提供的，别选错包了。创建此对象时需要指定两个分页的基本数据</p>
<ul>
<li>当前显示第几页</li>
<li>每页显示几条数据</li>
</ul>
<p>可以通过创建Page对象时利用构造方法初始化这两个数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">2</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<p>将该对象传入到查询方法selectPage后，可以得到查询结果，但是我们会发现当前操作查询结果返回值仍然是一个IPage对象，这又是怎么回事？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> bookDao.selectPage(page, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<p>原来这个IPage对象中封装了若干个数据，而查询的结果作为IPage对象封装的一个数据存在的，可以理解为查询结果得到后，又塞到了这个IPage对象中，其实还是为了高度的封装，一个IPage描述了分页所有的信息。下面5个操作就是IPage对象中封装的所有信息了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetPage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">    bookDao.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">    System.out.println(page.getCurrent());		<span class="comment">//当前页码值</span></span><br><span class="line">    System.out.println(page.getSize());			<span class="comment">//每页显示数</span></span><br><span class="line">    System.out.println(page.getTotal());		<span class="comment">//数据总量</span></span><br><span class="line">    System.out.println(page.getPages());		<span class="comment">//总页数</span></span><br><span class="line">    System.out.println(page.getRecords());		<span class="comment">//详细数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里就知道这些数据如何获取了，但是当你去执行这个操作时，你会发现并不像我们分析的这样，实际上这个分页功能当前是无效的。为什么这样呢？这个要源于MyBatisPlus的内部机制。</p>
<p>对于MySQL的分页操作使用limit关键字进行，而并不是所有的数据库都使用limit关键字实现的，这个时候MyBatisPlus为了制作的兼容性强，将分页操作设置为基础查询操作的升级版，你可以理解为IPhone6与IPhone6S-PLUS的关系。</p>
<p>基础操作中有查询全部的功能，而在这个基础上只需要升级一下（PLUS）就可以得到分页操作。所以MyBatisPlus将分页操作做成了一个开关，你用分页功能就把开关开启，不用就不需要开启这个开关。而我们现在没有开启这个开关，所以分页操作是没有的。这个开关是通过MyBatisPlus的拦截器的形式存在的，具体设置方式如下：</p>
<p><strong>定义MyBatisPlus拦截器并将其设置为Spring管控的bean</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MPConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码第一行是创建MyBatisPlus的拦截器栈，这个时候拦截器栈中没有具体的拦截器，第二行是初始化了分页拦截器，并添加到拦截器栈中。如果后期开发其他功能，需要添加全新的拦截器，按照第二行的格式继续add进去新的拦截器就可以了。</p>
<p><strong>总结</strong></p>
<ul>
<li>使用IPage封装分页数据</li>
<li>分页操作依赖MyBatisPlus分页拦截器实现功能</li>
<li>借助MyBatisPlus日志查阅执行SQL语句</li>
</ul>
<h3 id="数据层开发——条件查询功能制作"><a href="#数据层开发——条件查询功能制作" class="headerlink" title="数据层开发——条件查询功能制作"></a>数据层开发——条件查询功能制作</h3><p>除了分页功能，MyBatisPlus还提供有强大的条件查询功能。以往我们写条件查询要自己动态拼写复杂的SQL语句，现在简单了，MyBatisPlus将这些操作都制作成API接口，调用一个又一个的方法就可以实现各种条件的拼装。</p>
<p>下面的操作就是执行一个模糊匹配对应的操作，由like条件书写变为了like方法的调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetBy</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;Book&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    qw.like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Spring&quot;</span>);</span><br><span class="line">    bookDao.selectList(qw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中第一句QueryWrapper对象是一个用于封装查询条件的对象，该对象可以动态使用API调用的方法添加条件，最终转化成对应的SQL语句。第二句就是一个条件了，需要什么条件，使用QueryWapper对象直接调用对应操作即可。比如做大于小于关系，就可以使用lt或gt方法，等于使用eq方法，等等。</p>
<p>这组API使用还是比较简单的，但是关于属性字段名的书写存在着安全隐患，比如查询字段name，当前是以字符串的形态书写的，万一写错，编译器还没有办法发现，只能将问题抛到运行器通过异常堆栈告诉开发者，不太友好。</p>
<p>MyBatisPlus针对字段检查进行了功能升级，全面支持Lambda表达式，就有了下面这组API。由QueryWrapper对象升级为LambdaQueryWrapper对象，这下就避免了上述问题的出现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetBy2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    LambdaQueryWrapper&lt;Book&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;Book&gt;();</span><br><span class="line">    lqw.like(Book::getName,name);</span><br><span class="line">    bookDao.selectList(lqw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了便于开发者动态拼写SQL，防止将null数据作为条件使用，MyBatisPlus还提供了动态拼装SQL的快捷书写方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetBy2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    LambdaQueryWrapper&lt;Book&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;Book&gt;();</span><br><span class="line">    <span class="comment">//if(name != null) lqw.like(Book::getName,name);		//方式一：JAVA代码控制</span></span><br><span class="line">    lqw.like(name != <span class="literal">null</span>,Book::getName,name);				<span class="comment">//方式二：API接口提供控制开关</span></span><br><span class="line">    bookDao.selectList(lqw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>总结</strong></p>
<ul>
<li>使用QueryWrapper对象封装查询条件</li>
<li>推荐使用LambdaQueryWrapper对象</li>
<li>所有查询操作封装成方法调用</li>
<li>查询条件支持动态条件拼装</li>
</ul>
<h3 id="业务层开发"><a href="#业务层开发" class="headerlink" title="业务层开发"></a>业务层开发</h3><p>下面进行业务层开发，其实标准业务层开发很多初学者认为就是调用数据层，更精准的说法应该是<font color="#ff0000"><b>组织业务逻辑功能，并根据业务需求，对数据持久层发起调用</b></font>。有什么差别呢？目标是为了组织出符合需求的业务逻辑功能，至于调不调用数据层还真不好说，有需求就调用，没有需求就不调用。</p>
<p>业务层的方法名定义一定要与业务有关，例如登录操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">login(String username,String password);</span><br></pre></td></tr></table></figure>

<p>而数据层的方法名定义一定与业务无关，例如根据用户名密码查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">selectByUserNameAndPassword(String username,String password);</span><br></pre></td></tr></table></figure>

<p>我们在开发的时候是可以根据完成的工作不同划分成不同职能的开发团队的。比如一个哥们制作数据层，他就可以不知道业务是什么样子，拿到的需求文档要求可能是这样的</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">接口：传入用户名与密码字段，查询出对应结果，结果是单条数据</span><br><span class="line">接口：传入ID字段，查询出对应结果，结果是单条数据</span><br><span class="line">接口：传入离职字段，查询出对应结果，结果是多条数据</span><br></pre></td></tr></table></figure>

<p>但是进行业务功能开发的哥们，拿到的需求文档要求差别就很大</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">接口：传入用户名与密码字段，对用户名字段做长度校验，4-15位，对密码字段做长度校验，8到24位，对密码字段做特殊字符校验，不允许存在空格，查询结果为对象。如果为null，返回BusinessException，封装消息码INFO<span class="built_in">_</span>LOGON<span class="built_in">_</span>USERNAME<span class="built_in">_</span>PASSWORD<span class="built_in">_</span>ERROR</span><br></pre></td></tr></table></figure>

<p>所以说业务层方法定义与数据层方法定义差异化很大，只不过有些入门级的开发者手懒或者没有使用过公司相关的ISO标准化文档而已。</p>
<p>我们的案例就简单制作了，业务层接口定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    Boolean <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line">    Boolean <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line">    Boolean <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">    Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">    List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">    IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage,<span class="type">int</span> pageSize)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>业务层实现类如下，转调数据层即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">save</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.insert(book) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.updateById(book) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.selectList(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(currentPage,pageSize);</span><br><span class="line">        bookDao.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>别忘了对业务层接口进行测试，测试类如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IBookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(bookService.getById(<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setType(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        book.setDescription(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setId(<span class="number">17</span>);</span><br><span class="line">        book.setType(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        book.setDescription(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        bookService.updateById(book);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">        bookService.removeById(<span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        bookService.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetPage</span><span class="params">()</span>&#123;</span><br><span class="line">        IPage&lt;Book&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;Book&gt;(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">        bookService.page(page);</span><br><span class="line">        System.out.println(page.getCurrent());</span><br><span class="line">        System.out.println(page.getSize());</span><br><span class="line">        System.out.println(page.getTotal());</span><br><span class="line">        System.out.println(page.getPages());</span><br><span class="line">        System.out.println(page.getRecords());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<ol>
<li>Service接口名称定义成业务名称，并与Dao接口名称进行区分</li>
<li>制作测试类测试Service功能是否有效</li>
</ol>
<p><strong>业务层快速开发</strong></p>
<p>其实MyBatisPlus技术不仅提供了数据层快速开发方案，业务层MyBatisPlus也给了一个通用接口，个人观点不推荐使用，凑合能用吧，其实就是一个封装+继承的思想，代码给出，实际开发慎用。</p>
<p>业务层接口快速开发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBookService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Book&gt; &#123;</span><br><span class="line">    <span class="comment">//添加非通用操作API接口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>业务层接口实现类快速开发，关注继承的类需要传入两个泛型，一个是数据层接口，另一个是实体类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;BookDao, Book&gt; <span class="keyword">implements</span> <span class="title class_">IBookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">	<span class="comment">//添加非通用操作API</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果感觉MyBatisPlus提供的功能不足以支撑你的使用需要（其实是一定不能支撑的，因为需求不可能是通用的），在原始接口基础上接着定义新的API接口就行了，此处不再说太多了，就是自定义自己的操作了，但是不要和已有的API接口名冲突即可。</p>
<p><strong>总结</strong></p>
<ul>
<li>使用通用接口（<code>ISerivce&lt;T&gt;</code>）快速开发Service</li>
<li>使用通用实现类（<code>ServiceImpl&lt;M,T&gt;</code>）快速开发ServiceImpl</li>
<li>可以在通用接口基础上做功能重载或功能追加</li>
<li>注意重载时不要覆盖原始操作，避免原始提供的功能丢失</li>
</ul>
<h3 id="表现层开发"><a href="#表现层开发" class="headerlink" title="表现层开发"></a>表现层开发</h3><p>表现层的开发使用基于Restful的表现层接口开发，功能测试通过Postman工具进行。</p>
<p>表现层接口如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IBookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span><span class="comment">//添加操作</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span><span class="comment">//修改操作</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.modify(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span><span class="comment">//删除操作</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> currentPage,<span class="meta">@PathVariable</span> <span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getPage(currentPage,pageSize, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在使用Postman测试时关注提交类型，对应上即可，不然就会报405的错误码了。</p>
<p><strong>总结</strong></p>
<p>基于Restful制作表现层接口</p>
<ul>
<li>新增：POST</li>
<li>删除：DELETE</li>
<li>修改：PUT</li>
<li>查询：GET</li>
</ul>
<p>接收参数</p>
<ul>
<li>实体数据：<code>@RequestBody</code></li>
<li>路径变量：<code>@PathVariable</code></li>
</ul>
<h3 id="表现层消息一致性处理"><a href="#表现层消息一致性处理" class="headerlink" title="表现层消息一致性处理"></a>表现层消息一致性处理</h3><p>目前我们通过Postman测试后业务层接口功能是通的，但是这样的结果给到前端开发者会出现一个小问题。不同的操作结果所展示的数据格式差异化严重。</p>
<p><strong>增删改操作结果</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure>

<p><strong>查询单个数据操作结果</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机理论&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring实战 第5版&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring入门经典教程&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>查询全部数据操作结果</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机理论&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring实战 第5版&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring入门经典教程&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机理论&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring 5核心原理与30个类手写实战&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;十年沉淀之作&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p>每种不同操作返回的数据格式都不一样，而且还不知道以后还会有什么格式，这样的结果让前端人员看了是很容易让人崩溃的，必须将所有操作的操作结果数据格式统一起来，需要设计表现层返回结果的模型类，用于后端与前端进行数据格式统一，也称为<strong>前后端数据协议</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean flag;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中flag用于标识操作是否成功，data用于封装操作数据，现在的数据格式就变了</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;flag&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机理论&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring实战 第5版&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring入门经典教程&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>表现层开发格式也需要转换一下</p>
<img src="https://pic.imgdb.cn/item/62619fb2239250f7c551227a.jpg" style="zoom:80%;" />

<img src="https://pic.imgdb.cn/item/62619fd9239250f7c551600d.jpg" style="zoom:80%;" />

<p>现在后端发送给前端的数据格式就统一了，免去了不少前端解析数据的烦恼。</p>
<p><strong>总结</strong></p>
<ul>
<li>设计统一的返回值结果类型便于前端开发读取数据</li>
<li>返回值结果类型可以根据需求自行设定，没有固定格式</li>
<li>返回值结果模型类用于后端与前端进行数据格式统一，也称为前后端数据协议</li>
</ul>
<h3 id="前后端联通性测试"><a href="#前后端联通性测试" class="headerlink" title="前后端联通性测试"></a>前后端联通性测试</h3><p>后端的表现层接口开发完毕，就可以进行前端的开发了。</p>
<p>将前端人员开发的页面保存到lresources目录下的static目录中，建议执行maven的clean生命周期，避免缓存的问题出现。</p>
<p>​    <img src="https://pic.imgdb.cn/item/6261a160239250f7c553cb73.jpg" style="zoom:67%;" /></p>
<p>在进行具体的功能开发之前，先做联通性的测试，通过页面发送异步提交（axios），这一步调试通过后再进行进一步的功能开发。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//列表</span></span><br><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">	axios.<span class="title function_">get</span>(<span class="string">&quot;/books&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>只要后台代码能够正常工作，前端能够在日志中接收到数据，就证明前后端是通的，也就可以进行下一步的功能开发了。</p>
<p><strong>总结</strong></p>
<ol>
<li>单体项目中页面放置在resources&#x2F;static目录下</li>
<li>created钩子函数用于初始化页面时发起调用</li>
<li>页面使用axios发送异步请求获取数据后确认前后端是否联通</li>
</ol>
<h3 id="页面基础功能开发"><a href="#页面基础功能开发" class="headerlink" title="页面基础功能开发"></a>页面基础功能开发</h3><h5 id="F-1-列表功能（非分页版）"><a href="#F-1-列表功能（非分页版）" class="headerlink" title="F-1.列表功能（非分页版）"></a>F-1.列表功能（非分页版）</h5><p>列表功能主要操作就是加载完数据，将数据展示到页面上，此处要利用VUE的数据模型绑定，发送请求得到数据，然后页面上读取指定数据即可。</p>
<p>​        <strong>页面数据模型定义</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">	<span class="attr">dataList</span>: [],		<span class="comment">//当前页要展示的列表数据</span></span><br><span class="line">	...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>​        异步请求获取数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//列表</span></span><br><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>​        这样在页面加载时就可以获取到数据，并且由VUE将数据展示到页面上了。</p>
<p>总结：</p>
<ol>
<li>将查询数据返回到页面，利用前端数据绑定进行数据展示</li>
</ol>
<h5 id="F-2-添加功能"><a href="#F-2-添加功能" class="headerlink" title="F-2.添加功能"></a>F-2.添加功能</h5><p>​        添加功能用于收集数据的表单是通过一个弹窗展示的，因此在添加操作前首先要进行弹窗的展示，添加后隐藏弹窗即可。因为这个弹窗一直存在，因此当页面加载时首先设置这个弹窗为不可显示状态，需要展示，切换状态即可。</p>
<p>​        <strong>默认状态</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">	<span class="attr">dialogFormVisible</span>: <span class="literal">false</span>,	<span class="comment">//添加表单是否可见</span></span><br><span class="line">	...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>​        <strong>切换为显示状态</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//弹出添加窗口</span></span><br><span class="line"><span class="title function_">handleCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>​        由于每次添加数据都是使用同一个弹窗录入数据，所以每次操作的痕迹将在下一次操作时展示出来，需要在每次操作之前清理掉上次操作的痕迹。</p>
<p>​        <strong>定义清理数据操作</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重置表单</span></span><br><span class="line"><span class="title function_">resetForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">formData</span> = &#123;&#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>​        <strong>切换弹窗状态时清理数据</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//弹出添加窗口</span></span><br><span class="line"><span class="title function_">handleCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">resetForm</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>​        至此准备工作完成，下面就要调用后台完成添加操作了。</p>
<p>​        <strong>添加操作</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加</span></span><br><span class="line">handleAdd () &#123;</span><br><span class="line">    <span class="comment">//发送异步请求</span></span><br><span class="line">    axios.<span class="title function_">post</span>(<span class="string">&quot;/books&quot;</span>,<span class="variable language_">this</span>.<span class="property">formData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//如果操作成功，关闭弹层，显示数据</span></span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">flag</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ol>
<li>将要保存的数据传递到后台，通过post请求的第二个参数传递json数据到后台</li>
<li>根据返回的操作结果决定下一步操作<ul>
<li>如何是true就关闭添加窗口，显示添加成功的消息</li>
<li>如果是false保留添加窗口，显示添加失败的消息</li>
</ul>
</li>
<li>无论添加是否成功，页面均进行刷新，动态加载数据（对getAll操作发起调用）</li>
</ol>
<p>​        <strong>取消添加操作</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取消</span></span><br><span class="line"><span class="title function_">cancel</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">info</span>(<span class="string">&quot;操作取消&quot;</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<ol>
<li>请求方式使用POST调用后台对应操作</li>
<li>添加操作结束后动态刷新页面加载数据</li>
<li>根据操作结果不同，显示对应的提示信息</li>
<li>弹出添加Div时清除表单数据</li>
</ol>
<h5 id="F-3-删除功能"><a href="#F-3-删除功能" class="headerlink" title="F-3.删除功能"></a>F-3.删除功能</h5><p>​        模仿添加操作制作删除功能，差别之处在于删除操作仅传递一个待删除的数据id到后台即可。</p>
<p>​        <strong>删除操作</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="title function_">handleDelete</span>(<span class="params">row</span>) &#123;</span><br><span class="line">    axios.<span class="title function_">delete</span>(<span class="string">&quot;/books/&quot;</span>+row.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">flag</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>​        <strong>删除操作提示信息</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="title function_">handleDelete</span>(<span class="params">row</span>) &#123;</span><br><span class="line">    <span class="comment">//1.弹出提示框</span></span><br><span class="line">    <span class="variable language_">this</span>.$confirm(<span class="string">&quot;此操作永久删除当前数据，是否继续？&quot;</span>,<span class="string">&quot;提示&quot;</span>,&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&#x27;info&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//2.做删除业务</span></span><br><span class="line">        axios.<span class="title function_">delete</span>(<span class="string">&quot;/books/&quot;</span>+row.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">       		<span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">flag</span>)&#123;</span><br><span class="line">            	<span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">        	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            	<span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//3.取消删除</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">info</span>(<span class="string">&quot;取消删除操作&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;，	</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<ol>
<li>请求方式使用Delete调用后台对应操作</li>
<li>删除操作需要传递当前行数据对应的id值到后台</li>
<li>删除操作结束后动态刷新页面加载数据</li>
<li>根据操作结果不同，显示对应的提示信息</li>
<li>删除操作前弹出提示框避免误操作</li>
</ol>
<h5 id="F-4-修改功能"><a href="#F-4-修改功能" class="headerlink" title="F-4.修改功能"></a>F-4.修改功能</h5><p>​        修改功能可以说是列表功能、删除功能与添加功能的合体。几个相似点如下：</p>
<ol>
<li><p>页面也需要有一个弹窗用来加载修改的数据，这一点与添加相同，都是要弹窗</p>
</li>
<li><p>弹出窗口中要加载待修改的数据，而数据需要通过查询得到，这一点与查询全部相同，都是要查数据</p>
</li>
<li><p>查询操作需要将要修改的数据id发送到后台，这一点与删除相同，都是传递id到后台</p>
</li>
<li><p>查询得到数据后需要展示到弹窗中，这一点与查询全部相同，都是要通过数据模型绑定展示数据</p>
</li>
<li><p>修改数据时需要将被修改的数据传递到后台，这一点与添加相同，都是要传递数据</p>
<p>所以整体上来看，修改功能就是前面几个功能的大合体</p>
<p><strong>查询并展示数据</strong></p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//弹出编辑窗口</span></span><br><span class="line"><span class="title function_">handleUpdate</span>(<span class="params">row</span>) &#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books/&quot;</span>+row.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">flag</span>)&#123;</span><br><span class="line">            <span class="comment">//展示弹层，加载数据</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">formData</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible4Edit</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;数据同步失败，自动刷新&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>​        <strong>修改操作</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="title function_">handleEdit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    axios.<span class="title function_">put</span>(<span class="string">&quot;/books&quot;</span>,<span class="variable language_">this</span>.<span class="property">formData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//如果操作成功，关闭弹层并刷新页面</span></span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">flag</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible4Edit</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;修改失败，请重试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<ol>
<li>加载要修改数据通过传递当前行数据对应的id值到后台查询数据（同删除与查询全部）</li>
<li>利用前端双向数据绑定将查询到的数据进行回显（同查询全部）</li>
<li>请求方式使用PUT调用后台对应操作（同新增传递数据）</li>
<li>修改操作结束后动态刷新页面加载数据（同新增）</li>
<li>根据操作结果不同，显示对应的提示信息（同新增）</li>
</ol>
<p>​    </p>
<h3 id="业务消息一致性处理"><a href="#业务消息一致性处理" class="headerlink" title="业务消息一致性处理"></a>业务消息一致性处理</h3><p>​        目前的功能制作基本上达成了正常使用的情况，什么叫正常使用呢？也就是这个程序不出BUG，如果我们搞一个BUG出来，你会发现程序马上崩溃掉。比如后台手工抛出一个异常，看看前端接收到的数据什么样子。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-09-15T03:27:31.038+00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Internal Server Error&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/books&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>​        面对这种情况，前端的同学又不会了，这又是什么格式？怎么和之前的格式不一样？</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;flag&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机理论&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring实战 第5版&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring入门经典教程&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>​        看来不仅要对正确的操作数据格式做处理，还要对错误的操作数据格式做同样的格式处理。</p>
<p>​        首先在当前的数据结果中添加消息字段，用来兼容后台出现的操作消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean flag;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="keyword">private</span> String msg;		<span class="comment">//用于封装消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        后台代码也要根据情况做处理，当前是模拟的错误。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> bookService.insert(book);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(flag , flag ? <span class="string">&quot;添加成功^_^&quot;</span> : <span class="string">&quot;添加失败-_-!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        然后在表现层做统一的异常处理，使用SpringMVC提供的异常处理器做统一的异常处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">doOtherException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        <span class="comment">//发送消息给运维</span></span><br><span class="line">        <span class="comment">//发送邮件给开发人员,ex对象发送给开发人员</span></span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">false</span>,<span class="literal">null</span>,<span class="string">&quot;系统错误，请稍后再试！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        页面上得到数据后，先判定是否有后台传递过来的消息，标志就是当前操作是否成功，如果返回操作结果false，就读取后台传递的消息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加</span></span><br><span class="line">handleAdd () &#123;</span><br><span class="line">	<span class="comment">//发送ajax请求</span></span><br><span class="line">    axios.<span class="title function_">post</span>(<span class="string">&quot;/books&quot;</span>,<span class="variable language_">this</span>.<span class="property">formData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//如果操作成功，关闭弹层，显示数据</span></span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">flag</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>);			<span class="comment">//消息来自于后台传递过来，而非固定内容</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<ol>
<li>使用注解@RestControllerAdvice定义SpringMVC异常处理器用来处理异常的</li>
<li>异常处理器必须被扫描加载，否则无法生效</li>
<li>表现层返回结果的模型类中添加消息属性用来传递消息到页面</li>
</ol>
<p>​    </p>
<h3 id="页面功能开发"><a href="#页面功能开发" class="headerlink" title="页面功能开发"></a>页面功能开发</h3><h5 id="F-5-分页功能"><a href="#F-5-分页功能" class="headerlink" title="F-5.分页功能"></a>F-5.分页功能</h5><p>​        分页功能的制作用于替换前面的查询全部，其中要使用到elementUI提供的分页组件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--分页组件--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pagination-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-pagination</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">		<span class="attr">class</span>=<span class="string">&quot;pagiantion&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">		@<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">		<span class="attr">:current-page</span>=<span class="string">&quot;pagination.currentPage&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">		<span class="attr">:page-size</span>=<span class="string">&quot;pagination.pageSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">		<span class="attr">layout</span>=<span class="string">&quot;total, prev, pager, next, jumper&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">		<span class="attr">:total</span>=<span class="string">&quot;pagination.total&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>​        为了配合分页组件，封装分页对应的数据模型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">	<span class="attr">pagination</span>: &#123;	</span><br><span class="line">		<span class="comment">//分页相关模型数据</span></span><br><span class="line">		<span class="attr">currentPage</span>: <span class="number">1</span>,	<span class="comment">//当前页码</span></span><br><span class="line">		<span class="attr">pageSize</span>:<span class="number">10</span>,	<span class="comment">//每页显示的记录数</span></span><br><span class="line">		<span class="attr">total</span>:<span class="number">0</span>,		<span class="comment">//总记录数</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>​        修改查询全部功能为分页查询，通过路径变量传递页码信息参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books/&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span>+<span class="string">&quot;/&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pageSize</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>​        后台提供对应的分页功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">getAll</span><span class="params">(<span class="meta">@PathVariable</span> Integer currentPage,<span class="meta">@PathVariable</span> Integer pageSize)</span>&#123;</span><br><span class="line">    IPage&lt;Book&gt; pageBook = bookService.getPage(currentPage, pageSize);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">null</span> != pageBook ,pageBook);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        页面根据分页操作结果读取对应数据，并进行数据模型绑定。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books/&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span>+<span class="string">&quot;/&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pageSize</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">total</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">total</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">current</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pagesize</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">size</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">records</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>​        对切换页码操作设置调用当前分页操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//切换页码</span></span><br><span class="line"><span class="title function_">handleCurrentChange</span>(<span class="params">currentPage</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span> = currentPage;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<ol>
<li>使用el分页组件</li>
<li>定义分页组件绑定的数据模型</li>
<li>异步调用获取分页数据</li>
<li>分页数据页面回显</li>
</ol>
<h5 id="F-6-删除功能维护"><a href="#F-6-删除功能维护" class="headerlink" title="F-6.删除功能维护"></a>F-6.删除功能维护</h5><p>​        由于使用了分页功能，当最后一页只有一条数据时，删除操作就会出现BUG，最后一页无数据但是独立展示，对分页查询功能进行后台功能维护，如果当前页码值大于最大页码值，重新执行查询。其实这个问题解决方案很多，这里给出比较简单的一种处理方案。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">getPage</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> currentPage,<span class="meta">@PathVariable</span> <span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line">    IPage&lt;Book&gt; page = bookService.getPage(currentPage, pageSize);</span><br><span class="line">    <span class="comment">//如果当前页码值大于了总页码值，那么重新执行查询操作，使用最大页码值作为当前页码值</span></span><br><span class="line">    <span class="keyword">if</span>( currentPage &gt; page.getPages())&#123;</span><br><span class="line">        page = bookService.getPage((<span class="type">int</span>)page.getPages(), pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">true</span>, page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="F-7-条件查询功能"><a href="#F-7-条件查询功能" class="headerlink" title="F-7.条件查询功能"></a>F-7.条件查询功能</h5><p>​        最后一个功能来做条件查询，其实条件查询可以理解为分页查询的时候除了携带分页数据再多带几个数据的查询。这些多带的数据就是查询条件。比较一下不带条件的分页查询与带条件的分页查询差别之处，这个功能就好做了</p>
<ul>
<li><p>页面封装的数据：带不带条件影响的仅仅是一次性传递到后台的数据总量，由传递2个分页相关数据转换成2个分页数据加若干个条件</p>
</li>
<li><p>后台查询功能：查询时由不带条件，转换成带条件，反正不带条件的时候查询条件对象使用的是null，现在换成具体条件，差别不大</p>
</li>
<li><p>查询结果：不管带不带条件，出来的数据只是有数量上的差别，其他都差别，这个可以忽略</p>
<p>经过上述分析，看来需要在页面发送请求的格式方面做一定的修改，后台的调用数据层操作时发送修改，其他没有区别。</p>
<p>页面发送请求时，两个分页数据仍然使用路径变量，其他条件采用动态拼装url参数的形式传递。</p>
<p><strong>页面封装查询条件字段</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pagination: &#123;		</span><br><span class="line">//分页相关模型数据</span><br><span class="line">	currentPage: 1,		//当前页码</span><br><span class="line">	pageSize:10,		//每页显示的记录数</span><br><span class="line">	total:0,			//总记录数</span><br><span class="line">	name: &quot;&quot;,</span><br><span class="line">	type: &quot;&quot;,</span><br><span class="line">	description: &quot;&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>页面添加查询条件字段对应的数据模型绑定名称</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;filter-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;图书类别&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pagination.type&quot;</span> <span class="attr">class</span>=<span class="string">&quot;filter-item&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;图书名称&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pagination.name&quot;</span> <span class="attr">class</span>=<span class="string">&quot;filter-item&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;图书描述&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pagination.description&quot;</span> <span class="attr">class</span>=<span class="string">&quot;filter-item&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;getAll()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dalfBut&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">class</span>=<span class="string">&quot;butT&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleCreate()&quot;</span>&gt;</span>新建<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将查询条件组织成url参数，添加到请求url地址中，这里可以借助其他类库快速开发，当前使用手工形式拼接，降低学习要求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//1.获取查询条件,拼接查询条件</span></span><br><span class="line">    param = <span class="string">&quot;?name=&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">name</span>;</span><br><span class="line">    param += <span class="string">&quot;&amp;type=&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">type</span>;</span><br><span class="line">    param += <span class="string">&quot;&amp;description=&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">description</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;-----------------&quot;</span>+ param);</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books/&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span>+<span class="string">&quot;/&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pageSize</span>+param).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">records</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>后台代码中定义实体类封查询条件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">getAll</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> currentPage,<span class="meta">@PathVariable</span> <span class="type">int</span> pageSize,Book book)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;参数=====&gt;&quot;</span>+book);</span><br><span class="line">    IPage&lt;Book&gt; pageBook = bookService.getPage(currentPage,pageSize);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">null</span> != pageBook ,pageBook);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应业务层接口与实现类进行修正</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBookService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Book&gt; &#123;</span><br><span class="line">    IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(Integer currentPage,Integer pageSize,Book queryBook)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl2</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;BookDao,Book&gt; <span class="keyword">implements</span> <span class="title class_">IBookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(Integer currentPage,Integer pageSize,Book queryBook)</span>&#123;</span><br><span class="line">        <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(currentPage,pageSize);</span><br><span class="line">        LambdaQueryWrapper&lt;Book&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;Book&gt;();</span><br><span class="line">        lqw.like(Strings.isNotEmpty(queryBook.getName()),Book::getName,queryBook.getName());</span><br><span class="line">        lqw.like(Strings.isNotEmpty(queryBook.getType()),Book::getType,queryBook.getType());</span><br><span class="line">        lqw.like(Strings.isNotEmpty(queryBook.getDescription()),Book::getDescription,queryBook.getDescription());</span><br><span class="line">        <span class="keyword">return</span> bookDao.selectPage(page,lqw);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>页面回显数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//1.获取查询条件,拼接查询条件</span></span><br><span class="line">    param = <span class="string">&quot;?name=&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">name</span>;</span><br><span class="line">    param += <span class="string">&quot;&amp;type=&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">type</span>;</span><br><span class="line">    param += <span class="string">&quot;&amp;description=&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">description</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;-----------------&quot;</span>+ param);</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books/&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span>+<span class="string">&quot;/&quot;</span>+<span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pageSize</span>+param).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">total</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">total</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">current</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pagesize</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">size</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">records</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>总结</strong></p>
<ol>
<li>定义查询条件数据模型（当前封装到分页数据模型中）</li>
<li>异步调用分页功能并通过请求参数传递数据到后台</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot03 —— 第三方技术整合</title>
    <url>/2022/04/21/SpringBoot03/</url>
    <content><![CDATA[<p>概述：SpringBoot整合JUnit，MyBatis，MyBatis-Plus，Druid</p>
<p>SpringBoot之所以好用，就是它能方便快捷的整合其他技术</p>
<span id="more"></span>

<h3 id="整合JUnit"><a href="#整合JUnit" class="headerlink" title="整合JUnit"></a>整合JUnit</h3><p>SpringBoot技术的定位用于简化开发，再具体点是简化Spring程序的开发。</p>
<p>使用SpringBoot整合JUnit需要保障导入test对应的starter，初始化项目时此项是默认导入的，导入了<code>spring-boot-starter-test</code>。</p>
<p>先看一下不使用SpringBoot技术时，Spring整合JUnit的制作方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载spring整合junit专用的类运行器</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//指定对应的配置信息</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceTestCase</span> &#123;</span><br><span class="line">    <span class="comment">//注入你要测试的对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//执行要测试的对象对应的方法</span></span><br><span class="line">        System.out.println(accountService.findById(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中核心代码是前两个注解：</p>
<p>第一个注解<code>@RunWith</code>是设置Spring专用的测试类运行器，简单说就是Spring程序执行程序有自己的一套独立的运行程序的方式，不能使用JUnit提供的类运行方式了，必须指定一下，但是格式是固定的</p>
<p>第二个注解<code>@ContextConfiguration</code>是用来设置Spring核心配置文件或配置类的，简单说就是加载Spring的环境你要告诉Spring具体的环境配置是在哪里写的，虽然每次加载的文件都有可能不同，但是如果文件名是固定的，这个也是一个固定格式。</p>
<p>SpringBoot就抓住上述两条内容书写进行开发简化，能走默认值的走默认值，能不写的就不写，具体格式如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot04JunitApplicationTests</span> &#123;</span><br><span class="line">    <span class="comment">//注入你要测试的对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//执行要测试的对象对应的方法</span></span><br><span class="line">        bookDao.save();</span><br><span class="line">        System.out.println(<span class="string">&quot;two...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用一个注解<code>@SpringBootTest</code>替换了前面两个注解。</p>
<p>那么加载的配置类或者配置文件是哪一个？其实就是我们前面启动程序使用的引导类。</p>
<p>如果想手工指定引导类有两种方式，第一种方式使用属性的形式进行，在注解<code>@SpringBootTest</code>中添加classes属性指定配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = Springboot04JunitApplication.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot04JunitApplicationTests</span> &#123;</span><br><span class="line">    <span class="comment">//注入你要测试的对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//执行要测试的对象对应的方法</span></span><br><span class="line">        bookDao.save();</span><br><span class="line">        System.out.println(<span class="string">&quot;two...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种方式回归原始配置方式，仍然使用<code>@ContextConfiguration</code>注解进行，效果是一样的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = Springboot04JunitApplication.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot04JunitApplicationTests</span> &#123;</span><br><span class="line">    <span class="comment">//注入你要测试的对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//执行要测试的对象对应的方法</span></span><br><span class="line">        bookDao.save();</span><br><span class="line">        System.out.println(<span class="string">&quot;two...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用SpringBoot整合JUnit需要保障导入test对应的starter，由于初始化项目时此项是默认导入的，所以此处没有提及，其实和之前学习的内容一样，用什么技术导入对应的starter即可。</p>
<p><strong>总结</strong></p>
<ol>
<li>导入测试对应的starter</li>
<li>测试类使用@SpringBootTest修饰</li>
<li>使用自动装配的形式添加要测试的对象</li>
<li>测试类如果存在于引导类所在包或子包中无需指定引导类</li>
<li>测试类如果不存在于引导类所在的包或子包中需要通过classes属性指定引导类</li>
</ol>
<h3 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h3><h4 id="原始整合方式"><a href="#原始整合方式" class="headerlink" title="原始整合方式"></a>原始整合方式</h4><p>以配置类的形式为例</p>
<ul>
<li><p>导入坐标，MyBatis坐标不能少，Spring整合MyBatis还有自己专用的坐标，此外Spring进行数据库操作的jdbc坐标是必须的，剩下还有mysql驱动坐标，本例中使用了Druid数据源，这个倒是可以不要</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.导入mybatis与spring整合的jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入spring操作数据库必选的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Spring核心配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>MyBatis要交给Spring接管的bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义mybatis专用的配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisConfig</span> &#123;</span><br><span class="line"><span class="comment">//    定义创建SqlSessionFactory对应的bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="comment">//SqlSessionFactoryBean是由mybatis-spring包提供的，专用于整合用的对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置数据源替代原始配置中的environments的配置</span></span><br><span class="line">        sfb.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">//设置类型别名替代原始配置中的typeAliases的配置</span></span><br><span class="line">        sfb.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sfb;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    定义加载所有的映射配置</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据源对应的bean，此处使用Druid数据源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;dataSource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据库连接信息（properties格式）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring_db?useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>上述格式基本上是最简格式了</p>
</li>
</ul>
<h4 id="SpringBoot整合MyBaits格式"><a href="#SpringBoot整合MyBaits格式" class="headerlink" title="SpringBoot整合MyBaits格式"></a>SpringBoot整合MyBaits格式</h4><ul>
<li><p>创建模块</p>
</li>
<li><p>勾选要使用的技术，MyBatis，由于要操作数据库，还要勾选对应数据库</p>
</li>
<li><p>或者手工导入对应技术的starter，和对应数据库的坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.导入对应的starter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置数据源相关信息，没有这个信息你连接哪个数据库都不知道</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#2.配置相关信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>到这为止所有配置部分就结束了，写一个MyBatis程序运行需要的Dao（或者Mapper）就可以运行了</p>
</li>
</ul>
<p><strong>实体类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>映射接口（Dao）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot05MybatisApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(bookDao.getById(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="#ff0000"><b>注意</b></font>：当前使用的SpringBoot版本是2.5.4，对应的坐标设置中Mysql驱动使用的是8x版本。<strong>使用SpringBoot2.4.3（不含）之前版本会出现一个BUG</strong>，就是MySQL驱动升级到8以后要求强制配置时区，如果不设置会出问题。解决方案很简单，驱动url上面添加上对应设置就行了</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#2.配置相关信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p>这里设置的UTC是全球标准时间，也可以理解为是英国时间，中国处在东八区，需要在这个基础上加上8小时，这样才能和中国地区的时间对应的，也可以修改配置为Asia&#x2F;Shanghai，同样可以解决这个问题。</p>
<p>此外在运行程序时还会给出一个提示，说数据库驱动过时的警告，根据提示修改配置即可，弃用<strong>com.mysql.jdbc.Driver</strong>，换用<font color="#ff0000"><b>com.mysql.cj.jdbc.Driver</b></font>。前面的例子中已经更换了驱动了，在此说明一下。</p>
<h3 id="整合MyBatis-Plus"><a href="#整合MyBatis-Plus" class="headerlink" title="整合MyBatis-Plus"></a>整合MyBatis-Plus</h3><p>MyBaitsPlus（简称MP），国人开发的技术，符合中国人开发习惯。不能在创建项目时通过勾选的形式找到这个名字，因为SpringBoot官网还未收录此坐标。</p>
<p><strong>导入对应的starter</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关于这个坐标，此处要说明一点，之前使用的starter都是下面的格式</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Spring-boot-start-***</span><br></pre></td></tr></table></figure>

<p>而MyBatis与MyBatisPlus这两个坐标的名字书写比较特殊，是第三方技术名称在前，boot和starter在后</p>
<p><strong>配置数据源相关信息</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#2.配置相关信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 一系列配置：如关闭驼峰式命名转换，防止将列名自动从roleName转换为role_name</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>剩下的就是写MyBaitsPlus的程序：</p>
<p><strong>映射接口（Dao）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Book&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>核心在于Dao接口继承了一个BaseMapper的接口，这个接口中帮助开发者预定了若干个常用的API接口，简化了通用API接口的开发工作</strong>。</p>
<img src="https://pic.imgdb.cn/item/62610ce2239250f7c5f88efa.jpg" style="zoom:80%;" />

<p>下面就可以写一个测试类进行测试了，此处省略</p>
<h3 id="整合Druid"><a href="#整合Druid" class="headerlink" title="整合Druid"></a>整合Druid</h3><p>前面整合MyBatis和MyBatisPlus的时候，使用的数据源对象都是SpringBoot默认的数据源对象。通过启动日志我们可以知道是HiKari：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">2022-04-21 16:46:36.790  INFO 23160 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...</span><br><span class="line">2022-04-21 16:46:37.408  INFO 23160 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.</span><br></pre></td></tr></table></figure>

<p>如果需要更换数据源为Druid：</p>
<ul>
<li><p>导入Druid对应的starter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p>注意，配置项中，在datasource下面并不是直接配置url这些属性的，而是先配置了一个druid节点，然后再配置的url这些东西。</p>
<p>言外之意，url这个属性是druid下面的属性。其实除了这4个常规配置外，还有druid专用的其他配置。通过提示功能可以打开druid相关的配置查阅</p>
<img src="https://pic.imgdb.cn/item/62611b7f239250f7c51ba0a3.jpg" style="zoom:80%;" /></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot02 —— 基础配置</title>
    <url>/2022/04/20/SpringBoot02/</url>
    <content><![CDATA[<p>概述：SpringBoot的基础配置，包括属性配置，配置文件分类，yaml文件，yaml数据读取</p>
<span id="more"></span>

<h3 id="复制工程"><a href="#复制工程" class="headerlink" title="复制工程"></a>复制工程</h3><p><strong>原则</strong></p>
<ul>
<li><p>保留工程基础结构</p>
</li>
<li><p>抹掉原始工程痕迹</p>
</li>
</ul>
<p><strong>步骤</strong></p>
<ul>
<li><p>在工作空间中复制对应工程，并修改工程名称</p>
</li>
<li><p>删除与Idea相关配置文件，<strong>仅保留src目录与pom.xml文件</strong></p>
</li>
<li><p>修改pom.xml文件中的artifactId与新工程&#x2F;模块名相同（务必注意！）</p>
</li>
<li><p>删除name标签（可选）</p>
</li>
<li><p>保留备份工程供后期使用</p>
</li>
</ul>
<h3 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h3><p><strong>SpringBoot通过配置文件application.properties就可以修改默认的配置</strong></p>
<p><strong>服务器端口配置</strong></p>
<p>当前访问tomcat的默认端口是8080，尝试改成80：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器端口配置</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure>

<p>注意要实现查看端口是否占用</p>
<p><strong>关闭运行日志图标（banner）</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改banner</span></span><br><span class="line"><span class="attr">spring.main.banner-mode</span>=<span class="string">off</span></span><br><span class="line"><span class="comment"># spring.banner.image.location=logo.png</span></span><br></pre></td></tr></table></figure>

<p><strong>设置日志相关</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 日志debug info error</span></span><br><span class="line"><span class="attr">logging.level.root</span>=<span class="string">info</span></span><br><span class="line"><span class="comment"># logging.level.com.itheima=warn</span></span><br></pre></td></tr></table></figure>



<p><strong>SpringBoot内置属性查询</strong></p>
<p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties">官方文档</a></p>
<p>官方文档中参考文档第一项：Application Properties</p>
<p><strong>总结</strong></p>
<ul>
<li><p>SpringBoot中导入对应starter后，提供对应配置属性</p>
</li>
<li><p>书写SpringBoot配置采用关键字+提示形式书写</p>
</li>
</ul>
<h3 id="配置文件分类"><a href="#配置文件分类" class="headerlink" title="配置文件分类"></a>配置文件分类</h3><p>SpringBoot除了支持properties格式的配置文件，还支持另外两种格式的配置文件。三种配置文件格式分别如下:</p>
<ul>
<li>properties格式（传统格式&#x2F;默认格式）</li>
<li>yml格式（主流格式）</li>
<li>yaml格式</li>
</ul>
<p>下面列举三种不同文件格式配置相同的属性范例：</p>
<ul>
<li>application.properties（properties格式）</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure>

<ul>
<li>application.yml（yml格式）</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure>

<ul>
<li>application.yaml（yaml格式）</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure>

<p>yml格式和yaml格式除了文件名后缀不一样，格式完全一样，所以可以合并成一种格式来看。</p>
<p>对于这三种格式来说，yml格式在实际中用得比较多</p>
<p><strong>配置文件优先级</strong></p>
<p>3种类型的文件如果同时存在，那么加载优先顺序是：</p>
<p><code>.properties</code>  &gt;  <code>.yml</code>  &gt;  <code>.yaml</code></p>
<p>不同配置文件中相同配置按照加载优先级相互覆盖，不同配置文件中不同配置全部保留 </p>
<h3 id="yaml文件"><a href="#yaml文件" class="headerlink" title="yaml文件"></a>yaml文件</h3><p>YAML（YAML Ain’t Markup Language），一种数据序列化格式</p>
<p>优点：</p>
<ul>
<li>容易阅读</li>
<li>容易与脚本语言交互</li>
<li>以数据为核心，重数据轻格式</li>
</ul>
<p>YAML文件扩展名</p>
<ul>
<li><p><strong>.yml</strong>（主流）</p>
</li>
<li><p>.yaml</p>
</li>
</ul>
<p><strong>yaml语法规则</strong></p>
<ul>
<li>大小写敏感</li>
<li>属性不允许同名</li>
<li>属性层级关系使用多行描述，每行结尾使用冒号结束</li>
<li>使用缩进表示层级关系，同层级左侧对齐，<strong>只允许使用空格</strong>（不允许使用Tab键）</li>
<li>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</li>
<li># 表示注释</li>
<li>核心规则：<strong>数据前面要加空格与冒号隔开</strong></li>
</ul>
<p>示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">boolean:</span> <span class="literal">TRUE</span>  						<span class="comment">#TRUE,true,True,FALSE,false，False均可</span></span><br><span class="line"><span class="attr">float:</span> <span class="number">3.14</span>    						<span class="comment">#6.8523015e+5  #支持科学计数法</span></span><br><span class="line"><span class="attr">int:</span> <span class="number">123</span>       						<span class="comment">#0b1010_0111_0100_1010_1110    #支持二进制、八进制、十六进制</span></span><br><span class="line"><span class="attr">null:</span> <span class="string">~</span>        						<span class="comment">#使用~表示null</span></span><br><span class="line"><span class="attr">string:</span> <span class="string">HelloWorld</span>      			<span class="comment">#字符串可以直接书写</span></span><br><span class="line"><span class="attr">string2:</span> <span class="string">&quot;Hello World&quot;</span>  			<span class="comment">#可以使用双引号包裹特殊字符</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-02-17</span>        			<span class="comment">#日期必须使用yyyy-MM-dd格式</span></span><br><span class="line"><span class="attr">datetime:</span> <span class="number">2018-02-17T15:02:31+08:00</span>  <span class="comment">#时间和日期之间使用T连接，最后使用+代表时区</span></span><br></pre></td></tr></table></figure>

<p>yaml格式中也可以表示数组，<strong>在属性名书写位置的下方使用减号作为数据开始符号</strong>，<strong>每行书写一个数据，减号与数据间空格分隔</strong>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">subject:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">大数据</span></span><br><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">	<span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">    <span class="attr">subject:</span></span><br><span class="line">    	<span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">大数据</span></span><br><span class="line"><span class="attr">likes:</span> [<span class="string">game</span>,<span class="string">study</span>]				  <span class="comment">#数组书写缩略格式</span></span><br><span class="line"><span class="attr">users:</span>							 <span class="comment">#对象数组格式一</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Tom</span></span><br><span class="line">   	<span class="attr">age:</span> <span class="number">4</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Jerry</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">users:</span>							 <span class="comment">#对象数组格式二</span></span><br><span class="line">  <span class="bullet">-</span>  </span><br><span class="line">    <span class="attr">name:</span> <span class="string">Tom</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">4</span></span><br><span class="line">  <span class="bullet">-</span>   </span><br><span class="line">    <span class="attr">name:</span> <span class="string">Jerry</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">5</span>			    </span><br><span class="line"><span class="attr">users2:</span> [ &#123; <span class="string">name:Tom</span> , <span class="string">age:4</span> &#125; , &#123; <span class="string">name:Jerry</span> , <span class="string">age:5</span> &#125; ]	<span class="comment">#对象数组缩略格式</span></span><br></pre></td></tr></table></figure>



<h3 id="yaml数据读取"><a href="#yaml数据读取" class="headerlink" title="yaml数据读取"></a>yaml数据读取</h3><p>对于yaml文件中的数据，其实可以想象成这就是一个小型的数据库，里面保存有若干数据，每个数据都有一个独立的名字</p>
<h4 id="读取单一数据"><a href="#读取单一数据" class="headerlink" title="读取单一数据"></a>读取单一数据</h4><p>yaml中保存的单个数据，可以使用Spring中的注解<code>@Value</code>读取单个数据，属性名引用方式：<code>$&#123;一级属性名.二级属性名……&#125;</code></p>
<img src="https://pic.imgdb.cn/item/62603d05239250f7c5d952c8.jpg" style="zoom:80%;" />

<h4 id="读取全部数据"><a href="#读取全部数据" class="headerlink" title="读取全部数据"></a>读取全部数据</h4><p>SpringBoot提供了一个对象，能够把所有的数据都封装到这一个对象中，这个对象叫Environment，使用自动装配注解可以将所有的yaml数据封装到这个对象中</p>
<img src="https://pic.imgdb.cn/item/62603df5239250f7c5dabfe4.jpg" style="zoom:80%;" />

<h4 id="读取对象数据"><a href="#读取对象数据" class="headerlink" title="读取对象数据"></a>读取对象数据</h4><p>由于Java是一个面向对象的语言，很多情况下，我们会将<strong>一组数据封装成一个对象</strong>。SpringBoot也提供了可以将一组yaml对象数据封装一个Java对象的操作</p>
<p>首先定义一个对象，并将该对象纳入Spring管控的范围，也就是定义成一个bean，然后使用注解<code>@ConfigurationProperties</code>指定该对象加载哪一组yaml中配置的信息。</p>
<img src="https://pic.imgdb.cn/item/62603ed0239250f7c5dc1248.jpg" style="zoom:80%;" />

<p>这个<code>@ConfigurationProperties</code>必须告诉他加载的数据前缀是什么，这样指定前缀下的所有属性就封装到这个对象中。注意数据属性名要与对象的变量名一一对应.</p>
<img src="https://pic.imgdb.cn/item/62604187239250f7c5dfc918.jpg" style="zoom:80%;" />

<ul>
<li>使用@ConfigurationProperties注解绑定配置信息到封装类中</li>
<li>封装类需要定义为Spring管理的bean（使用<code>@Component</code>），否则无法进行属性注入</li>
</ul>
<h4 id="yaml文件中的数据引用"><a href="#yaml文件中的数据引用" class="headerlink" title="yaml文件中的数据引用"></a>yaml文件中的数据引用</h4><p>如果在书写yaml数据时，经常出现如下现象，比如很多个文件都具有相同的目录前缀</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">center:</span></span><br><span class="line">	<span class="attr">dataDir:</span> <span class="string">D:/usr/local/fire/data</span></span><br><span class="line">    <span class="attr">tmpDir:</span> <span class="string">D:/usr/local/fire/tmp</span></span><br><span class="line">    <span class="attr">logDir:</span> <span class="string">D:/usr/local/fire/log</span></span><br><span class="line">    <span class="attr">msgDir:</span> <span class="string">D:/usr/local/fire/msgDir</span></span><br></pre></td></tr></table></figure>

<p>这个时候可以使用引用格式来定义数据，其实就是定义了一个变量名，然后引用变量，格式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">baseDir:</span> <span class="string">/usr/local/fire</span></span><br><span class="line"><span class="attr">center:</span></span><br><span class="line">    <span class="attr">dataDir:</span> <span class="string">$&#123;baseDir&#125;/data</span></span><br><span class="line">    <span class="attr">tmpDir:</span> <span class="string">$&#123;baseDir&#125;/tmp</span></span><br><span class="line">    <span class="attr">logDir:</span> <span class="string">$&#123;baseDir&#125;/log</span></span><br><span class="line">    <span class="attr">msgDir:</span> <span class="string">$&#123;baseDir&#125;/msgDir</span></span><br></pre></td></tr></table></figure>

<p>还有一个注意事项，在书写字符串时，如果需要使用转义字符，需要<strong>将数据字符串使用双引号包裹起来</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">lesson:</span> <span class="string">&quot;Spring\tboot\nlesson&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot01 —— 概览及Demo运行</title>
    <url>/2022/04/20/SpringBoot01/</url>
    <content><![CDATA[<p>概述：SpringBoot入门程序搭建和运行</p>
<span id="more"></span>

<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>SpringBoot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用的初始搭建以及开发过程</p>
<p><strong>Spring程序缺点</strong></p>
<ul>
<li>依赖设置繁琐</li>
<li>配置繁琐</li>
</ul>
<p><strong>SpringBoot程序优点</strong></p>
<ul>
<li>起步依赖（简化依赖配置）</li>
<li>自动配置（简化常用工程相关配置）</li>
<li>辅助功能（内置服务器，……）</li>
</ul>
<h3 id="快速构建一个SpringMVC控制器程序"><a href="#快速构建一个SpringMVC控制器程序" class="headerlink" title="快速构建一个SpringMVC控制器程序"></a>快速构建一个SpringMVC控制器程序</h3><p><strong>IDEA新建项目</strong></p>
<p>查看版本：File -&gt; Settings -&gt; Maven 可以查看版本（我的版本为3.8.1）</p>
<p>File -&gt; Project Structure -&gt; Modules -&gt; ‘+’  -&gt;New Module -&gt; Spring Initializr (注意如果没有的话要去settings -&gt;plugins -&gt; marketplace 下搜索并下载)</p>
<p>进行如下配置</p>
<p><img src="https://pic.imgdb.cn/item/6245ff0427f86abb2a70bbd8.jpg" alt="image01"></p>
<p>SpringBoot程序中需要使用何种功能即勾选选择技术，目前选择spring web</p>
<p>基础的环境配置即完成了</p>
<p><strong>开发控制器类</strong></p>
<p>入门案例制作的SpringMVC的控制器基于Rest风格开发.</p>
<p>以下程序中的<code>@RestController</code>与<code>@GetMapping</code>注解是基于Restful开发的典型注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Rest模式</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;springboot is running...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springboot is running...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用带main方法的java程序的运行形式来运行程序（运行SpringBoot程序通过运行Application程序入口进行）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot0101QuickstartApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> SpringApplication.run(Springboot0101QuickstartApplication.class, args);</span><br><span class="line">        <span class="type">BookController</span> <span class="variable">bean</span> <span class="operator">=</span> ctx.getBean(BookController.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;bean======&gt;&quot;</span> + bean);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> ctx.getBean(User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p><img src="https://pic.imgdb.cn/item/625ef571239250f7c5a4e46e.jpg"></p>
<p>Spring程序与SpringBoot程序对比：</p>
<img src="https://pic.imgdb.cn/item/625ef5ac239250f7c5a52ceb.jpg" style="zoom: 80%;" />

<p>注意基于IDEA开发SpringBoot程序需要确保联网并且能够加载到程序框架结构</p>
<p><strong>如果无法联网（外网连接慢）：</strong></p>
<ul>
<li><p>进入<a href="spring.io">Spring的官网</a>  </p>
</li>
<li><p>通过项目一级一级的找到SpringBoot技术的介绍页，然后在页面中间部位找到如下内容</p>
</li>
</ul>
<img src="https://pic.imgdb.cn/item/625ef76f239250f7c5a7ab22.jpg" style="zoom:67%;" />

<ul>
<li>点击<strong>Spring Initializr</strong>后进入到创建SpringBoot程序界面，接下来就是输入信息的过程，和在Idea中制作是一样的，只是界面发生了变化，根据自己的要求，在左侧选择对应信息和输入对应的信息。</li>
<li>右侧的<strong>ADD DEPENDENCIES</strong>用于选择使用何种技术，和之前勾选的Spring WEB是在做同一件事，仅仅是界面不同而已，点击后打开网页版的技术选择界面。</li>
<li>所有信息设置完毕后，点击下面左侧<strong>GENERATE</strong>按钮，生成一个文件包。</li>
<li>保存后得到一个压缩文件，这个文件就是创建的SpringBoot工程    </li>
<li>解压缩此文件得到工程目录，在Idea中导入即可直接使用，和之前在Idea环境下根据向导创建的工程完全一样</li>
</ul>
<p>实际上，Idea工具中创建SpringBoot工程其实连接的就是SpringBoot的官网，还句话说这种方式和第一种方式是一模一样的，只不过Idea把界面给整合了一下，读取Spring官网信息，然后展示到Idea界面中而已</p>
<p><strong>在Idea中隐藏指定文件&#x2F;文件夹</strong></p>
<p>Idea中隐藏指定文件或指定类型文件</p>
<ul>
<li>【Files】→【Settings】</li>
<li>【Editor】→【File Types】→【Ignored Files and Folders】</li>
<li>输入要隐藏的名称，支持*号通配符</li>
<li>回车确认添加</li>
</ul>
<h3 id="入门案例详解"><a href="#入门案例详解" class="headerlink" title="入门案例详解"></a>入门案例详解</h3><h4 id="parent"><a href="#parent" class="headerlink" title="parent"></a>parent</h4><img src="https://pic.imgdb.cn/item/625efd37239250f7c5af0b73.jpg" style="zoom:80%;" />

<ul>
<li>开发SpringBoot程序要继承spring-boot-starter-parent</li>
<li>spring-boot-starter-parent中定义了若干个依赖管理（继承于spring-boot-starter-parent）</li>
<li><strong>继承parent模块可以避免多个依赖使用相同技术时出现依赖版本冲突</strong></li>
<li>继承parent的形式也可以采用引入依赖的形式实现效果（aliyun版本的实现方式）</li>
</ul>
<h4 id="starter"><a href="#starter" class="headerlink" title="starter"></a>starter</h4><p>SpringBoot关注到实际开发时，开发者对于依赖坐标的使用往往都有一些固定的组合方式，比如使用spring-webmvc就一定要使用spring-web。每次都要固定搭配着写，非常繁琐，而且格式固定，没有任何技术含量。</p>
<p>SpringBoot把所有的技术使用的固定搭配格式都给开发出来，以后使用某个技术，就不用每次写一堆依赖了，我给你做一个东西，代表一堆东西，开发者使用的时候，直接用做好的这个东西就好了，对于这样的固定技术搭配，SpringBoot给它起了个名字叫做<font color="#ff0000"><b>starter</b></font>。</p>
<p>starter定义了使用某种技术时对于依赖的固定搭配格式，也是一种最佳解决方案，<font color="#ff0000"><b>使用starter可以帮助开发者减少依赖配置</b></font>。</p>
<p><strong>实际开发</strong></p>
<ul>
<li><p>使用任意坐标时，仅书写GAV中的G和A，V由SpringBoot提供，除非SpringBoot未提供对应版本V </p>
</li>
<li><p>如发生坐标错误，再指定Version（要小心版本冲突）</p>
</li>
</ul>
<p><strong>总结</strong></p>
<ul>
<li><p>开发SpringBoot程序需要导入坐标时通常导入对应的starter</p>
</li>
<li><p>每个不同的starter根据功能不同，通常包含多个依赖坐标</p>
</li>
<li><p>使用starter可以实现快速配置的效果，达到简化配置的目的</p>
</li>
</ul>
<h4 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h4><p>其实SpringBoot程序启动还是创建了一个Spring容器对象。当前运行的这个类在SpringBoot程序中是所有功能的入口，称为<font color="#ff0000"><b>引导类</b></font>。</p>
<p>作为一个引导类最典型的特征就是当前类上方声明了一个注解<font color="#ff0000"><b>@SpringBootApplication</b></font>。</p>
<p>启动方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot0101QuickstartApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> SpringApplication.run(Springboot0101QuickstartApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>ingBoot的引导类是Boot工程的执行入口，运行main方法就可以启动项目</p>
</li>
<li><p>SpringBoot工程运行后初始化Spring容器，扫描引导类所在包加载bean</p>
</li>
</ul>
<p><strong>总结</strong></p>
<ul>
<li>SpringBoot工程提供引导类用来启动程序</li>
<li>SpringBoot工程启动后创建并初始化Spring容器</li>
</ul>
<h4 id="内嵌tomcat"><a href="#内嵌tomcat" class="headerlink" title="内嵌tomcat"></a>内嵌tomcat</h4><p>当前我们做的SpringBoot入门案例勾选了Spring-web的功能，并且导入了对应的starter。</p>
<p><strong>更换内嵌Tomcat</strong></p>
<p>SpringBoot提供了3款内置的服务器：</p>
<ul>
<li><p>tomcat(默认) ：apache出品，粉丝多，应用面广，负载了若干较重的组件</p>
</li>
<li><p>jetty：更轻量级，负载性能远不及tomcat</p>
</li>
<li><p>undertow：undertow，负载性能勉强跑赢tomcat</p>
</li>
</ul>
<p>想用哪个，加个坐标就行。前提是把tomcat排除掉，因为tomcat是默认加载的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在就已经成功替换了web服务器，核心思想就是用什么加入对应坐标就可以了。如果有starter，优先使用starter。</p>
<p><strong>总结</strong></p>
<ul>
<li><p>内嵌Tomcat服务器是SpringBoot辅助功能之一</p>
</li>
<li><p>内嵌Tomcat工作原理是将Tomcat服务器作为对象运行，并将该对象交给Spring容器管理</p>
</li>
<li><p>变更内嵌服务器思想是去除现有服务器，添加全新的服务器</p>
</li>
</ul>
<h3 id="学习链接"><a href="#学习链接" class="headerlink" title="学习链接"></a>学习链接</h3><ol>
<li><a href="https://docs.spring.io/spring-boot/docs/3.0.0-M1/reference/htmlsingle/"><em>SpringBoot reference documentation</em></a></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM08 —— SSM整合</title>
    <url>/2022/04/19/SSM08/</url>
    <content><![CDATA[<p>本文记录了SSM框架的原始整合方式，mybatis整合spring，声明式事务控制实现</p>
<span id="more"></span>

<h3 id="原始方式整合"><a href="#原始方式整合" class="headerlink" title="原始方式整合"></a>原始方式整合</h3><p>示例account表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database ssm;</span><br><span class="line">create table account(</span><br><span class="line">	id int primary key auto_increment,</span><br><span class="line">	name varchar(100),</span><br><span class="line">	money double(7,2)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>创建Maven工程</p>
</li>
<li><p>导入Maven坐标</p>
</li>
<li><p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写Mapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountMapper</span> &#123;</span><br><span class="line">	<span class="comment">//保存账户数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line">	<span class="comment">//查询账户数据</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写Service接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">	<span class="comment">//保存账户数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line">	<span class="comment">//查询账户数据</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写Service接口实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.openSession();</span><br><span class="line">	<span class="type">AccountMapper</span> <span class="variable">accountMapper</span> <span class="operator">=</span> sqlSession.getMapper(AccountMapper.class);</span><br><span class="line">	accountMapper.save(account);</span><br><span class="line">	sqlSession.commit();</span><br><span class="line">	sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.openSession();</span><br><span class="line">	<span class="type">AccountMapper</span> <span class="variable">accountMapper</span> <span class="operator">=</span> sqlSession.getMapper(AccountMapper.class);</span><br><span class="line">	<span class="keyword">return</span> accountMapper.findAll();</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/save&quot;,produces = &quot;text/html;charset=UTF-8&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(Account account)</span>&#123;</span><br><span class="line">        accountService.save(account);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;保存成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Account&gt; accountList = accountService.findAll();</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;accountList&quot;</span>,accountList);</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;accountList&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写添加页面</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;添加账户信息表单&lt;/h1&gt;</span><br><span class="line">    &lt;form name=<span class="string">&quot;accountForm&quot;</span> action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/account/save&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        账户名称:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">        账户金额:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;money&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;保存&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写列表页面</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;展示账户数据列表&lt;/h1&gt;</span><br><span class="line">    &lt;table border=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;账户id&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;账户名称&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;账户金额&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">        &lt;c:forEach items=<span class="string">&quot;$&#123;accountList&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;account&quot;</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;$&#123;account.id&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;account.name&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;account.money&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写相应配置文件</p>
<ul>
<li>Spring配置文件：applicationContext.xml</li>
<li>SprngMVC配置文件：spring-mvc.xml</li>
<li>MyBatis映射文件：AccountMapper.xml</li>
<li>MyBatis核心文件：sqlMapConfig.xml</li>
<li>数据库连接信息文件：jdbc.properties</li>
<li>Web.xml文件：web.xml</li>
<li>日志文件：log4j.xml</li>
</ul>
</li>
<li><p>测试添加账户</p>
</li>
<li><p>测试账户列表</p>
</li>
</ul>
<h3 id="Spring整合MyBatis"><a href="#Spring整合MyBatis" class="headerlink" title="Spring整合MyBatis"></a>Spring整合MyBatis</h3><ul>
<li>整合思路</li>
</ul>
<img src="https://pic.imgdb.cn/item/625ecf34239250f7c55baf07.jpg" style="zoom: 50%;" />

<ul>
<li><p>将SqlSessionFactory配置到Spring容器中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载properties文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置数据源信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置sessionFactory--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载mybatis核心文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:sqlMapConfig-spring.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>扫描Mapper，让Spring容器产生Mapper实现类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描mapper所在的包 为mapper创建实现类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.itheima.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置声明式事务控制</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明式事务控制--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--平台事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事务增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--事务的aop织入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.itheima.service.impl.*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改Service实现类代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span> &#123;</span><br><span class="line">        accountMapper.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountMapper.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM07 —— MyBatis的Dao层实现</title>
    <url>/2022/04/19/SSM07/</url>
    <content><![CDATA[<p>本文记录了MyBatis的进阶知识，包括：Dao层（持久层）实现，映射文件的深入知识，核心配置文件的深入知识，多表操作，注解开发</p>
<span id="more"></span>

<h3 id="MyBatis的Dao层实现"><a href="#MyBatis的Dao层实现" class="headerlink" title="MyBatis的Dao层实现"></a>MyBatis的Dao层实现</h3><h4 id="传统开发方式"><a href="#传统开发方式" class="headerlink" title="传统开发方式"></a>传统开发方式</h4><ul>
<li><p>编写UserDao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">	List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写UserDaoImpl实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">	<span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">	List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;userMapper.findAll&quot;</span>);</span><br><span class="line">	sqlSession.close();</span><br><span class="line">	<span class="keyword">return</span> userList; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试传统方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTraditionDao</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="comment">//当前dao层实现是手动编写的</span></span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">	List&lt;User&gt; all = userDao.findAll();</span><br><span class="line">	System.out.println(all);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="代理开发方式"><a href="#代理开发方式" class="headerlink" title="代理开发方式"></a>代理开发方式</h4><p>介绍：</p>
<p>采用 Mybatis 的代理开发方式实现 DAO 层的开发，这种方式是企业的主流。</p>
<p>Mapper 接口开发方法只需要程序员编写Mapper 接口（相当于Dao 接口），由Mybatis 框架根据接口定义创建接口的动态代理对象，代理对象的方法体同上边Dao接口实现类方法。</p>
<p>Mapper 接口开发需要遵循以下规范： </p>
<ul>
<li><p>Mapper.xml文件中的namespace与mapper接口的<strong>全限定名</strong>相同</p>
</li>
<li><p>Mapper接口方法名和Mapper.xml中定义的每个statement的id相同</p>
</li>
<li><p>Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql的parameterType的类型相同</p>
</li>
<li><p>Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</p>
</li>
</ul>
<p>流程：</p>
<ul>
<li><p>编写UserMapper接口</p>
<img src="https://pic.imgdb.cn/item/625daa95239250f7c53ffdc3.jpg" style="zoom:80%;" />
</li>
<li><p>测试代理方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProxyDao</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">	<span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">	<span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line">	<span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">	<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findById(<span class="number">1</span>);</span><br><span class="line">	System.out.println(user);</span><br><span class="line">	sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="MyBatis映射文件深入"><a href="#MyBatis映射文件深入" class="headerlink" title="MyBatis映射文件深入"></a>MyBatis映射文件深入</h3><h4 id="动态sql语句"><a href="#动态sql语句" class="headerlink" title="动态sql语句"></a>动态sql语句</h4><p><strong>概述：</strong></p>
<p>Mybatis 的映射文件中，前面我们的 SQL 都是比较简单的，有些时候业务逻辑复杂时，我们的 SQL是动态变化的，此时在前面的学习中我们的 SQL 就不能满足要求了。</p>
<p>参考的官方文档，描述如下：</p>
<p><img src="https://pic.imgdb.cn/item/625dad21239250f7c542fbbe.jpg"></p>
<p><strong>动态SQL之<code>&lt;if&gt;</code></strong></p>
<p>我们根据实体类的不同取值，使用不同的 SQL语句来进行查询。比如在 id如果不为空时可以根据id查询，如果username 不同空时还要加入用户名作为条件。这种情况在我们的多条件组合查询中经常会碰到。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCondition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=0&quot;</span>&gt;</span></span><br><span class="line">            and id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null&quot;</span>&gt;</span></span><br><span class="line">            and username=#&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password!=null&quot;</span>&gt;</span></span><br><span class="line">            and password=#&#123;password&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>动态SQL之<code>&lt;foreach&gt;</code></strong></p>
<p>循环执行sql的拼接操作，例如：<code>SELECT * FROM USER WHERE id IN (1,2,5)</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIds&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>foreach</code>标签的属性含义如下：</p>
<p><code>&lt;foreach&gt;</code>标签用于遍历集合，它的属性：</p>
<ul>
<li>collection：代表要遍历的集合元素，注意编写时不要写<code>#&#123;&#125;</code></li>
<li>open：代表语句的开始部分</li>
<li>close：代表结束部分</li>
<li>item：代表遍历集合的每个元素，生成的变量名</li>
<li>separator：代表分隔符</li>
</ul>
<p><strong>SQL片段抽取</strong></p>
<p>SQL 中可将重复的 sql 提取出来，使用时用 include 引用即可，最终达到 sql 重用的目的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--sql语句抽取--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span>&gt;</span>select * from user<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIds&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>MyBatis映射文件配置总结：</strong></p>
<p><code>&lt;select&gt;</code>：查询</p>
<p><code>&lt;insert&gt;</code>：插入</p>
<p><code>&lt;update&gt;</code>：修改</p>
<p><code>&lt;delete&gt;</code>：删除</p>
<p><code>&lt;where&gt;</code>：where条件</p>
<p><code>&lt;if&gt;</code>：if判断</p>
<p><code>&lt;foreach&gt;</code>：循环</p>
<p><code>&lt;sql&gt;</code>：sql片段抽取</p>
<h3 id="MyBatis核心配置文件深入"><a href="#MyBatis核心配置文件深入" class="headerlink" title="MyBatis核心配置文件深入"></a>MyBatis核心配置文件深入</h3><h4 id="typeHandlers标签"><a href="#typeHandlers标签" class="headerlink" title="typeHandlers标签"></a>typeHandlers标签</h4><p>无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用<strong>类型处理器</strong>将获取的值以合适的方式转换成 <strong>Java 类型</strong>。下表描述了一些默认的类型处理器（截取部分）。</p>
<p><img src="https://pic.imgdb.cn/item/625e5c02239250f7c54a513e.jpg"></p>
<p>你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。具体做法为：实现<code>org.apache.ibatis.type.TypeHandler</code> 接口， 或继承一个很便利的类 <code>org.apache.ibatis.type.BaseTypeHandler</code>， 然后可以选择性地将它映射到一个JDBC类型。</p>
<p>例如需求：一个Java中的Date数据类型，我想将之存到数据库的时候存成一个1970年至今的毫秒数，取出来时转换成java的Date，即java的Date与数据库的varchar毫秒值之间转换。</p>
<p><strong>开发步骤：</strong></p>
<ul>
<li><p>定义转换类继承类<code>BaseTypeHandler&lt;T&gt;</code></p>
</li>
<li><p>覆盖4个未实现的方法，其中<code>setNonNullParameter</code>为java程序设置数据到数据库的回调方法，<code>getNullableResult</code>为查询时 MySQL的字符串类型转换成 java的Type类型的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTypeHandler</span> <span class="keyword">extends</span> <span class="title class_">BaseTypeHandler</span>&lt;Date&gt; &#123;</span><br><span class="line">    <span class="comment">//将java类型 转换成 数据库需要的类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="type">int</span> i, Date date, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> date.getTime();</span><br><span class="line">        preparedStatement.setLong(i,time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据库中类型 转换成java类型</span></span><br><span class="line">    <span class="comment">//String参数  要转换的字段名称</span></span><br><span class="line">    <span class="comment">//ResultSet 查询出的结果集</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//获得结果集中需要的数据(long) 转换成Date类型 返回</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">aLong</span> <span class="operator">=</span> resultSet.getLong(s);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(aLong);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据库中类型 转换成java类型</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="type">int</span> i)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">aLong</span> <span class="operator">=</span> resultSet.getLong(i);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(aLong);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据库中类型 转换成java类型</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="type">int</span> i)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">aLong</span> <span class="operator">=</span> callableStatement.getLong(i);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(aLong);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在MyBatis核心配置文件中进行注册(sqlMapConfig.xml)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册类型处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;com.itheima.handler.DateTypeHandler&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeHandler</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试转换是否正确</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;sqlMapConfig.xml&quot;</span>);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建user</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUsername(<span class="string">&quot;ceshi&quot;</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    user.setBirthday(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="comment">//执行保存操作</span></span><br><span class="line">    mapper.save(user);</span><br><span class="line"></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="plugins标签"><a href="#plugins标签" class="headerlink" title="plugins标签"></a>plugins标签</h4><p>MyBatis可以使用第三方的插件来对功能进行扩展，分页助手PageHelper是将分页的复杂操作进行封装，使用简单的方式即可获得分页的相关数据</p>
<p><strong>开发步骤：</strong></p>
<ul>
<li><p>导入通用PageHelper的坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在mybatis核心配置文件中配置PageHelper插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置分页助手插件,注意配置在mapper之前--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试分页数据获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;sqlMapConfig.xml&quot;</span>);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置分页相关参数   当前页+每页显示的条数</span></span><br><span class="line">    PageHelper.startPage(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList = mapper.findAll();</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得与分页相关参数</span></span><br><span class="line">    PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;User&gt;(userList);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页：&quot;</span>+pageInfo.getPageNum());</span><br><span class="line">    System.out.println(<span class="string">&quot;每页显示条数：&quot;</span>+pageInfo.getPageSize());</span><br><span class="line">    System.out.println(<span class="string">&quot;总条数：&quot;</span>+pageInfo.getTotal());</span><br><span class="line">    System.out.println(<span class="string">&quot;总页数：&quot;</span>+pageInfo.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;上一页：&quot;</span>+pageInfo.getPrePage());</span><br><span class="line">    System.out.println(<span class="string">&quot;下一页：&quot;</span>+pageInfo.getNextPage());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否是第一个：&quot;</span>+pageInfo.isIsFirstPage());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否是最后一个：&quot;</span>+pageInfo.isIsLastPage());</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="核心配置文件常用标签总结"><a href="#核心配置文件常用标签总结" class="headerlink" title="核心配置文件常用标签总结"></a>核心配置文件常用标签总结</h4><ul>
<li><p>properties标签：该标签可以加载外部的properties文件</p>
</li>
<li><p>typeAliases标签：设置类型别名</p>
</li>
<li><p>environments标签：数据源环境配置标签</p>
</li>
<li><p>typeHandlers标签：配置自定义类型处理器</p>
</li>
<li><p>plugins标签：配置MyBatis的插件</p>
</li>
</ul>
<h3 id="MyBatis多表操作"><a href="#MyBatis多表操作" class="headerlink" title="MyBatis多表操作"></a>MyBatis多表操作</h3><h4 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h4><p><strong>模型：</strong></p>
<p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户</p>
<p>一对一查询的需求：查询一个订单，与此同时查询出该订单所属的用户</p>
<img src="https://pic.imgdb.cn/item/625e8a75239250f7c5c4aca1.jpg" style="zoom: 50%;" />

<p><strong>查询语句</strong>：：<code>select * from orders o,user u where o.uid=u.id;</code></p>
<p>创建Order实体：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Date ordertime;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前订单属于哪一个用户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//省略get set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建User实体：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建OrderMapper接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询全部的方法</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Order&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置OrderMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--手动指定字段与实体属性的映射关系</span></span><br><span class="line"><span class="comment">            column: 数据表的字段名称</span></span><br><span class="line"><span class="comment">            property：实体的属性名称</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ordertime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ordertime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;result column=&quot;uid&quot; property=&quot;user.id&quot;&gt;&lt;/result&gt;</span></span><br><span class="line"><span class="comment">    &lt;result column=&quot;username&quot; property=&quot;user.username&quot;&gt;&lt;/result&gt;</span></span><br><span class="line"><span class="comment">    &lt;result column=&quot;password&quot; property=&quot;user.password&quot;&gt;&lt;/result&gt;</span></span><br><span class="line"><span class="comment">    &lt;result column=&quot;birthday&quot; property=&quot;user.birthday&quot;&gt;&lt;/result&gt;--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            property: 当前实体(order)中的属性名称(private User user)</span></span><br><span class="line"><span class="comment">            javaType: 当前实体(order)中的属性的类型(User)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT *,o.id oid FROM orders o,USER u WHERE o.uid=u.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h4><p><strong>模型：</strong></p>
<p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户</p>
<p>一对多查询的需求：查询一个用户，与此同时查询出该用户具有的订单</p>
<p><img src="https://pic.imgdb.cn/item/625ea0ba239250f7c5f3c48d.jpg"></p>
<p>对应的sql语句：<code>select *,o.id oid from user u left join orders o on u.id=o.uid;</code></p>
<p><strong>修改User实体</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//描述的是当前用户存在哪些订单</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>创建UserMapper接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line">    <span class="comment">//查询全部的方法</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Order&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置UserMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置集合信息</span></span><br><span class="line"><span class="comment">            property:集合名称</span></span><br><span class="line"><span class="comment">            ofType：当前集合中的数据类型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orderList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--封装order的数据--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ordertime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ordertime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT *,o.id oid FROM USER u,orders o WHERE u.id=o.uid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="多对多查询"><a href="#多对多查询" class="headerlink" title="多对多查询"></a>多对多查询</h4><p>用户表和角色表的关系为，一个用户有多个角色，一个角色被多个用户使用</p>
<p>多对多查询的需求：查询用户同时查询出该用户的所有角色</p>
<p><img src="https://pic.imgdb.cn/item/625ebc68239250f7c52e85d3.jpg"></p>
<p>对应的sql语句：<code>select u.*,r.*,r.id rid from user u left join user_role ur on u.id=ur.user_id inner join role r on ur.role_id=r.id;</code></p>
<p><strong>创建Role实体，修改User实体</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//描述的是当前用户存在哪些订单</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList;</span><br><span class="line">    <span class="comment">//代表当前用户具备哪些角色</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;Role&gt; roleList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String roleDesc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>添加UserMapper接口方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">findAllUserAndRole</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p><strong>配置UserMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userRoleMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--user的信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--user内部的roleList信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roleList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;role&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;roleId&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;roleName&quot;</span> <span class="attr">property</span>=<span class="string">&quot;roleName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;roleDesc&quot;</span> <span class="attr">property</span>=<span class="string">&quot;roleDesc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserAndRoleAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userRoleMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM USER u,sys_user_role ur,sys_role r WHERE u.id=ur.userId AND ur.roleId=r.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;sqlMapConfig.xml&quot;</span>);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; userAndRoleAll = mapper.findUserAndRoleAll();</span><br><span class="line">    <span class="keyword">for</span> (User user : userAndRoleAll) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="MyBatis注解开发"><a href="#MyBatis注解开发" class="headerlink" title="MyBatis注解开发"></a>MyBatis注解开发</h3><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><p>这几年来注解开发越来越流行，Mybatis也可以使用注解开发方式，这样我们就可以减少编写Mapper映射文件了。我们先围绕一些基本的CRUD来学习，再学习复杂映射多表操作。</p>
<ul>
<li><p><code>@Insert</code>：实现新增</p>
</li>
<li><p><code>@Update</code>：实现更新</p>
</li>
<li><p><code>@Delete</code>：实现删除</p>
</li>
<li><p><code>@Select</code>：实现查询</p>
</li>
<li><p><code>@Result</code>：实现结果集封装</p>
</li>
<li><p><code>@Results</code>：可以与<code>@Result</code> 一起使用，封装多个结果集</p>
</li>
<li><p><code>@One</code>：实现一对一结果集封装</p>
</li>
<li><p><code>@Many</code>：实现一对多结果集封装</p>
</li>
</ul>
<h4 id="增删改查操作"><a href="#增删改查操作" class="headerlink" title="增删改查操作"></a>增删改查操作</h4><p>UserMapper接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;birthday&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update user set username=#&#123;username&#125;,password=#&#123;password&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;sqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        mapper.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">18</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        mapper.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">        mapper.delete(<span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.findById(<span class="number">2</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; all = mapper.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : all) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改MyBatis的核心配置文件，我们使用了注解替代的映射文件，所以我们只需要加载使用了注解的Mapper接口即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--扫描使用注解的类--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.mapper.UserMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者指定扫描包含映射关系的接口所在的包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载映射关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定接口所在的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="复杂映射开发"><a href="#复杂映射开发" class="headerlink" title="复杂映射开发"></a>复杂映射开发</h4><p>实现复杂关系映射之前我们可以在映射文件中通过配置<code>&lt;resultMap&gt;</code>来实现，使用注解开发后，我们可以使用<code>@Results</code>注解，<code>@Result</code>注解，<code>@One</code>注解，<code>@Many</code>注解组合完成复杂关系的配置</p>
<p><img src="https://pic.imgdb.cn/item/625ec774239250f7c54b8641.jpg"></p>
<p><img src="https://pic.imgdb.cn/item/625ec78b239250f7c54bc182.jpg"></p>
<h4 id="一对一查询-1"><a href="#一对一查询-1" class="headerlink" title="一对一查询"></a>一对一查询</h4><h4 id="一对多查询-1"><a href="#一对多查询-1" class="headerlink" title="一对多查询"></a>一对多查询</h4><h4 id="多对多查询-1"><a href="#多对多查询-1" class="headerlink" title="多对多查询"></a>多对多查询</h4>]]></content>
      <categories>
        <category>SSM</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM06 —— MyBatis基础</title>
    <url>/2022/04/17/SSM06/</url>
    <content><![CDATA[<p>本文记录了MyBatis的基础知识，包括映射文件，增删改查操作，核心配置文件概述和基本的API介绍</p>
<span id="more"></span>

<h3 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h3><h4 id="原始JDBC操作的分析"><a href="#原始JDBC操作的分析" class="headerlink" title="原始JDBC操作的分析"></a>原始JDBC操作的分析</h4><p>查询：</p>
<p><img src="https://pic.imgdb.cn/item/625d8be7239250f7c50b0949.jpg"></p>
<p>插入：</p>
<p><img src="https://pic.imgdb.cn/item/625d8c4b239250f7c50bfac1.jpg"></p>
<p>原始JDBC开发存在的问题如下：</p>
<ul>
<li>数据库<strong>连接创建、释放频繁</strong>造成系统资源浪费从而影响系统性能</li>
<li>SQL 语句在代码中硬编码，造成代码不易维护，实际应用 SQL变化的可能较大，SQL变动需要改变java代码。</li>
<li>查询操作时，需要手动将结果集中的数据手动封装到实体中。插入操作时，需要手动将实体的数据设置到SQL语句的占位符位置</li>
</ul>
<p>应对上述问题给出的解决方案：</p>
<ul>
<li>使用数据库连接池初始化连接资源</li>
<li>将SQL语句抽取到xml配置文件中</li>
<li>使用反射、内省等底层技术，自动将实体与表进行属性与字段的自动映射</li>
</ul>
<h4 id="什么是MyBatis"><a href="#什么是MyBatis" class="headerlink" title="什么是MyBatis"></a>什么是MyBatis</h4><p><a href="http://www.mybatis.org/mybatis-3/">官网地址</a> </p>
<ul>
<li>mybatis 是一个优秀的基于java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。</li>
<li>mybatis通过xml或注解的方式将要执行的各种 statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句。</li>
<li>最后mybatis框架执行sql并将结果映射为java对象并返回。采用ORM思想解决了实体和数据库映射的问题，对jdbc 进行了封装，屏蔽了jdbc api 底层访问细节，使我们不用与jdbc api打交道，就可以完成对数据库的持久化操作。</li>
</ul>
<h3 id="MyBatis开发简单演示"><a href="#MyBatis开发简单演示" class="headerlink" title="MyBatis开发简单演示"></a>MyBatis开发简单演示</h3><p>MyBatis开发步骤：</p>
<ul>
<li><p>导入MyBatis的坐标和其他相关坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql驱动坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单元测试坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建user数据表</p>
<p>包含三个属性：<code>id int， username varchar(32), password varchar(32)</code></p>
</li>
<li><p>编写User实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//省略get set 以及 toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写映射文件UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;userMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写核心文件SqlMapConfig.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--通过properties标签加载外部properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--自定义别名，注意要写在前面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据源环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理器使用JDBC--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--加载映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/itheima/mapper/UserMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//查询操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获得核心配置文件</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;sqlMapConfig.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//获得session工厂对象</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">    <span class="comment">//获得session会话对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//执行操作  参数：namespace+id</span></span><br><span class="line">    List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;userMapper.findAll&quot;</span>);</span><br><span class="line">    <span class="comment">//打印数据</span></span><br><span class="line">    System.out.println(userList);</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="MyBatis的映射文件概述"><a href="#MyBatis的映射文件概述" class="headerlink" title="MyBatis的映射文件概述"></a>MyBatis的映射文件概述</h3><p><img src="https://pic.imgdb.cn/item/625da1f5239250f7c534030b.jpg"></p>
<h3 id="MyBatis的增删改查操作"><a href="#MyBatis的增删改查操作" class="headerlink" title="MyBatis的增删改查操作"></a>MyBatis的增删改查操作</h3><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><p>编写UserMapper映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;userMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--插入操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写插入实体User的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//模拟user对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUsername(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得核心配置文件</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;sqlMapConfig.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//获得session工厂对象</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">    <span class="comment">//获得session会话对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//执行操作  参数：namespace+id</span></span><br><span class="line">    sqlSession.insert(<span class="string">&quot;userMapper.save&quot;</span>,user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mybatis执行更新操作  提交事务</span></span><br><span class="line">    <span class="comment">//sqlSession.commit();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>插入操作注意问题</strong></p>
<ul>
<li>插入语句使用insert标签</li>
<li>在映射文件中使用parameterType属性指定要插入的数据类型</li>
<li>Sql语句中使用#{实体属性名}方式引用实体中的属性值</li>
<li>插入操作使用的API是<code>sqlSession.insert(“命名空间.id”,实体对象);</code></li>
<li>插入操作涉及数据库数据变化，所以要使用sqlSession对象显示的提交事务，即<code>sqlSession.commit()</code></li>
</ul>
<h4 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h4><p>编写UserMapper映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;userMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--修改操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">        update user set username=#&#123;username&#125;,password=#&#123;password&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写修改实体User的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//模拟user对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">7</span>);</span><br><span class="line">    user.setUsername(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得核心配置文件</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;sqlMapConfig.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//获得session工厂对象</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">    <span class="comment">//获得session会话对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//执行操作  参数：namespace+id</span></span><br><span class="line">    sqlSession.update(<span class="string">&quot;userMapper.update&quot;</span>,user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mybatis执行更新操作  提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>修改操作注意问题</strong></p>
<ul>
<li><p>修改语句使用update标签</p>
</li>
<li><p>修改操作使用的API是<code>sqlSession.update(“命名空间.id”,实体对象);</code></p>
</li>
</ul>
<h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><p>编写UserMapper映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;userMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--删除操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id=#&#123;abc&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写删除实体User的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获得核心配置文件</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;sqlMapConfig.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//获得session工厂对象</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">    <span class="comment">//获得session会话对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//执行操作  参数：namespace+id</span></span><br><span class="line">    sqlSession.delete(<span class="string">&quot;userMapper.delete&quot;</span>,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mybatis执行更新操作  提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>删除操作注意问题</strong></p>
<ul>
<li>删除语句使用delete标签</li>
<li>Sql语句中使用<code>#&#123;任意字符串&#125;</code>方式引用传递的单个参数</li>
<li>删除操作使用的API是<code>sqlSession.delete(“命名空间.id”,Object);</code></li>
</ul>
<h3 id="MyBatis的核心配置文件概述"><a href="#MyBatis的核心配置文件概述" class="headerlink" title="MyBatis的核心配置文件概述"></a>MyBatis的核心配置文件概述</h3><h4 id="MyBatis核心配置文件层级关系"><a href="#MyBatis核心配置文件层级关系" class="headerlink" title="MyBatis核心配置文件层级关系"></a>MyBatis核心配置文件层级关系</h4><img src="https://pic.imgdb.cn/item/625d9e4a239250f7c52ec15c.jpg" style="zoom:50%;" />

<h4 id="常用配置解析"><a href="#常用配置解析" class="headerlink" title="常用配置解析"></a>常用配置解析</h4><ul>
<li><p><strong>environments标签</strong></p>
<p>数据库环境的配置，支持多环境配置</p>
<img src="https://pic.imgdb.cn/item/625d9ef7239250f7c52fc5da.jpg" style="zoom: 50%;" />

<p>其中，事务管理器（transactionManager）类型有两种：</p>
<ul>
<li><p>JDBC：这个配置就是直接使用了JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。</p>
</li>
<li><p>MANAGED：这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如JEE 应用服务器的上下文）。 默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 closeConnection 属性设置为 false 来阻止它默认的关闭行为。</p>
</li>
</ul>
<p>其中，数据源（dataSource）类型有三种：</p>
<ul>
<li><p>UNPOOLED：这个数据源的实现只是每次被请求时打开和关闭连接。</p>
</li>
<li><p>POOLED：这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来。（池化思想）</p>
</li>
<li><p>JNDI：这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。</p>
</li>
</ul>
</li>
<li><p><strong>mapper标签</strong></p>
<p>该标签的作用是加载映射的，加载方式有如下几种：</p>
<ul>
<li><p>使用相对于类路径的资源引用，例如：<code>&lt;mapper resource=&quot;org/mybatis/builder/AuthorMapper.xml&quot;/&gt;</code></p>
</li>
<li><p>使用完全限定资源定位符（URL），例如：<code>&lt;mapper url=&quot;file:///var/mappers/AuthorMapper.xml&quot;/&gt;</code></p>
</li>
<li><p>使用映射器接口实现类的完全限定类名，例如：<code>&lt;mapper class=&quot;org.mybatis.builder.AuthorMapper&quot;/&gt;</code></p>
</li>
<li><p>将包内的映射器接口实现全部注册为映射器，例如：<code>&lt;package name=&quot;org.mybatis.builder&quot;/&gt;</code></p>
</li>
</ul>
</li>
<li><p><strong>Properties标签</strong></p>
<p>实际开发中，习惯将数据源的配置信息单独抽取成一个properties文件，该标签可以加载额外配置的properties文件</p>
<img src="https://pic.imgdb.cn/item/625da05d239250f7c531cb4f.jpg" style="zoom: 80%;" />
</li>
<li><p><strong>typeAliases标签</strong></p>
<p>类型别名是为Java 类型设置一个短的名字。原来的类型名称配置如下</p>
<img src="https://pic.imgdb.cn/item/625da0f3239250f7c532a6b7.jpg" style="zoom:80%;" />

<p>MyBatis框架已经为我们设置好的一些常用的类型的别名</p>
<img src="https://pic.imgdb.cn/item/625da137239250f7c53304f3.jpg" style="zoom: 80%;" /></li>
</ul>
<h3 id="MyBatis的相应API"><a href="#MyBatis的相应API" class="headerlink" title="MyBatis的相应API"></a>MyBatis的相应API</h3><p><strong>SqlSession工厂构建器SqlSessionFactoryBuilder</strong></p>
<p>常用API：<code>SqlSessionFactory build(InputStream inputStream)</code></p>
<p>通过加载mybatis的核心文件的输入流的形式构建一个SqlSessionFactory对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;org/mybatis/builder/mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(inputStream);</span><br></pre></td></tr></table></figure>

<p>其中， Resources 工具类，这个类在 org.apache.ibatis.io 包中。Resources 类帮助你从类路径下、文件系统或一个 web URL 中加载资源文件。</p>
<p><strong>SqlSession工厂对象SqlSessionFactory</strong></p>
<p>SqlSessionFactory 有多个个方法创建 SqlSession 实例。常用的有如下两个：</p>
<img src="https://pic.imgdb.cn/item/625da32c239250f7c535a68d.jpg" style="zoom:85%;" />

<p><strong>SqlSession会话对象</strong></p>
<p>SqlSession 实例在 MyBatis 中是非常强大的一个类。在这里你会看到所有执行语句、提交或回滚事务和获取映射器实例的方法。执行语句的方法主要有：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; T <span class="title function_">selectOne</span><span class="params">(String statement, Object parameter)</span> </span><br><span class="line">&lt;E&gt; List&lt;E&gt; <span class="title function_">selectList</span><span class="params">(String statement, Object parameter)</span> </span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(String statement, Object parameter)</span> </span><br><span class="line"><span class="type">int</span> <span class="title function_">update</span><span class="params">(String statement, Object parameter)</span> </span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(String statement, Object parameter)</span></span><br></pre></td></tr></table></figure>

<p>操作事务的方法主要有：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SSM</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM05 —— 事务控制</title>
    <url>/2022/04/17/SSM05/</url>
    <content><![CDATA[<p>本文记录了Spring的事务控制，包含编程式事务控制相关对象、基于XML的声明式事务控制和基于注解的声明式事务控制</p>
<span id="more"></span>

<h3 id="编程式事务控制三大对象"><a href="#编程式事务控制三大对象" class="headerlink" title="编程式事务控制三大对象"></a>编程式事务控制三大对象</h3><h4 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h4><p>PlatformTransactionManager 接口是 spring 的<strong>事务管理器</strong>，它里面提供了我们常用的操作事务的方法。</p>
<p><img src="https://pic.imgdb.cn/item/625b10df239250f7c5ca131c.jpg"></p>
<p>注意：<br>PlatformTransactionManager 是接口类型，不同的 Dao 层技术则有不同的实现类，例如：Dao 层技术是Jdbc 或 Mybatis 时：<code>org.springframework.jdbc.datasource.DataSourceTransactionManager</code><br>Dao 层技术是hibernate时：<code>org.springframework.orm.hibernate5.HibernateTransactionManager</code></p>
<h4 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h4><p>TransactionDefinition 是事务的定义信息对象，里面有如下方法：</p>
<p><img src="https://pic.imgdb.cn/item/625b1134239250f7c5ca683c.jpg"></p>
<p><strong>事务隔离级别</strong><br>设置隔离级别，可以解决事务并发产生的问题，如脏读、不可重复读和虚读。</p>
<ul>
<li>ISOLATION_DEFAULT</li>
<li>ISOLATION_READ_UNCOMMITTED</li>
<li>ISOLATION_READ_COMMITTED</li>
<li>ISOLATION_REPEATABLE_READ</li>
<li>ISOLATION_SERIALIZABLE</li>
</ul>
<p><strong>事务传播行为</strong></p>
<ul>
<li>REQUIRED：如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择（默认值）</li>
<li>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）</li>
<li>MANDATORY：使用当前的事务，如果当前没有事务，就抛出异常</li>
<li>REQUERS_NEW：新建事务，如果当前在事务中，把当前事务挂起。</li>
<li>NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</li>
<li>NEVER：以非事务方式运行，如果当前存在事务，抛出异常</li>
<li>NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行 REQUIRED 类似的操作</li>
<li>超时时间：默认值是-1，没有超时限制。如果有，以秒为单位进行设置</li>
<li>是否只读：建议查询时设置为只读</li>
</ul>
<h4 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h4><p>TransactionStatus 接口提供的是事务具体的运行状态，方法介绍如下：</p>
<p><img src="https://pic.imgdb.cn/item/625b1201239250f7c5cb339b.jpg"></p>
<h3 id="基于XML的声明式事务控制"><a href="#基于XML的声明式事务控制" class="headerlink" title="基于XML的声明式事务控制"></a>基于XML的声明式事务控制</h3><p><strong>什么是声明式事务控制</strong></p>
<p>Spring 的声明式事务顾名思义就是采用声明的方式来处理事务。这里所说的声明，就是<strong>指在配置文件中声明</strong>，用在 Spring 配置文件中声明式的处理事务来代替代码式的处理事务。</p>
<p><strong>声明式事务处理的作用</strong></p>
<ul>
<li><strong>事务管理不侵入开发的组件</strong>。具体来说，业务逻辑对象就不会意识到正在事务管理之中，事实上也应该如此，因为事务管理是属于系统层面的服务，而不是业务逻辑的一部分，如果想要改变事务管理策划的话，也只需要在定义文件中重新配置即可。</li>
<li>在不需要事务管理的时候，只要在设定文件上修改一下，即可移去事务管理服务，无需改变代码重新编译，这样维护起来极其方便</li>
</ul>
<p><strong>注意</strong>：Spring 声明式事务控制底层就是AOP。</p>
<h4 id="声明式事务控制的实现"><a href="#声明式事务控制的实现" class="headerlink" title="声明式事务控制的实现"></a>声明式事务控制的实现</h4><p>声明式事务控制明确事项：</p>
<p>（1）谁是切点？</p>
<p>（2）谁是通知？</p>
<p>（3）配置切面？</p>
<ul>
<li><p>引入tx命名空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置事务增强</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置平台事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--通知  事务的增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置事务的属性信息的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transfer&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;save&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置事务 AOP 织入（Spring为事务增强专门有一个advisor）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务的aop织入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.itheima.service.impl.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试事务控制转账业务代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String outMan, String inMan, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">    accountDao.out(outMan,money);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    accountDao.in(inMan,money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="切点方法的事务参数的配置"><a href="#切点方法的事务参数的配置" class="headerlink" title="切点方法的事务参数的配置"></a>切点方法的事务参数的配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通知  事务的增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置事务的属性信息的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transfer&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中，<code>&lt;tx:method&gt;</code> 代表切点方法的事务参数的配置，例如：<br><code>&lt;tx:method name=&quot;transfer&quot; isolation=&quot;REPEATABLE_READ&quot; propagation=&quot;REQUIRED&quot; timeout=&quot;-1&quot; read-only=&quot;false&quot;/&gt;</code></p>
<ul>
<li>name：切点方法名称</li>
<li>isolation:事务的隔离级别</li>
<li>propagation：事务的传播行为</li>
<li>timeout：超时时间</li>
<li>read-only：是否只读</li>
</ul>
<h3 id="基于注解的声明式事务控制"><a href="#基于注解的声明式事务控制" class="headerlink" title="基于注解的声明式事务控制"></a>基于注解的声明式事务控制</h3><ul>
<li><p>编写AccountDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;accountDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">(String outMan, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update account set money=money-? where name=?&quot;</span>,money,outMan);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">(String inMan, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update account set money=money+? where name=?&quot;</span>,money,inMan);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写AccountService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.REPEATABLE_READ)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED,propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String outMan, String inMan, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">        accountDao.out(outMan,money);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.in(inMan,money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Transactional(isolation = Isolation.DEFAULT)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">xxx</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写applicationContext.xml配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--之前省略datsSource、jdbcTemplate、平台事务管理器的配置--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事物的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>解析</p>
<ul>
<li>使用 <code>@Transactional</code> 在需要进行事务控制的类或是方法上修饰，注解可用的属性同 xml 配置方式，例如隔离级别、传播行为等。</li>
<li>注解使用在类上，那么该类下的所有方法都使用同一套注解参数配置。</li>
<li>使用在方法上，不同的方法可以采用不同的事务参数配置。</li>
<li>Xml配置文件中要开启事务的注解驱动<code>&lt;tx:annotation-driven /&gt;</code></li>
</ul>
<p><strong>注解声明式事务控制的配置要点</strong></p>
<ul>
<li>平台事务管理器配置（xml方式）</li>
<li>事务通知的配置（<code>@Transactional</code>注解配置）</li>
<li>事务注解驱动的配置 <code>&lt;tx:annotation-driven/&gt;</code></li>
</ul>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM04 —— AOP</title>
    <url>/2022/04/16/SSM04/</url>
    <content><![CDATA[<p>本文记录了AOP编程的基本概念和在java开发中的底层实现，对动态代理技术作了介绍和演示</p>
<span id="more"></span>

<h3 id="Spring的AOP简介"><a href="#Spring的AOP简介" class="headerlink" title="Spring的AOP简介"></a>Spring的AOP简介</h3><h4 id="AOP及其作用和优势"><a href="#AOP及其作用和优势" class="headerlink" title="AOP及其作用和优势"></a>AOP及其作用和优势</h4><p><strong>AOP</strong> 为 <strong>A</strong>spect <strong>O</strong>riented <strong>P</strong>rogramming 的缩写，意思为<strong>面向切面编程</strong>，是通过预编译方式和<strong>运行期动态代理</strong>实现程序功能的统一维护的一种技术。<br>AOP 是 OOP 的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>
<p>代码耦合度的三个层面：</p>
<p>（1）重复书写代码。（耦合度最高，想要修改要在每一部分上都要修改）</p>
<p>（2）单独书写重复部分，通过引用的方式使用。（紧耦合）</p>
<p>（3）AOP（松耦合，分隔每一部分的功能，通过配置的方式串联各个部分）</p>
<p>AOP作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强</p>
<p>AOP优势：减少重复代码，提高开发效率，并且便于维护</p>
<h4 id="AOP的底层实现"><a href="#AOP的底层实现" class="headerlink" title="AOP的底层实现"></a>AOP的底层实现</h4><p>实际上，AOP 的底层是通过 Spring 提供的的动态代理技术实现的。在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成功能的增强。</p>
<p><strong>AOP的动态代理技术</strong></p>
<p>常用的动态代理技术</p>
<ul>
<li>JDK 代理 : 基于接口的动态代理技术</li>
<li>cglib 代理：基于父类的动态代理技术</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/625abf7d239250f7c532bafd.jpg"></p>
<p><strong>JDK的动态代理</strong></p>
<ul>
<li><p>目标类接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>目标类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save running.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>动态代理代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Advice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置增强....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目标对象</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//增强对象</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">Advice</span> <span class="variable">advice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Advice</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值 就是动态生成的代理对象</span></span><br><span class="line"><span class="type">TargetInterface</span> <span class="variable">proxy</span> <span class="operator">=</span> (TargetInterface) Proxy.newProxyInstance(</span><br><span class="line">    target.getClass().getClassLoader(), <span class="comment">//目标对象类加载器</span></span><br><span class="line">    target.getClass().getInterfaces(), <span class="comment">//目标对象相同的接口字节码对象数组</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">        <span class="comment">//调用代理对象的任何方法  实质执行的都是invoke方法</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            advice.before(); <span class="comment">//前置增强</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(target, args);<span class="comment">//执行目标方法</span></span><br><span class="line">            advice.afterReturning(); <span class="comment">//后置增强</span></span><br><span class="line">            <span class="keyword">return</span> invoke;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用代理对象的方法测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用代理对象的方法</span></span><br><span class="line">proxy.save();</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>cglib的动态代理</strong></p>
<ul>
<li><p>目标类(不需要接口)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save running.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>动态代理代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Advice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置增强....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//目标对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//增强对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Advice</span> <span class="variable">advice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Advice</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回值 就是动态生成的代理对象  基于cglib</span></span><br><span class="line">        <span class="comment">//1、创建增强器</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        <span class="comment">//2、设置父类（目标）</span></span><br><span class="line">        enhancer.setSuperclass(Target.class);</span><br><span class="line">        <span class="comment">//3、设置回调</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                advice.before(); <span class="comment">//执行前置</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(target, args);<span class="comment">//执行目标</span></span><br><span class="line">                advice.afterReturning(); <span class="comment">//执行后置</span></span><br><span class="line">                <span class="keyword">return</span> invoke;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//4、创建代理对象</span></span><br><span class="line">        <span class="type">Target</span> <span class="variable">proxy</span> <span class="operator">=</span> (Target) enhancer.create();</span><br><span class="line">        proxy.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用代理对象的方法测试</p>
</li>
</ul>
<h4 id="AOP相关概念"><a href="#AOP相关概念" class="headerlink" title="AOP相关概念"></a>AOP相关概念</h4><p>Spring 的 AOP 实现底层就是对上面的动态代理的代码进行了封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式完成指定目标的方法增强。</p>
<p>在正式讲解 AOP 的操作之前，我们必须理解 AOP 的相关术语，常用的术语如下：</p>
<ul>
<li>Target（目标对象）：代理的目标对象</li>
<li>Proxy （代理）：一个类被 AOP 织入增强后，就产生一个结果代理类</li>
<li>Joinpoint（连接点）：所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法，因为spring只支持方法类型的连接点（可以被增强的方法叫做连接点）</li>
<li><strong>Pointcut（切入点</strong>）：所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义（真正要被增强的方法）</li>
<li><strong>Advice（通知&#x2F; 增强）</strong>：所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知</li>
<li><strong>Aspect（切面）</strong>：是切入点和通知（引介）的结合</li>
<li><strong>Weaving（织入）</strong>：是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入</li>
</ul>
<h4 id="AOP开发明确的事项"><a href="#AOP开发明确的事项" class="headerlink" title="AOP开发明确的事项"></a>AOP开发明确的事项</h4><p><strong>需要编写的内容</strong></p>
<ul>
<li>编写核心业务代码（目标类的目标方法）</li>
<li>编写切面类，切面类中有通知(增强功能方法) </li>
<li>在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结合</li>
</ul>
<p><strong>AOP 技术实现的内容</strong><br>Spring 框架监控切入点方法的执行。<strong>一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行</strong>。</p>
<p><strong>AOP 底层使用哪种代理方式</strong><br>在 Spring 中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</p>
<h3 id="基于XML的AOP开发"><a href="#基于XML的AOP开发" class="headerlink" title="基于XML的AOP开发"></a>基于XML的AOP开发</h3><h4 id="快速入门（基础步骤）"><a href="#快速入门（基础步骤）" class="headerlink" title="快速入门（基础步骤）"></a>快速入门（基础步骤）</h4><ul>
<li><p>导入 AOP 相关坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入spring的context坐标，context依赖aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- aspectj的织入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建目标接口和目标类（内部有切点）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save running.....&quot;</span>);</span><br><span class="line">        <span class="comment">//int i = 1/0;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建切面类（内部有增强方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强..........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置增强..........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Proceeding JoinPoint:  正在执行的连接点===切点</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前增强....&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> pjp.proceed();<span class="comment">//切点方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后增强....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常抛出增强..........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终增强..........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将目标类和切面类的对象创建权交给 spring</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--目标对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;target&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.aop.Target&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--切面对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.aop.MyAspect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>applicationContext.xml</code> 中配置织入关系</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;切面类&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;通知方法名称&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;切点表达式&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--目标对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;target&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.aop.Target&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--切面对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.aop.MyAspect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置织入：告诉spring框架 哪些方法(切点)需要进行哪些增强(前置、后置...)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--声明切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--抽取切点表达式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.itheima.aop.*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--切面：切点+通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public void com.itheima.aop.Target.save())&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;aop:before method=&quot;before&quot; pointcut=&quot;execution(* com.itheima.aop.*.*(..))&quot;/&gt;</span></span><br><span class="line"><span class="comment">            &lt;aop:after-returning method=&quot;afterReturning&quot; pointcut=&quot;execution(* com.itheima.aop.*.*(..))&quot;/&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;aop:around method=&quot;around&quot; pointcut=&quot;execution(* com.itheima.aop.*.*(..))&quot;/&gt;</span></span><br><span class="line"><span class="comment">            &lt;aop:after-throwing method=&quot;afterThrowing&quot; pointcut=&quot;execution(* com.itheima.aop.*.*(..))&quot;/&gt;</span></span><br><span class="line"><span class="comment">            &lt;aop:after method=&quot;after&quot; pointcut=&quot;execution(* com.itheima.aop.*.*(..))&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TargetInterface target;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        target.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="XML配置AOP详解"><a href="#XML配置AOP详解" class="headerlink" title="XML配置AOP详解"></a>XML配置AOP详解</h4><p><strong>切点表达式的写法</strong></p>
<p>表达式语法：</p>
<p><code>execution([修饰符] 返回值类型 包名.类名.方法名(参数))</code></p>
<ul>
<li>访问修饰符可以省略</li>
<li>返回值类型、包名、类名、方法名可以使用星号<code>*</code> 代表任意</li>
<li>包名与类名之间一个点 <code>.</code> 代表当前包下的类，两个点 <code>..</code> 表示当前包及其子包下的类</li>
<li>参数列表可以使用两个点 <code>..</code> 表示任意个数，任意类型的参数列表</li>
</ul>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--execution([修饰符] 返回值类型 包名.类名.方法名(参数))--&gt;</span></span><br><span class="line">execution(public void com.itheima.aop.Target.method())</span><br><span class="line">execution(void com.itheima.aop.Target.*(..))</span><br><span class="line">execution(* com.itheima.aop.*.*(..))</span><br><span class="line">execution(* com.itheima.aop..*.*(..))</span><br><span class="line">execution(* *..*.*(..))</span><br></pre></td></tr></table></figure>



<p><strong>通知的类型</strong></p>
<p>通知的配置语法：</p>
<p><code>&lt;aop:通知类型 method=“切面类中方法名” pointcut=“切点表达式&quot;&gt;&lt;/aop:通知类型&gt;</code></p>
<p>通知的类型：前置通知、后置通知、环绕通知（应用：记录方法所用时间）、异常抛出通知、最终通知</p>
<img src="https://pic.imgdb.cn/item/625b018c239250f7c5b788f2.jpg" style="zoom:55%;" />

<p><strong>切点表达式的抽取</strong></p>
<p>当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用 pointcut-ref 属性代替 pointcut 属性来引用抽取后的切点表达式。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--抽取切点表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.itheima.aop.*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切面：切点+通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;around&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="基于注解的AOP开发"><a href="#基于注解的AOP开发" class="headerlink" title="基于注解的AOP开发"></a>基于注解的AOP开发</h3><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><p>基于注解的aop开发步骤：</p>
<ul>
<li><p>创建目标接口和目标类（内部有切点）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save running.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建切面类（内部有增强方法）</p>
</li>
<li><p>将目标类和切面类的对象创建权交给 spring（<code>@component(&quot;xxx&quot;)</code>）</p>
</li>
<li><p>在切面类中使用注解配置织入关系（<code>@aspect</code>，<code>@Before</code>，<code>@Around</code>…）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;myAspect&quot;)</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//标注当前MyAspect是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置前置通知</span></span><br><span class="line">    <span class="comment">//@Before(&quot;execution(* com.itheima.anno.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强..........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置增强..........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Proceeding JoinPoint:  正在执行的连接点===切点</span></span><br><span class="line">    <span class="comment">//@Around(&quot;execution(* com.itheima.anno.*.*(..))&quot;)</span></span><br><span class="line">    <span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前增强....&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> pjp.proceed();<span class="comment">//切点方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后增强....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常抛出增强..........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@After(&quot;execution(* com.itheima.anno.*.*(..))&quot;)</span></span><br><span class="line">    <span class="meta">@After(&quot;MyAspect.pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终增强..........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义切点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.anno.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置文件中<strong>开启组件扫描和 AOP 的自动代理</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima.anno&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--aop自动代理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext-anno.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnoTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TargetInterface target;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        target.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="注解配置AOP详解"><a href="#注解配置AOP详解" class="headerlink" title="注解配置AOP详解"></a>注解配置AOP详解</h4><p><strong>注解通知的类型</strong></p>
<p>通知的配置语法：<code>@通知注解(“切点表达式&quot;)</code></p>
<p><img src="https://pic.imgdb.cn/item/625b0d63239250f7c5c6694f.jpg"></p>
<p><strong>切点表达式的抽取</strong></p>
<p>同 xml 配置 aop 一样，我们可以将切点表达式抽取。抽取方式是在切面内定义方法，在该方法上使用<code>@Pointcut</code>注解定义切点表达式，然后在在增强注解中进行引用。具体如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;myAspect&quot;)</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//标注当前MyAspect是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="comment">//Proceeding JoinPoint:  正在执行的连接点===切点</span></span><br><span class="line">    <span class="comment">//@Around(&quot;execution(* com.itheima.anno.*.*(..))&quot;)</span></span><br><span class="line">    <span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前增强....&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> pjp.proceed();<span class="comment">//切点方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后增强....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@After(&quot;execution(* com.itheima.anno.*.*(..))&quot;)</span></span><br><span class="line">    <span class="meta">@After(&quot;MyAspect.pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终增强..........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义切点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.anno.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM04 —— Interceptor</title>
    <url>/2022/04/16/Interceptor/</url>
    <content><![CDATA[<p>本文记录了SpringMVC拦截器的相关概念和简单使用方法</p>
<span id="more"></span>

<h3 id="拦截器（interceptor）的作用"><a href="#拦截器（interceptor）的作用" class="headerlink" title="拦截器（interceptor）的作用"></a>拦截器（interceptor）的作用</h3><p>Spring MVC 的拦截器类似于 Servlet 开发中的过滤器 Filter，用于对处理器进行<strong>预处理</strong>和<strong>后处理</strong>。</p>
<p>将拦截器按一定的顺序联结成一条链，这条链称为拦截器链（Interceptor Chain）。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。拦截器也是AOP思想的具体实现。</p>
<h3 id="拦截器和过滤器的区别"><a href="#拦截器和过滤器的区别" class="headerlink" title="拦截器和过滤器的区别"></a>拦截器和过滤器的区别</h3><p><img src="https://pic.imgdb.cn/item/625a7abb239250f7c5b1a25f.jpg"></p>
<h3 id="拦截器简单使用"><a href="#拦截器简单使用" class="headerlink" title="拦截器简单使用"></a>拦截器简单使用</h3><p>自定义拦截器很简单，只有如下三步：</p>
<ul>
<li><p>创建拦截器类实现<code>HandlerInterceptor</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">//在目标方法执行之前 执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle.....&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;param&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;yes&quot;</span>.equals(param))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/error.jsp&quot;</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//返回true代表放行  返回false代表不放行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在目标方法执行之后 视图对象返回之前执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> &#123;</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在流程都执行完毕后 执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置拦截器（spring-mvc.xml）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--对哪些资源执行拦截操作--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.interceptor.MyInterceptor1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试拦截器的拦截效果</p>
</li>
</ul>
<p><strong>多拦截器操作</strong></p>
<p>拦截的顺序与在配置文件（spring-mvc.xml）中配置的顺序有关</p>
<h3 id="拦截器方法说明"><a href="#拦截器方法说明" class="headerlink" title="拦截器方法说明"></a>拦截器方法说明</h3><img src="https://pic.imgdb.cn/item/625a7b7f239250f7c5b32054.jpg" style="zoom: 50%;" />
]]></content>
      <categories>
        <category>SSM</category>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM03 —— 集成Web,SpringMVC</title>
    <url>/2022/04/15/SSM03/</url>
    <content><![CDATA[<p>概述：本文记录了Spring与Web环境的集成与SpringMVC的简介和组件解析</p>
<span id="more"></span>

<h3 id="Spring集成Web环境"><a href="#Spring集成Web环境" class="headerlink" title="Spring集成Web环境"></a>Spring集成Web环境</h3><h4 id="ApplicationContext应用上下文获取方式"><a href="#ApplicationContext应用上下文获取方式" class="headerlink" title="ApplicationContext应用上下文获取方式"></a>ApplicationContext应用上下文获取方式</h4><p>应用上下文对象是通过<code>new ClasspathXmlApplicationContext(spring配置文件)</code> 方式获取的，但是每次从容器中获得Bean时都要编写<code>new ClasspathXmlApplicationContext(spring配置文件)</code> ，这样的弊端是配置文件加载多次，应用上下文对象创建多次。</p>
<p>在Web项目中，可以使用<code>ServletContextListener</code>监听Web应用的启动，我们可以在Web应用启动时，就加载Spring的配置文件，创建应用上下文对象<code>ApplicationContext</code>，在将其存储到最大的域<code>servletContext</code>域中，这样就可以在任意位置从域中获得应用上下文<code>ApplicationContext</code>对象了。</p>
<h4 id="Spring提供获取应用上下文的工具"><a href="#Spring提供获取应用上下文的工具" class="headerlink" title="Spring提供获取应用上下文的工具"></a>Spring提供获取应用上下文的工具</h4><p>上面的分析不用手动实现，Spring提供了一个监听器<code>ContextLoaderListener</code>就是对上述功能的封装，该监听器内部加载Spring配置文件，创建应用上下文对象，并存储到<code>ServletContext</code>域中，提供了一个客户端工具<code>WebApplicationContextUtils</code>供使用者获得应用上下文对象。<br>所以我们需要做的只有两件事：</p>
<ul>
<li><strong>在web.xml中配置ContextLoaderListener监听器（导入spring-web坐标）</strong></li>
<li><strong>使用WebApplicationContextUtils获得应用上下文对象ApplicationContext</strong></li>
</ul>
<h4 id="导入Spring集成Web的坐标"><a href="#导入Spring集成Web的坐标" class="headerlink" title="导入Spring集成Web的坐标"></a>导入Spring集成Web的坐标</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置ContextLoaderListener监听器"><a href="#配置ContextLoaderListener监听器" class="headerlink" title="配置ContextLoaderListener监听器"></a>配置ContextLoaderListener监听器</h4><p>web.xml中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--全局参数--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Spring的监听器--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">        org.springframework.web.context.ContextLoaderListener</span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="通过工具获得应用上下文对象"><a href="#通过工具获得应用上下文对象" class="headerlink" title="通过工具获得应用上下文对象"></a>通过工具获得应用上下文对象</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> WebApplicationContextUtils.getWebApplicationContext(servletContext);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="SpringMVC简介"><a href="#SpringMVC简介" class="headerlink" title="SpringMVC简介"></a>SpringMVC简介</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>SpringMVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架，属于SpringFrameWork 的后续产品，已经融合在 Spring Web Flow 中。</p>
<p>SpringMVC 已经成为目前最主流的MVC框架之一，并且随着Spring3.0 的发布，全面超越 Struts2，成为最优秀的 MVC 框架。它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现任何接口。同时它还支持 RESTful 编程风格的请求。</p>
<h4 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h4><p>需求：客户端发起请求，服务器端接收请求，执行逻辑并进行视图跳转</p>
<p><img src="https://pic.imgdb.cn/item/6259237a239250f7c59923d8.jpg"></p>
<p>步骤：</p>
<ul>
<li><p>导入SpringMVC相关坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring坐标--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SpringMVC坐标--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Servlet坐标--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Jsp坐标--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置SpringMVC核心控制器DispathcerServlet (web.xml中)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置SpringMVC的前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Controller类和视图页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Controller save running....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>视图页面xxx.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Success!&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>


</li>
<li><p>使用注解配置Controller类中业务方法的映射地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求地址  http://localhost:8080/user/quick</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/quick&quot;,method = RequestMethod.GET,params = &#123;&quot;username&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Controller save running....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置SpringMVC核心文件 spring-mvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.alibaba.com/schema/stat&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.alibaba.com/schema/stat http://www.alibaba.com/schema/stat.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Controller的组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置内部资源视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  /jsp/success.jsp  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/jsp/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>客户端发起请求测试</p>
</li>
</ul>
<h4 id="SpringMVC流程图示"><a href="#SpringMVC流程图示" class="headerlink" title="SpringMVC流程图示"></a>SpringMVC流程图示</h4><p><img src="https://pic.imgdb.cn/item/6259286d239250f7c5a24ad3.jpg"></p>
<h3 id="SpringMVC组件解析"><a href="#SpringMVC组件解析" class="headerlink" title="SpringMVC组件解析"></a>SpringMVC组件解析</h3><h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><p><img src="https://pic.imgdb.cn/item/625928bf239250f7c5a2fd19.jpg"></p>
<ol>
<li>用户发送请求至前端控制器DispatcherServlet。</li>
<li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li>
<li>处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。 </li>
<li>DispatcherServlet调用HandlerAdapter处理器适配器。</li>
<li>HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。 </li>
<li>Controller执行完成返回ModelAndView。 </li>
<li>HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</li>
<li>DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</li>
<li>ViewReslover解析后返回具体View。 </li>
<li>DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。DispatcherServlet响应用户。</li>
</ol>
<h4 id="SpringMVC组件解析-1"><a href="#SpringMVC组件解析-1" class="headerlink" title="SpringMVC组件解析"></a>SpringMVC组件解析</h4><ol>
<li><strong>前端控制器：DispatcherServlet</strong></li>
</ol>
<p>  用户请求到达前端控制器，它就相当于 MVC 模式中的 C，DispatcherServlet 是整个流程控制的中心，由它调用其它组件处理用户的请求，DispatcherServlet 的存在降低了组件之间的耦合性。</p>
<ol start="2">
<li><strong>处理器映射器：HandlerMapping</strong></li>
</ol>
<p>  HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p>
<ol start="3">
<li><strong>处理器适配器：HandlerAdapter</strong></li>
</ol>
<p>  通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p>
<ol start="4">
<li><strong>处理器：Handler</strong></li>
</ol>
<p>  它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由Handler 对具体的用户请求进行处理。</p>
<ol start="5">
<li><p><strong>视图解析器：View Resolver</strong><br> View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名，即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。</p>
</li>
<li><p><strong>视图：View</strong><br> SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView等。最常用的视图就是 jsp。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面</p>
</li>
</ol>
<h4 id="SpringMVC注解解析"><a href="#SpringMVC注解解析" class="headerlink" title="SpringMVC注解解析"></a>SpringMVC注解解析</h4><p><code>@RequestMapping</code><br>作用：用于建立请求 URL 和处理请求方法之间的对应关系<br>位置：</p>
<ul>
<li><p>类上，请求URL 的第一级访问目录。此处不写的话，就相当于应用的根目录</p>
</li>
<li><p>方法上，请求 URL 的第二级访问目录，与类上的使用@ReqquestMapping标注的一级目录一起组成访问虚拟路径</p>
</li>
<li><p>属性：</p>
<ul>
<li><code>value</code>：用于指定请求的URL。它和path属性的作用是一样的</li>
<li><code>method</code>：用于指定请求的方式</li>
<li><code>params</code>：用于指定限制请求参数的条件。它支持简单的表达式。要求请求参数的key和value必须和配置的一模一样</li>
</ul>
<p>例如：</p>
<ul>
<li><code>params = &#123;&quot;accountName&quot;&#125;</code>，表示请求参数必须有accountName</li>
<li><code>params = &#123;&quot;moeny!100&quot;&#125;</code>，表示请求参数中money不能是100</li>
</ul>
</li>
</ul>
<ol>
<li><p>mvc命名空间引入</p>
<p>命名空间：</p>
<p><code>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</code><br><code>xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</code><br>约束地址：</p>
<p><code>http://www.springframework.org/schema/context</code><br><code>http://www.springframework.org/schema/context/spring-context.xsd</code><br><code>http://www.springframework.org/schema/mvc</code><br><code>http://www.springframework.org/schema/mvc/spring-mvc.xsd</code></p>
</li>
<li><p><strong>组件扫描</strong></p>
<p>SpringMVC基于Spring容器，所以在进行SpringMVC操作时，需要将Controller存储到Spring容器中，如果使用<code>@Controller</code>注解标注的话，就需要使用<code>&lt;context:component-scan base-package=&quot;com.itheima.controller&quot;/&gt;</code>进行组件扫描。</p>
</li>
</ol>
<h4 id="SpringMVC的XML配置解析"><a href="#SpringMVC的XML配置解析" class="headerlink" title="SpringMVC的XML配置解析"></a>SpringMVC的XML配置解析</h4><p><strong>视图解析器</strong><br>SpringMVC有默认组件配置，默认组件都是<code>DispatcherServlet.properties</code>配置文件中配置的，该配置文件地址<code>org/springframework/web/servlet/DispatcherServlet.properties</code>，该文件中配置了默认的视图解析器，如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">org.springframework.web.servlet.ViewResolver</span>=<span class="string">org.springframework.web.servlet.view.InternalResourceViewResolver</span></span><br></pre></td></tr></table></figure>

<p>翻看该解析器源码，可以看到该解析器的默认设置，如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REDIRECT_URL_PREFIX = &quot;redirect:&quot; --重定向前缀</span><br><span class="line">FORWARD_URL_PREFIX = &quot;forward:&quot; --转发前缀（默认值）</span><br><span class="line">prefix = &quot;&quot;; --视图名称前缀</span><br><span class="line">suffix = &quot;&quot;; --视图名称后缀</span><br></pre></td></tr></table></figure>

<p>我们可以通过属性注入的方式修改视图的的前后缀</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置内部资源视图解析器--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="SpringMVC的数据响应"><a href="#SpringMVC的数据响应" class="headerlink" title="SpringMVC的数据响应"></a>SpringMVC的数据响应</h3><h4 id="数据响应方式1：页面跳转"><a href="#数据响应方式1：页面跳转" class="headerlink" title="数据响应方式1：页面跳转"></a>数据响应方式1：页面跳转</h4><ul>
<li><p><strong>直接返回字符串</strong></p>
<p>此种方式会将返回的字符串与视图解析器的前后缀拼接后跳转</p>
<img src="https://pic.imgdb.cn/item/62596ab9239250f7c51f10d4.jpg" style="zoom:80%;" />

<p>返回带有前缀的字符串：</p>
<p>转发：<code>forward:/WEB-INF/views/index.jsp</code></p>
<p>重定向：<code>redirect:/index.jsp</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原始的形式</span></span><br><span class="line"><span class="comment">// 请求地址  http://localhost:8080/user/quick</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Controller save running....&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;<span class="comment">//这里返回的字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>通过ModelAndView对象返回</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">save2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Model:模型 作用封装数据</span></span><br><span class="line"><span class="comment">        View：视图 作用展示数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">//设置模型数据</span></span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">save3</span><span class="params">(ModelAndView modelAndView)</span>&#123;</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save4</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;博学谷&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>向request域存储数据</strong></p>
<p>在进行转发时，往往要向request域中存储数据，在jsp页面中显示，那么Controller中怎样向request域中存储数据呢？</p>
<p>（1）通过SpringMVC框架注入的request对象<code>setAttribute()</code>方法设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save5</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;酷丁鱼&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）通过ModelAndView的<code>addObject()</code>方法设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">save3</span><span class="params">(ModelAndView modelAndView)</span>&#123;</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="数据响应方式2：回写数据"><a href="#数据响应方式2：回写数据" class="headerlink" title="数据响应方式2：回写数据"></a>数据响应方式2：回写数据</h4><ul>
<li><p><strong>直接返回字符串</strong></p>
<p>Web基础阶段，客户端访问服务器端，如果想直接回写字符串作为响应体返回的话，只需要使用<code>response.getWriter().print(“hello world”)</code> 即可，那么在Controller中想直接回写字符串该怎样呢？<br>（1） 通过SpringMVC框架注入的response对象，使用<code>response.getWriter().print(“hello world”)</code> 回写数据，此时不需要视图跳转，业务方法返回值为void。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save6</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    response.getWriter().print(<span class="string">&quot;hello itcast&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）将需要回写的字符串直接返回，但此时需要通过<code>@ResponseBody</code>注解告知SpringMVC框架，方法返回的字符串不是跳转是直接在http响应体中返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意跟直接返回字符串的原始字符串很像，但是多了@ResponseBody注解</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick7&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span>  <span class="comment">//告知SpringMVC框架 不进行视图跳转 直接进行数据响应</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save7</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello itheima&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在异步项目中，客户端与服务器端往往要进行json格式字符串交互，此时我们可以手动拼接json字符串返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick8&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save8</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;\&quot;username\&quot;:\&quot;zhangsan\&quot;,\&quot;age\&quot;:18&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述方式手动拼接json格式字符串的方式很麻烦，开发中往往要将复杂的java对象转换成json格式的字符串，我们可以使用web阶段学习过的json转换工具jackson进行转换，导入jackson坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过jackson转换json字符串，回写字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick9&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save9</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUsername(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">30</span>);</span><br><span class="line">    <span class="comment">//使用json的转换工具将对象转换成json格式字符串在返回</span></span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(user);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>返回对象或集合</strong></p>
<p>通过SpringMVC帮助我们对对象或集合进行json字符串的转换并回写，为处理器适配器配置消息转换参数，指定使用jackson进行对象或集合的转换，因此需要在spring-mvc.xml中进行如下配置：</p>
<p>（spring-mvc.xml）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;messageConverters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick10&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">//期望SpringMVC自动将User转换成json格式的字符串</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">save10</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUsername(<span class="string">&quot;lisi2&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在方法上添加<code>@ResponseBody</code>就可以返回json格式的字符串，但是这样配置比较麻烦，配置的代码比较多，因此，我们可以使用mvc的注解驱动代替上述配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mvc的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 SpringMVC 的各个组件中，<strong>处理器映射器、处理器适配器、视图解析器称</strong>为 SpringMVC 的三大组件。</p>
<p>使用<code>&lt;mvc:annotation-driven&gt;</code>自动加载 <code>RequestMappingHandlerMapping</code>（处理映射器）和<code>RequestMappingHandlerAdapter</code>（处理适配器），可用在Spring-xml.xml配置文件中使用<code>&lt;mvc:annotation-driven&gt;</code>替代注解处理器和适配器的配置。同时使用<code>&lt;mvc:annotation-driven&gt;</code>默认底层就会集成jackson进行对象或集合的json格式字符串的转换</p>
</li>
</ul>
<h4 id="SpringMVC获得请求数据"><a href="#SpringMVC获得请求数据" class="headerlink" title="SpringMVC获得请求数据"></a>SpringMVC获得请求数据</h4><h4 id="获得请求参数"><a href="#获得请求参数" class="headerlink" title="获得请求参数"></a>获得请求参数</h4><p>客户端请求参数的格式是：<code>name=value&amp;name=value… …</code></p>
<p>服务器端要获得请求的参数，有时还需要进行数据的封装，SpringMVC可以接收如下类型的参数：</p>
<ul>
<li>基本类型参数</li>
<li>POJO类型参数</li>
<li>数组类型参数</li>
<li>集合类型参数</li>
</ul>
<h4 id="获得基本类型参数"><a href="#获得基本类型参数" class="headerlink" title="获得基本类型参数"></a>获得基本类型参数</h4><p>Controller中的业务方法的参数名称要与请求参数的name一致，参数值会自动映射匹配。</p>
<p><code>http://localhost:8080/itheima_spring_mvc/user/quick11?username=zhangsan&amp;age=12</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick11&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span>	<span class="comment">//代表不进行页面跳转</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save11</span><span class="params">(String username,<span class="type">int</span> age)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="获得POJO类型参数"><a href="#获得POJO类型参数" class="headerlink" title="获得POJO类型参数"></a>获得POJO类型参数</h4><p>Controller中的业务方法的POJO参数的属性名与请求参数的name一致，参数值会自动映射匹配。</p>
<p><code>http://localhost:8080/itheima_spring_mvc/user/quick12?username=zhangsan&amp;age=12</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick12&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save12</span><span class="params">(User user)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获得数组类型参数"><a href="#获得数组类型参数" class="headerlink" title="获得数组类型参数"></a>获得数组类型参数</h4><p>Controller中的业务方法数组名称与请求参数的name一致，参数值会自动映射匹配。</p>
<p><code>http://localhost:8080/itheima_spring_mvc/user/quick13?strs=111&amp;strs=222&amp;strs=333</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick13&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save13</span><span class="params">(String[] strs)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(Arrays.asList(strs));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获得集合类型参数"><a href="#获得集合类型参数" class="headerlink" title="获得集合类型参数"></a>获得集合类型参数</h4><p>获得集合参数时，要将集合参数包装到一个POJO中才可以。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick14&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        &lt;%--表明是第几个User对象的username age--%&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userList[0].username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userList[0].age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userList[1].username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userList[1].age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userList = userList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;VO&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;userList=&quot;</span> + userList +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick14&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save14</span><span class="params">(VO vo)</span> <span class="keyword">throws</span> IOException &#123;<span class="comment">//ViewObject</span></span><br><span class="line">    System.out.println(vo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当使用ajax提交时，可以指定contentType为json形式，那么在方法参数位置使用<code>@RequestBody</code>可以直接接收集合数据而无需使用POJO进行包装。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/js/jquery-3.3.1.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="type">var</span> <span class="variable">userList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">        userList.push(&#123;username:<span class="string">&quot;zhangsan&quot;</span>,age:<span class="number">18</span>&#125;);</span><br><span class="line">        userList.push(&#123;username:<span class="string">&quot;lisi&quot;</span>,age:<span class="number">28</span>&#125;);</span><br><span class="line"></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick15&quot;</span>,</span><br><span class="line">            data:JSON.stringify(userList),</span><br><span class="line">            contentType:<span class="string">&quot;application/json;charset=utf-8&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick15&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save15</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; userList)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：通过谷歌开发者工具抓包发现，没有加载到jquery文件，原因是SpringMVC的前端控制器<br><code>DispatcherServlet</code>的<code>url-pattern</code>配置的是<code>/</code>,代表对所有的资源都进行过滤操作，我们可以通过以下两种方式指定放行静态资源：</p>
<ul>
<li>在spring-mvc.xml配置文件中指定放行的资源<code>&lt;mvc:resources mapping=&quot;/js/**&quot; location=&quot;/js/&quot;/&gt;</code> </li>
<li>使用<code>&lt;mvc:default-servlet-handler/&gt;</code>标签</li>
</ul>
<h4 id="请求数据乱码问题"><a href="#请求数据乱码问题" class="headerlink" title="请求数据乱码问题"></a>请求数据乱码问题</h4><p>当post请求时，数据会出现乱码，我们可以设置一个过滤器来进行编码的过滤。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置全局过滤的filter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="参数绑定注解-requestParam"><a href="#参数绑定注解-requestParam" class="headerlink" title="参数绑定注解@requestParam"></a>参数绑定注解<code>@requestParam</code></h4><p>当请求的参数名称与Controller的业务方法参数名称不一致时，就需要通过<code>@RequestParam</code>注解显示的绑定。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick16&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save16</span><span class="params">(<span class="meta">@RequestParam(value=&quot;name&quot;)</span> String username)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注解@RequestParam还有如下参数可以使用：</p>
<ul>
<li>value：与请求参数名称</li>
<li>required：此在指定的请求参数是否必须包括，默认是true，提交时如果没有此参数则报错</li>
<li>defaultValue：当没有指定请求参数时，则使用指定的默认值赋值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick16&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save16</span><span class="params">(<span class="meta">@RequestParam(value=&quot;name&quot;,required = false,defaultValue = &quot;itcast&quot;)</span> String username)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="获得Rest风格的参数"><a href="#获得Rest风格的参数" class="headerlink" title="获得Rest风格的参数"></a>获得Rest风格的参数</h4><p>REST（Representional State Transfer）,表现形式状态转换</p>
<p><strong>Rest</strong>是一种软件<strong>架构风格</strong>、<strong>设计风格</strong>，而不是标准，只是提供了一组设计原则和约束条件。主要用于客户端和服务器交互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存机制等。</p>
<p>根据Rest风格对资源进行访问称为<strong>Restful</strong></p>
<p>描述模块的名称通常使用复数，也就是加s的格式描述，表示此类资源而非单个资源，例如：users，books，accounts</p>
<p><strong>传统风格资源描述形式：</strong></p>
<p><code>http://localhost/user/getByID?id=1</code></p>
<p><code>http://localhost/user/saveUser</code></p>
<p><strong>Rest风格描述形式：</strong></p>
<p><code>http://localhost/user/1</code></p>
<p><code>http://localhost/user</code></p>
<p><strong>优点：</strong></p>
<ul>
<li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</li>
<li>书写简化</li>
</ul>
<p><strong>Rest</strong>风格的请求是使用<strong>“url+请求方式”</strong>表示一次请求目的的，HTTP 协议里面四个表示操作方式的动词如下：</p>
<ul>
<li><code>GET</code>：用于获取资源</li>
<li><code>POST</code>：用于新建资源</li>
<li><code>PUT</code>：用于更新资源</li>
<li><code>DELETE</code>：用于删除资源</li>
</ul>
<p>例如：</p>
<ul>
<li><code>/user/1 GET</code> ： 得到 id &#x3D; 1 的 user</li>
<li><code>/user/1 DELETE</code>： 删除 id &#x3D; 1 的 user</li>
<li><code>/user/1 PUT</code>： 更新 id &#x3D; 1 的 user</li>
<li><code>/user POST</code>： 新增 user</li>
</ul>
<p>上述url地址<code>/user/1</code>中的1就是要获得的请求参数，在SpringMVC中可以使用占位符进行参数绑定。地址<code>/user/1</code>可以写成<code>/user/&#123;id&#125;</code>，占位符<code>&#123;id&#125;</code>对应的就是1的值。</p>
<p>在业务方法中我们可以使用<code>@PathVariable</code>注解进行占位符的匹配获取工作。</p>
<p><code>http://localhost:8080/itheima_spring_mvc/user/quick17/zhangsan</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick17/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save17</span><span class="params">(<span class="meta">@PathVariable(value=&quot;name&quot;)</span> String username)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Restful快速开发：</p>
<ul>
<li>名称：<code>@GetMapping</code> <code>@POSTMapping</code> <code>@ PutMapping</code> <code>@DeleteMapping</code></li>
<li>类型：方法注解</li>
<li>位置：基于SpringMVC的Restful开发控制器方法定义上方</li>
<li>作用：设置当前控制器方法请求访问路径与请求动作，每种对应一个请求动作，例如@GetMapping对应GET请求</li>
<li>属性：value(默认)：请求访问路径</li>
</ul>
<h4 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h4><p>SpringMVC 默认已经提供了一些常用的类型转换器，例如客户端提交的字符串转换成int型进行参数设置。</p>
<p>但是不是所有的数据类型都提供了转换器，没有提供的就需要自定义转换器，例如：日期类型的数据就需要自定义转换器。</p>
<p>自定义类型转换器的开发步骤：</p>
<ul>
<li><p>定义转换器类实现Converter接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, Date&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">convert</span><span class="params">(String dateStr)</span> &#123;</span><br><span class="line">        <span class="comment">//将日期字符串转换成日期对象 返回</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = format.parse(dateStr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置文件中声明转换器（spring-mvc.xml）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.converter.DateConverter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>&lt;annotation-driven&gt;</code>中引用转换器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mvc的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick18&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save18</span><span class="params">(Date date)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="获得Servlet相关API"><a href="#获得Servlet相关API" class="headerlink" title="获得Servlet相关API"></a>获得Servlet相关API</h4><p>SpringMVC支持使用原始ServletAPI对象作为控制器方法的参数进行注入，常用的对象如下：</p>
<ul>
<li>HttpServletRequest</li>
<li>HttpServletResponse</li>
<li>HttpSession</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick19&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save19</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpSession session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(request);</span><br><span class="line">    System.out.println(response);</span><br><span class="line">    System.out.println(session);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获得请求头"><a href="#获得请求头" class="headerlink" title="获得请求头"></a>获得请求头</h4><p><code>@RequestHeader</code><br>使用<code>@RequestHeader</code>可以获得请求头信息，相当于web阶段学习的<code>request.getHeader(name)</code><br><code>@RequestHeader</code>注解的属性如下：</p>
<ul>
<li>value：请求头的名称</li>
<li>required：是否必须携带此请求头</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick20&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save20</span><span class="params">(<span class="meta">@RequestHeader(value = &quot;User-Agent&quot;,required = false)</span> String user_agent)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(user_agent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <code>@CookieValue</code><br>使用<code>@CookieValue</code>可以获得指定Cookie的值<br><code>@CookieValue</code>注解的属性如下：</p>
<ul>
<li>value：指定cookie的名称</li>
<li>required：是否必须携带此cookie</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick21&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save21</span><span class="params">(<span class="meta">@CookieValue(value = &quot;JSESSIONID&quot;)</span> String jsessionId)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(jsessionId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p><strong>文件上传客户端三要素</strong></p>
<ul>
<li>表单项<code>type=“file”</code></li>
<li>表单的提交方式是post</li>
<li>表单的enctype属性是多部分表单形式，及<code>enctype=“multipart/form-data”</code></li>
</ul>
<p>upload.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick23&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">        名称&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        文件&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;uploadFile&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>文件上传原理</strong></p>
<ul>
<li>当form表单修改为多部分表单时，<code>request.getParameter()</code>将失效。</li>
<li><code>enctype=&quot;application/x-www-form-urlencoded&quot;</code>时，form表单的正文内容格式是：<br><code>key=value&amp;key=value&amp;key=value</code></li>
<li>当form表单的enctype取值为<code>Mutilpart/form-data</code>时，请求正文内容就变成多部分形式：</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/625987b9239250f7c55f72c1.jpg"></p>
<p><strong>单文件上传步骤</strong></p>
<ul>
<li><p>导入fileupload和io坐标 (pom.xml)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件上传解析器 (spring-mvc.xml)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件上传解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;500000&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>编写文件上传代码 (注意对应路径要有文件夹)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick22&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save22</span><span class="params">(String username, MultipartFile uploadFile,MultipartFile uploadFile2)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    <span class="comment">//获得上传文件的名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> uploadFile.getOriginalFilename();</span><br><span class="line">    uploadFile.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\test\\&quot;</span>+originalFilename));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>多文件上传实现</strong></p>
<p>多文件上传，只需要将页面修改为多个文件上传项，将方法参数<code>MultipartFile</code>类型修改为<code>MultipartFile[]</code>即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick23&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        名称<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        文件1<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uploadFile&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        文件2<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uploadFile&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick22&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        名称<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        文件1<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uploadFile&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        文件2<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uploadFile2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick23&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save23</span><span class="params">(String username, MultipartFile[] uploadFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile multipartFile : uploadFile) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> multipartFile.getOriginalFilename();</span><br><span class="line">        multipartFile.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\test\\&quot;</span>+originalFilename));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Spring环境搭建步骤"><a href="#Spring环境搭建步骤" class="headerlink" title="Spring环境搭建步骤"></a>Spring环境搭建步骤</h3><ul>
<li>创建工程（Project&amp;Module） </li>
<li>导入静态页面（jsp页面）</li>
<li>导入需要坐标（pom.xml） </li>
<li>创建包结构（controller、service、dao、domain、utils） </li>
<li>导入数据库脚本（见资料test.sql） </li>
<li>创建POJO类（见资料User.java和Role.java） </li>
<li>创建配置文件（applicationContext.xml、spring-mvc.xml、jdbc.properties、log4j.properties）</li>
</ul>
]]></content>
      <categories>
        <category>SSM</category>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM02 —— 数据源、注解、整合Junit</title>
    <url>/2022/04/14/SSM02/</url>
    <content><![CDATA[<p>概述：本文记录了Spring配置数据源、注解开发、整合Junit部分的基础知识</p>
<span id="more"></span>

<h3 id="Spring配置数据源"><a href="#Spring配置数据源" class="headerlink" title="Spring配置数据源"></a>Spring配置数据源</h3><h4 id="数据源（连接池）的作用"><a href="#数据源（连接池）的作用" class="headerlink" title="数据源（连接池）的作用"></a>数据源（连接池）的作用</h4><ul>
<li>数据源(连接池)是提高程序性能如出现的</li>
<li>事先实例化数据源，初始化部分连接资源</li>
<li>使用连接资源时从数据源中获取</li>
<li>使用完毕后将连接资源归还给数据源</li>
</ul>
<p>常见的数据源(连接池)：<strong>DBCP、C3P0、BoneCP、Druid</strong>等</p>
<h4 id="数据源的开发步骤"><a href="#数据源的开发步骤" class="headerlink" title="数据源的开发步骤"></a>数据源的开发步骤</h4><ul>
<li>导入数据源的坐标和数据库驱动坐标</li>
<li>创建数据源对象</li>
<li>设置数据源的基本连接数据</li>
<li>使用数据源获取连接资源和归还连接资源</li>
</ul>
<h4 id="数据源的手动创建"><a href="#数据源的手动创建" class="headerlink" title="数据源的手动创建"></a>数据源的手动创建</h4><p>需要导入：</p>
<p>（1）导入c3p0和druid的坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）导入MySQL数据库驱动坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建C3P0连接池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//测试手动创建 c3p0 数据源</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">    dataSource.setDriverClass(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/bjpowernode?useSSL=false&amp;serverTimezone=GMT%2B8&quot;</span>);</span><br><span class="line">    dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建Druid连接池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//测试手动创建 druid 数据源</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/bjpowernode?useSSL=false&amp;serverTimezone=GMT%2B8&quot;</span>);</span><br><span class="line">    dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="type">DruidPooledConnection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提取jdbc.properties配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/bjpowernode?useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<p>通过读取jdbc.properties配置文件创建连接池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//测试手动创建 c3p0 数据源(加载properties配置文件)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//读取配置文件,这里使用资源绑定器ResourceBundle，读取类加载路径下的文件名</span></span><br><span class="line">    <span class="comment">//只需要基本名称，不需要带后缀</span></span><br><span class="line">    <span class="type">ResourceBundle</span> <span class="variable">rb</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;jdbc.driver&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;jdbc.url&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;jdbc.username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> rb.getString(<span class="string">&quot;jdbc.password&quot;</span>);</span><br><span class="line">    <span class="comment">//创建数据源对象  设置连接参数</span></span><br><span class="line">    <span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">    dataSource.setDriverClass(driver);</span><br><span class="line">    dataSource.setJdbcUrl(url);</span><br><span class="line">    dataSource.setUser(username);</span><br><span class="line">    dataSource.setPassword(password);</span><br><span class="line"></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    connection.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>可以将DataSource的创建权交由Spring容器去完成</strong></p>
<ul>
<li>DataSource有无参构造方法，而Spring默认就是通过无参构造方法实例化对象的</li>
<li>DataSource要想使用需要通过set方法设置数据库连接信息，而Spring可以通过set方法进行字符串注入</li>
</ul>
<p>pom.xml中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>新建applicationContext.xml在resources目录下，其中添加（依赖注入的set方式）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/bjpowernode?useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试从容器中获取数据源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//测试Spring容器产生数据源对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> app.getBean(DataSource.class);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>抽取jdbc配置文件</strong></p>
<p>applicationContext.xml加载jdbc.properties配置文件获得连接信息。</p>
<p>首先，需要引入context命名空间和约束路径：</p>
<ul>
<li><p>命名空间：<code>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</code></p>
</li>
<li><p>约束路径：<code>http://www.springframework.org/schema/context</code></p>
</li>
</ul>
<p>​                        <code>http://www.springframework.org/schema/context/spring-context.xsd</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=</span></span><br><span class="line"><span class="tag">               <span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载外部的properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>要点：</p>
<p>Spring容器加载properties文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;xx.properties&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;key&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Spring注解开发"><a href="#Spring注解开发" class="headerlink" title="Spring注解开发"></a>Spring注解开发</h3><h4 id="Spring原始注解"><a href="#Spring原始注解" class="headerlink" title="Spring原始注解"></a>Spring原始注解</h4><p>Spring是轻代码而重配置的框架，配置比较繁重，影响开发效率，所以注解开发是一种趋势，注解代替xml配置文件可以简化配置，提高开发效率。</p>
<p>Spring原始注解主要是替代<code>&lt;Bean&gt;</code>的配置</p>
<img src="https://pic.imgdb.cn/item/62585758239250f7c5b11cb3.jpg" style="zoom:50%;" />

<p>使用注解进行开发时，需要在applicationContext.xml中配置组件扫描，作用是指定哪个包及其子包下的Bean需要进行扫描以便识别使用注解配置的类、子段和方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解的组件扫描--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用<code>@Component</code>或<code>@Repository</code>标识UserDaoImpl需要Spring进行实例化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Component(&quot;userDao&quot;)</span></span><br><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;save running... ...&quot;</span>);</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>@Component</code>或<code>@Service</code>标识UserDaoImpl需要Spring进行实例化</p>
<p>使用<code>@Autowired</code>或者<code>@Autowired+@Qulifier</code>或者<code>@Resource</code>进行userDao的注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Component(&quot;userService&quot;)</span></span><br><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">	<span class="comment">/*@Autowired</span></span><br><span class="line"><span class="comment">	@Qualifier(&quot;userDao&quot;)*/</span></span><br><span class="line">	<span class="meta">@Resource(name=&quot;userDao&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> UserDao userDao;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">		userDao.save();</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>@Value</code>进行字符串注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">	<span class="meta">@Value(&quot;注入普通数据&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String str;</span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String driver;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(str);</span><br><span class="line">		System.out.println(driver);</span><br><span class="line">		System.out.println(<span class="string">&quot;save running... ...&quot;</span>);</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>@Scope</code>标注Bean的范围</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">	<span class="comment">//此处省略代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>@PostConstruct</code>标注初始化方法，使用<code>@PreDestroy</code>标注销毁方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;初始化方法....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;销毁方法.....&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Spring新注解"><a href="#Spring新注解" class="headerlink" title="Spring新注解"></a>Spring新注解</h4><p>使用上面的注解还不能全部替代xml配置文件，还需要使用注解替代的配置如下：</p>
<ul>
<li><p>非自定义的Bean的配置：<code>&lt;bean&gt;</code></p>
</li>
<li><p>加载properties文件的配置：<code>context:property-placeholder&gt;</code></p>
</li>
<li><p>组件扫描的配置：&lt;<code>context:component-scan</code>&gt;</p>
</li>
<li><p>引入其他文件：<code>&lt;import&gt;</code></p>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/62586c3d239250f7c5c6e657.jpg"></p>
<ul>
<li><p><code>@Configuration</code></p>
</li>
<li><p><code>@ComponentScan</code></p>
</li>
<li><p><code>@Import</code></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;DataSourceConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfiguration</span> &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>@PropertySource</code></p>
</li>
<li><p><code>@value</code></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfiguration</span> &#123;</span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String driver;</span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String url;</span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>@Bean</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(name=&quot;dataSource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException &#123;</span><br><span class="line">	<span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">	dataSource.setDriverClass(driver);</span><br><span class="line">	dataSource.setJdbcUrl(url);</span><br><span class="line">	dataSource.setUser(username);</span><br><span class="line">	dataSource.setPassword(password);</span><br><span class="line">	<span class="keyword">return</span> dataSource; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试加载核心配置类创建Spring容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAnnoConfiguration</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">	<span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfiguration.class);</span><br><span class="line">	<span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) </span><br><span class="line">	applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">	userService.save();</span><br><span class="line">	<span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource) </span><br><span class="line">	applicationContext.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">	<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">	System.out.println(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Spring集成Junit"><a href="#Spring集成Junit" class="headerlink" title="Spring集成Junit"></a>Spring集成Junit</h3><p><strong>原始Junit测试Spring的问题</strong></p>
<p>在测试类中，每个测试方法都有以下两行代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line"><span class="type">IAccountService</span> <span class="variable">as</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;accountService&quot;</span>,IAccountService.class);</span><br></pre></td></tr></table></figure>

<p>这两行代码的作用是获取容器，如果不写的话，直接会提示空指针异常。所以又不能轻易删掉。</p>
<p><strong>解决思路</strong></p>
<ul>
<li>让SpringJunit负责创建Spring容器，但是需要将配置文件的名称告诉它</li>
<li>将需要进行测试Bean直接在测试类中进行注入</li>
</ul>
<p><strong>步骤：</strong></p>
<ul>
<li><p>导入spring集成Junit的坐标（pom.xml中）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@Runwith</code>注解替换原来的运行期</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJunitTest</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@ContextConfiguration</code>指定配置文件或配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//加载spring核心配置文件</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(value = &#123;&quot;classpath:applicationContext.xml&quot;&#125;)</span></span><br><span class="line"><span class="comment">//加载spring核心配置类</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJunitTest</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@Autowired</code>注入需要测试的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJunitTest</span> &#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserService userService; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建测试方法进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJunitTest</span> &#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserService userService;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUserService</span><span class="params">()</span>&#123;</span><br><span class="line">		userService.save();</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>SSM</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM01 —— IoC,DI</title>
    <url>/2022/04/14/SSM01/</url>
    <content><![CDATA[<p>概述：本文记录了Spring的基础概念和基本配置方法</p>
<span id="more"></span>

<h3 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h3><h4 id="Spring是什么"><a href="#Spring是什么" class="headerlink" title="Spring是什么"></a>Spring是什么</h4><p>Spring是分层的Java SE&#x2F;EE 应用full-stack轻量级开源框架，以<strong>IoC</strong>（Inverse Of Control：反转控制）和<strong>AOP</strong>（Aspect Oriented Programming：面向切面编程）为内核</p>
<p>提供了<strong>展现层SpringMVC</strong>和<strong>持久层Spring JDBCTemplate</strong>以及<strong>业务层事务管理</strong>等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE企业应用开源框架。</p>
<h4 id="Spring的优势"><a href="#Spring的优势" class="headerlink" title="Spring的优势"></a>Spring的优势</h4><p>（1）方便解耦：简化开发 通过 Spring提供的 loC容器，可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造成的过度耦合。用户也不必再为单例模式类、属性文件解析等这文些很底层的需求编写代码.可以更专注干上层的应用。 </p>
<p>（2）AOP编程的支持： 通过 Spring的 AOP 功能，方便进行面向切面编程，许多不容易用传统 OOP 实现的功能可以通过 AOP 轻松实现。 </p>
<p>（3）声明式事务的支持 ：可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务管理，提高开发效率和质量。 </p>
<p>（4）方便程序的测试 ：可以用非容器依赖的编程方式进讲行几平所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。</p>
<p>（5）方便集成各种优秀框架： Spring对各种优秀框架（Struts、 Hibernate、Hessian、Quartz等）的支持。</p>
<p>（ 6）降低 JavaEE API的使用难度： Spring对 JavaEE API（如JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些API的使用难度大为降低。 </p>
<p>（7）Java 源码是经典学习范例： Spring的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对Java 设计模式灵活运用以及对 Java技术的高深造诣。它的源代码是 Java技术的最佳实践的范例。 </p>
<h4 id="Spring的体系结构"><a href="#Spring的体系结构" class="headerlink" title="Spring的体系结构"></a>Spring的体系结构</h4><img src="https://pic.imgdb.cn/item/6246961327f86abb2a362a69.jpg" style="zoom: 80%;" />

<h3 id="Spring快速配置"><a href="#Spring快速配置" class="headerlink" title="Spring快速配置"></a>Spring快速配置</h3><h4 id="Spring程序开发步骤"><a href="#Spring程序开发步骤" class="headerlink" title="Spring程序开发步骤"></a>Spring程序开发步骤</h4><p><img src="https://pic.imgdb.cn/item/6246970127f86abb2a37fd13.jpg"></p>
<ul>
<li>导入 Spring 开发的基本包坐标</li>
<li>编写 Dao 接口和实现类</li>
<li>创建 Spring核心配置文件</li>
<li> 在Spring 配置文件中配置 UserDaolmpl </li>
<li>使用 Spring 的API获得 Bean 实例</li>
</ul>
<p> </p>
<h4 id="导入Spring开发的基本包坐标"><a href="#导入Spring开发的基本包坐标" class="headerlink" title="导入Spring开发的基本包坐标"></a>导入Spring开发的基本包坐标</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--导入spring的context坐标，context依赖core、beans、expression--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="编写Dao接口和实现"><a href="#编写Dao接口和实现" class="headerlink" title="编写Dao接口和实现"></a>编写Dao接口和实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="创建Spring核心配置文件"><a href="#创建Spring核心配置文件" class="headerlink" title="创建Spring核心配置文件"></a>创建Spring核心配置文件</h4><p>在类路径下（resources）创建applicationContext.xml配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="在Spring配置文件中配置UserDaoImpl"><a href="#在Spring配置文件中配置UserDaoImpl" class="headerlink" title="在Spring配置文件中配置UserDaoImpl"></a>在Spring配置文件中配置UserDaoImpl</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用Spring的API获得Bean实例"><a href="#使用Spring的API获得Bean实例" class="headerlink" title="使用Spring的API获得Bean实例"></a>使用Spring的API获得Bean实例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) app.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h4><ul>
<li>导入坐标</li>
<li>创建Bean </li>
<li>创建applicationContext.xml </li>
<li>在配置文件中进行配置 </li>
<li>创建ApplicationContext对象getBean</li>
</ul>
<h3 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h3><h4 id="Bean标签基本配置"><a href="#Bean标签基本配置" class="headerlink" title="Bean标签基本配置"></a>Bean标签基本配置</h4><p>用于配置对象交由Spring 来创建。 <strong>默认情况下它调用的是类中的无参构造函数</strong>，如果没有无参构造函数则不能创建成功。</p>
<p> 基本属性∶ </p>
<ul>
<li>id∶Bean实例在Spring容器中的唯一标识（不允许重复）</li>
<li>class∶Bean的全限定名称</li>
</ul>
<p> </p>
<h4 id="Bean标签范围配置"><a href="#Bean标签范围配置" class="headerlink" title="Bean标签范围配置"></a>Bean标签范围配置</h4><p>scope：指对象的作用范围，取值如下：</p>
<p><img src="https://pic.imgdb.cn/item/6246b99d27f86abb2a7d1aa9.jpg"></p>
<p><strong>当scope的取值为singleton时</strong></p>
<p>Bean的实例化个数：1个</p>
<p>Bean的实例化时机：<strong>当Spring核心文件被加载时，实例化配置的Bean实例</strong></p>
<p>Bean的生命周期：</p>
<ul>
<li><p>对象创建：当应用加载，创建容器时，对象就被创建了（注意scope取值不同Bean的创建时机是不同的）</p>
</li>
<li><p>对象运行：只要容器在，对象一直活着</p>
</li>
<li><p>对象销毁：当应用卸载，销毁容器时，对象就被销毁了</p>
</li>
</ul>
<p><strong>当scope的取值为prototype时</strong></p>
<p>Bean的实例化个数：多个</p>
<p>Bean的实例化时机：<strong>当调用getBean()方法时实例化Bean</strong></p>
<ul>
<li><p>对象创建：当使用对象时，创建新的对象实例</p>
</li>
<li><p>对象运行：只要对象在使用中，就一直活着</p>
</li>
<li><p>对象销毁：当对象长时间不用时，被 Java 的垃圾回收器回收了</p>
</li>
</ul>
<h5 id="Bean生命周期配置"><a href="#Bean生命周期配置" class="headerlink" title="Bean生命周期配置"></a>Bean生命周期配置</h5><p><strong>init-method</strong>：指定类中的初始化方法名称</p>
<p><strong>destroy-method</strong>：指定类中销毁方法名称</p>
<h4 id="Bean实例化三种方式"><a href="#Bean实例化三种方式" class="headerlink" title="Bean实例化三种方式"></a>Bean实例化三种方式</h4><p>（1）无参<strong>构造</strong>方法实例化</p>
<p>它会根据默认无参构造方法来创建类对象，如果bean中没有默认无参构造函数，将会创建失败。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p>（2）工厂<strong>静态</strong>方法实例化</p>
<p>工厂的静态方法返回Bean实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticFactoryBean</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title function_">createUserDao</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.StaticFactoryBean&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">factory-method</span>=<span class="string">&quot;createUserDao&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<p>（3）工厂<strong>实例</strong>方法实例化</p>
<p>工厂的非静态方法返回Bean实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicFactoryBean</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title function_">createUserDao</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.DynamicFactoryBean&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factoryBean&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createUserDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="Bean的依赖注入"><a href="#Bean的依赖注入" class="headerlink" title="Bean的依赖注入"></a>Bean的依赖注入</h4><p>（1）创建UserService，UserService内部在调用UserDao的save()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">		<span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">		userDao.save();</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）将UserServiceImplement的创建权交给Spring</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>（3）从Spring容器中获得UserService进行操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">userService.save()</span><br></pre></td></tr></table></figure>



<p>目前UserService实例和UserDao实例都存在与Spring容器中，当前的做法是在容器外部获得UserService实例和UserDao实例，然后在程序中进行结合。</p>
<p><img src="https://pic.imgdb.cn/item/6257e297239250f7c5e6cc69.jpg"></p>
<p>因为UserService和UserDao都在Spring容器中，而最终程序直接使用的是UserService，所以可以在Spring容器中，<strong>将UserDao设置到UserService内部</strong></p>
<p><img src="https://pic.imgdb.cn/item/6257e2e0239250f7c5e76b56.jpg"></p>
<h5 id="Bean的依赖注入概念"><a href="#Bean的依赖注入概念" class="headerlink" title="Bean的依赖注入概念"></a>Bean的依赖注入概念</h5><p>依赖注入（<strong>Dependency Injection</strong>）：它是 Spring 框架核心 IOC 的具体实现。</p>
<p>在编写程序时，通过控制反转，把对象的创建交给了 Spring，但是代码中不可能出现没有依赖的情况。</p>
<p>IOC 解耦只是降低他们的依赖关系，但不会消除。例如：业务层仍会调用持久层的方法。</p>
<p>那这种业务层和持久层的依赖关系，在使用 Spring 之后，就让 Spring 来维护了。</p>
<p>简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取。</p>
<h5 id="Bean的依赖注入方式"><a href="#Bean的依赖注入方式" class="headerlink" title="Bean的依赖注入方式"></a>Bean的依赖注入方式</h5><p><strong>（1）set方法</strong></p>
<p>在UserServiceImpl中添加setUserDao方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> UserDao userDao;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.userDao = userDao; </span><br><span class="line">    &#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">		userDao.save();</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置Spring容器调用set方法进行注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>P命名空间注入本质也是set方法注入，但比起上述的set方法注入更加方便，主要体现在配置文件中，如下：</p>
<p>首先，需要引入P命名空间：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure>

<p>其次需要修改注入方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span> <span class="attr">p:userDao-ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>（2）构造方法注入</strong></p>
<p>创建有参构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">		<span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">		userDao.save();</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置Spring容器调用有参构造时进行注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="Bean的依赖注入的数据类型"><a href="#Bean的依赖注入的数据类型" class="headerlink" title="Bean的依赖注入的数据类型"></a>Bean的依赖注入的数据类型</h5><p>上面的操作，都是注入的引用Bean，处了对象的引用可以注入，普通数据类型，集合等都可以在容器中进行注入。</p>
<p>注入数据的三种数据类型</p>
<ul>
<li><p><strong>普通数据类型</strong></p>
</li>
<li><p><strong>引用数据类型</strong></p>
</li>
<li><p><strong>集合数据类型</strong></p>
</li>
</ul>
<p>其中引用数据类型，此处就不再赘述了，之前的操作都是对UserDao对象的引用进行注入的，下面将以set方法注入为例，演示普通数据类型和集合数据类型的注入。</p>
<p>（1）普通数据类型的注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String company;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompany</span><span class="params">(String company)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.company = company;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(company+<span class="string">&quot;===&quot;</span>+age);</span><br><span class="line">		System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;company&quot;</span> <span class="attr">value</span>=<span class="string">&quot;传智播客&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;15&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）集合数据类型（<code>List&lt;String&gt;</code>）的注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> List&lt;String&gt; strList;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStrList</span><span class="params">(List&lt;String&gt; strList)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.strList = strList;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(strList);</span><br><span class="line">		System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125; </span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;strList&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（3）集合数据类型（<code>List&lt;User&gt;</code>）的注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.userList = userList;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(userList);</span><br><span class="line">		System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125; </span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userList&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;u1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;u2&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（4）集合数据类型（<code>Map&lt;String,User&gt;</code>）的注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Map&lt;String,User&gt; userMap;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserMap</span><span class="params">(Map&lt;String, User&gt; userMap)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.userMap = userMap;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(userMap);</span><br><span class="line">		System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;u1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;u2&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（5）集合数据类型（Properties）的注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Properties properties;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.properties = properties;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(properties);</span><br><span class="line">		System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">prop</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p3&quot;</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="引入其他配置文件（分模块开发）"><a href="#引入其他配置文件（分模块开发）" class="headerlink" title="引入其他配置文件（分模块开发）"></a>引入其他配置文件（分模块开发）</h5><p>实际开发中，Spring的配置内容非常多，这就导致Spring配置很繁杂且体积很大，所以，可以将部分配置拆解到其他配置文件中，而在Spring主配置文件通过import标签进行加载</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-xxx.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h4><p><img src="C:\Users\win10\AppData\Roaming\Typora\typora-user-images\image-20220414182147790.png" alt="image-20220414182147790"></p>
<h3 id="Spring相关API"><a href="#Spring相关API" class="headerlink" title="Spring相关API"></a>Spring相关API</h3><h4 id="ApplicationContext的继承体系"><a href="#ApplicationContext的继承体系" class="headerlink" title="ApplicationContext的继承体系"></a>ApplicationContext的继承体系</h4><p><strong>applicationContext：</strong>接口类型，代表应用上下文，可以通过其实例获得 Spring 容器中的 Bean 对象</p>
<p><img src="https://pic.imgdb.cn/item/6257f5ef239250f7c5099076.jpg"></p>
<h4 id="ApplicationContext的实现类"><a href="#ApplicationContext的实现类" class="headerlink" title="ApplicationContext的实现类"></a>ApplicationContext的实现类</h4><ul>
<li>ClassPathXmlApplicationContext</li>
</ul>
<p>​        它是从类的根路径下加载配置文件 推荐使用这种</p>
<ul>
<li>FileSystemXmlApplicationContext</li>
</ul>
<p>​        它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</p>
<ul>
<li>AnnotationConfigApplicationContext</li>
</ul>
<p>​        当使用注解配置容器对象时，需要使用此类来创建 spring 容器。它用来读取注解。</p>
<h4 id="getBean-方法使用"><a href="#getBean-方法使用" class="headerlink" title="getBean() 方法使用"></a>getBean() 方法使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">	assertBeanFactoryActive();</span><br><span class="line">	<span class="keyword">return</span> getBeanFactory().getBean(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">	assertBeanFactoryActive();</span><br><span class="line">	<span class="keyword">return</span> getBeanFactory().getBean(requiredType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，当参数的数据类型是字符串时，表示根据Bean的id从容器中获得Bean实例，返回是Object，需要强转。</p>
<p>当参数的数据类型是Class类型时，表示根据类型从容器中匹配Bean实例，当容器中相同类型的Bean有多个时，则此方法会报错。</p>
<h4 id="知识要点-1"><a href="#知识要点-1" class="headerlink" title="知识要点"></a>知识要点</h4><p>Spring重点掌握的API</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClasspathXmlApplicationContext</span>(<span class="string">&quot;xml文件&quot;</span>)</span><br><span class="line">app.getBean(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">app.getBean(Class)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SSM</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2022/04/13/Linux/</url>
    <content><![CDATA[<p>概述：本文记录了Linux的基础知识和常用命令，并且记录了常用软件（JDK，MySQL，Tomcat）的安装步骤和出问题的解决方案。</p>
<span id="more"></span>

<h3 id="Linux概述"><a href="#Linux概述" class="headerlink" title="Linux概述"></a>Linux概述</h3><h4 id="Unix概述"><a href="#Unix概述" class="headerlink" title="Unix概述"></a>Unix概述</h4><p>Unix是一个强大的多用户、多任务操作系统。于1969年在AT&amp;T的贝尔实验室开发。UNIX的商标权由国际开放标准组织（The Open Group）所拥有。UNIX操作系统是商业版，需要收费，价格比Microsoft Windows正版要贵一些。</p>
<h4 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h4><p>Linux是基于Unix的</p>
<p>Linux是一种自由和开放源码的操作系统，存在着许多不同的Linux版本，但它们都使用了Linux内核。Linux可安装在各种计算机硬件设备中，比如手机、平板电脑、路由器、台式计算机</p>
<p>诞生于1991 年10 月5 日。是由芬兰赫尔辛基大学学生Linus Torvalds和后来加入的众多爱好者共同开发完成</p>
<h4 id="Linux系统的应用"><a href="#Linux系统的应用" class="headerlink" title="Linux系统的应用"></a>Linux系统的应用</h4><p>服务器系统Web应用服务器、数据库服务器、接口服务器、DNS、FTP等等； </p>
<p>嵌入式系统路由器、防火墙、手机、PDA、IP 分享器、交换器、家电用品的微电脑控制器等等，</p>
<p>高性能运算、计算密集型应用Linux有强大的运算能力。</p>
<p>桌面应用系统</p>
<p>移动手持系统</p>
<h4 id="Linux的版本"><a href="#Linux的版本" class="headerlink" title="Linux的版本"></a>Linux的版本</h4><p><strong>Linux</strong>的版本分为两种：<strong>内核版本</strong>和<strong>发行版本</strong>；内核版本是指在Linus领导下的内核小组开发维护的系统内核的版本号 ；</p>
<p>Linux的主流版本</p>
<p><img src="https://pic.imgdb.cn/item/62570546239250f7c5ee87ae.jpg"></p>
<h3 id="Linux远程访问"><a href="#Linux远程访问" class="headerlink" title="Linux远程访问"></a>Linux远程访问</h3><p>通过远程访问软件CRT进行连接</p>
<h3 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h3><p><img src="https://pic.imgdb.cn/item/6255c46a239250f7c54d003b.jpg"></p>
<p>root管理员的home目录root</p>
<p>其他用户的home目录home目录中</p>
<h3 id="Linux的常用命令"><a href="#Linux的常用命令" class="headerlink" title="Linux的常用命令"></a>Linux的常用命令</h3><h4 id="切换目录命令cd"><a href="#切换目录命令cd" class="headerlink" title="切换目录命令cd"></a>切换目录命令<code>cd</code></h4><ul>
<li><p><code>cd app</code>    切换到app目录</p>
</li>
<li><p><code>cd ..</code>   切换到上一层目录</p>
</li>
<li><p><code>cd /</code>    切换到系统根目录</p>
</li>
<li><p><code>cd ~</code>   切换到用户主目录</p>
</li>
<li><p><code>cd -</code>    切换到上一个所在目录</p>
</li>
</ul>
<p>使用tab键来补全文件路径</p>
<h4 id="列出文件列表-ls-ll"><a href="#列出文件列表-ls-ll" class="headerlink" title="列出文件列表 ls ll"></a>列出文件列表 <code>ls ll</code></h4><p>ls(list)是一个非常有用的命令，用来显示当前目录下的内容。配合参数的使用，能以不同的方式显示目录内容。  </p>
<p>格式：ls[参数] [路径或文件名]</p>
<p>常用：</p>
<p>在linux中以 . 开头的文件都是隐藏的文件</p>
<ul>
<li><p><code>ls</code></p>
</li>
<li><p><code>ls -a</code>  显示所有文件或目录（包含隐藏的文件）</p>
</li>
<li><p><code>ls -l</code>  缩写成 <code>ll</code></p>
</li>
</ul>
<h4 id="创建目录和移除目录-mkdir-rmdir"><a href="#创建目录和移除目录-mkdir-rmdir" class="headerlink" title="创建目录和移除目录 mkdir rmdir"></a>创建目录和移除目录 <code>mkdir rmdir</code></h4><ul>
<li><p><code>mkdir(make directory)</code>命令可用来创建子目录。</p>
</li>
<li><p><code>mkdir app</code>  在当前目录下创建app目录</p>
</li>
<li><p><code>mkdir -p app2/test</code>  级联创建aap2以及test目录</p>
</li>
<li><p><code>rmdir(remove directory)</code>命令可用来删除“空”的子目录：<code>rmdir app</code> 删除app目录</p>
</li>
</ul>
<h4 id="浏览文件"><a href="#浏览文件" class="headerlink" title="浏览文件"></a>浏览文件</h4><h5 id="cat、more、less"><a href="#cat、more、less" class="headerlink" title="cat、more、less"></a>cat、more、less</h5><p>cat用于显示文件的内容。格式：<code>cat[参数]&lt;文件名&gt;</code></p>
<ul>
<li><code>cat yum.conf</code></li>
</ul>
<p>more一般用于要显示的内容会超过一个画面长度的情况。按空格键显示下一个画面。</p>
<p>​    回车显示下一行内容。</p>
<p>​    按 q 键退出查看。</p>
<ul>
<li><code>more yum.conf</code><ul>
<li>空格显示下一页数据 回车显示下一行的数据</li>
</ul>
</li>
</ul>
<p>less用法和more类似，不同的是less可以通过PgUp、PgDn键来控制。</p>
<ul>
<li><code>less yum.conf</code><ul>
<li>PgUp 和 PgDn 进行上下翻页.</li>
</ul>
</li>
</ul>
<h5 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h5><p>tail命令是在实际使用过程中使用非常多的一个命令，它的功能是：用于显示文件后几行的内容。</p>
<p>用法:</p>
<p><code>tail -10 /etc/passwd</code> 查看后10行数据</p>
<p><code>tail -f catalina.log</code>  动态查看日志(*****)</p>
<p>ctrl+c 结束查看</p>
<h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><h5 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h5><p>rm  删除文件      用法：<code>rm [选项]... 文件...</code></p>
<ul>
<li><code>rm a.txt</code>  删除a.txt文件</li>
</ul>
<p>删除需要用户确认，<code>y/nrm</code> 删除不询问</p>
<ul>
<li><p><code>rm -f a.txt</code>  询问，直接删除rm 删除目录</p>
</li>
<li><p><code>rm -r a</code>  递归删除不询问递归删除（慎用）</p>
</li>
<li><p><code>rm -rf  a</code>  不询问递归删除</p>
</li>
<li><p><code>rm -rf *</code>  删除所有文件</p>
</li>
<li><p><code>rm -rf /*</code> 自杀</p>
</li>
</ul>
<h5 id="cp、mv"><a href="#cp、mv" class="headerlink" title="cp、mv"></a>cp、mv</h5><p>cp(copy)命令可以将文件从一处复制到另一处。一般在使用cp命令时将一个文件复制成另一个文件或复制到某目录时，需要指定源文件名与目标文件名或目录。</p>
<ul>
<li><p><code>cp a.txt b.txt</code>  将a.txt复制为b.txt文件</p>
</li>
<li><p><code>cp a.txt ../</code>   将a.txt文件复制到上一层目录中</p>
</li>
</ul>
<p>mv 移动或者重命名</p>
<ul>
<li><p><code>mv a.txt ../</code>  将a.txt文件移动到上一层目录中</p>
</li>
<li><p><code>mv a.txt b.txt</code>  将a.txt文件重命名为b.txt</p>
</li>
</ul>
<h5 id="tar-（打包或解压）"><a href="#tar-（打包或解压）" class="headerlink" title="tar （打包或解压）"></a>tar （打包或解压）</h5><p>tar命令位于&#x2F;bin目录下，它能够将用户所指定的文件或目录打包成一个文件，但不做压缩。一般Linux上常用的压缩方式是选用tar将许多文件打包成一个文件，再以gzip压缩命令压缩成xxx.tar.gz(或称为xxx.tgz)的文件。常用参数：</p>
<ul>
<li><p><code>-c</code>：创建一个新tar文件</p>
</li>
<li><p><code>-v</code>：显示运行过程的信息</p>
</li>
<li><p><code>-f</code>：指定文件名</p>
</li>
<li><p><code>-z</code>：调用gzip压缩命令进行压缩</p>
</li>
<li><p><code>-t</code>：查看压缩文件的内容</p>
</li>
<li><p><code>-x</code>：解开tar文件</p>
</li>
</ul>
<p>打包：</p>
<ul>
<li><code>tar -cvf xxx.tar ./*</code></li>
</ul>
<p>打包并且压缩：</p>
<ul>
<li><code>tar -zcvf xxx.tar.gz ./*</code></li>
</ul>
<p>解压 </p>
<ul>
<li><code>tar -xvf xxx.tar</code></li>
<li><code>tar -zxvf xxx.tar.gz -C /usr/aaa</code></li>
</ul>
<h5 id="find"><a href="#find" class="headerlink" title="find"></a>find</h5><p>find指令用于查找符合条件的文件</p>
<p>示例：</p>
<ul>
<li><code>find / -name &quot;ins*&quot;</code> 查找文件名称是以ins开头的文件</li>
<li><code>find / -name &quot;ins*&quot; -ls</code> </li>
<li><code>find / -user itcast -ls</code> 查找用户itcast的文件</li>
<li><code>find / -user itcast -type d -ls</code> 查找用户itcast的目录</li>
<li><code>find /-perm -777 -type d-ls</code> 查找权限是777的文件</li>
</ul>
<h5 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h5><p>查找文件里符合条件的字符串。</p>
<p>用法: <code>grep [选项]... PATTERN [FILE]...</code></p>
<p>示例：</p>
<ul>
<li><p><code>grep lang anaconda-ks.cfg</code>  在文件中查找lang</p>
</li>
<li><p><code>grep lang anaconda-ks.cfg -color</code> 高亮显示</p>
</li>
</ul>
<h4 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h4><ul>
<li><code>pwd</code> ：显示当前所在的目录</li>
<li><code>touch</code> ：创建一个空文件 <code>touch a.txt</code></li>
<li><code>clear</code> ：清屏</li>
</ul>
<h3 id="Vi和Vim编辑器"><a href="#Vi和Vim编辑器" class="headerlink" title="Vi和Vim编辑器"></a>Vi和Vim编辑器</h3><h4 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h4><p>在Linux下一般使用vi编辑器来编辑文件。vi既可以查看文件也可以编辑文件。三种模式：命令行、插入、底行模式。</p>
<p>切换到命令行模式：按Esc键；</p>
<p>切换到插入模式：按 i 、o、a键；</p>
<ul>
<li>i 在当前位置前插入</li>
<li>I 在当前行首插入</li>
<li>a 在当前位置后插入</li>
<li>A 在当前行尾插入</li>
<li>o 在当前行之后插入一行</li>
<li>O 在当前行之前插入一行</li>
</ul>
<p>切换到底行模式：按 :（冒号）</p>
<p>打开文件：<code>vim file</code></p>
<p>退出：<code>esc : q</code></p>
<p>修改文件：输入 <code>i</code> 进入插入模式</p>
<p>保存并退出：<code>esc : wq</code></p>
<p>不保存退出：<code>esc : q!</code></p>
<p>快捷键：</p>
<ul>
<li><p>dd – 快速删除一行</p>
</li>
<li><p>yy - 复制当前行</p>
</li>
<li><p>nyy - 从当前行向后复制几行</p>
</li>
<li><p>p - 粘贴</p>
</li>
<li><p>R – 替换</p>
</li>
</ul>
<h4 id="重定向输出-gt-和-gt-gt"><a href="#重定向输出-gt-和-gt-gt" class="headerlink" title="重定向输出&gt; 和 &gt;&gt;"></a>重定向输出&gt; 和 &gt;&gt;</h4><p> 重定向输出，覆盖原有内容；&gt;&gt; 重定向输出，又追加功能；示例：</p>
<ul>
<li><p><code>cat /etc/passwd &gt; a.txt</code>  将输出定向到a.txt中</p>
</li>
<li><p><code>cat /etc/passwd &gt;&gt; a.txt</code>  输出并且追加</p>
</li>
<li><p><code>ifconfig &gt; ifconfig.txt</code></p>
</li>
</ul>
<h4 id="系统管理命令"><a href="#系统管理命令" class="headerlink" title="系统管理命令"></a>系统管理命令</h4><ul>
<li><code>ps</code> 正在运行的某个进程的状态</li>
<li><code>ps –ef</code>  查看所有进程</li>
<li><code>ps –ef | grep ssh</code> 查找某一进程</li>
<li><code>kill 2868</code>  杀掉2868编号的进程</li>
<li><code>kill -9 2868</code>  强制杀死进程</li>
</ul>
<h4 id="管道"><a href="#管道" class="headerlink" title="管道 |"></a>管道 |</h4><p>管道是Linux命令中重要的一个概念，其作用是将一个命令的输出用作另一个命令的输入。</p>
<p>示例：</p>
<ul>
<li><code>ls --help | more</code>  分页查询帮助信息</li>
<li><code>ps –ef | grep java</code>  查询名称中包含java的进程 </li>
<li><code>ifconfig | more</code></li>
<li><code>cat index.html | more</code></li>
<li><code>ps –ef | grep aio</code></li>
</ul>
<h3 id="Linux的权限命令"><a href="#Linux的权限命令" class="headerlink" title="Linux的权限命令"></a>Linux的权限命令</h3><h4 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h4><img src="https://pic.imgdb.cn/item/62568f0f239250f7c52b9dc7.jpg" style="zoom:50%;" />

<img src="https://pic.imgdb.cn/item/62568f7e239250f7c52c6f44.jpg" style="zoom:67%;" />

<p>r : 对文件是指可读取内容 对目录是可以ls</p>
<p>w : 对文件是指可修改文件内容，对目录 是指可以在其中创建或删除子节点(目录或文件)</p>
<p>x : 对文件是指是否可以运行这个文件，对目录是指是否可以cd进入这个目录</p>
<h4 id="Linux三种文件类型"><a href="#Linux三种文件类型" class="headerlink" title="Linux三种文件类型"></a>Linux三种文件类型</h4><p>普通文件： 包括文本文件、数据文件、可执行的二进制程序文件等。 </p>
<p>目录文件： Linux系统把目录看成是一种特殊的文件，利用它构成文件系统的树型结构。 </p>
<p>设备文件： Linux系统把每一个设备都看成是一个文件</p>
<h4 id="文件类型标识"><a href="#文件类型标识" class="headerlink" title="文件类型标识"></a>文件类型标识</h4><p>普通文件（-）目录（d）符号链接（l）</p>
<p>进入etc可以查看，相当于快捷方式字符设备文件（c）块设备文件（s）套接字（s）命名管道（p）</p>
<h4 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h4><p><code>chmod</code> 变更文件或目录的权限。</p>
<p><code>chmod 755 a.txt</code> </p>
<p><code>chmod u=rwx,g=rx,o=rx a.txt</code></p>
<h3 id="Linux上常用网络操作"><a href="#Linux上常用网络操作" class="headerlink" title="Linux上常用网络操作"></a>Linux上常用网络操作</h3><h4 id="主机名配置"><a href="#主机名配置" class="headerlink" title="主机名配置"></a>主机名配置</h4><p><code>hostname</code> 查看主机名</p>
<p><code>hostname xxx</code> 修改主机名 重启后无效</p>
<p>如果想要永久生效，可以修改&#x2F;etc&#x2F;sysconfig&#x2F;network文件</p>
<h4 id="IP地址配置"><a href="#IP地址配置" class="headerlink" title="IP地址配置"></a>IP地址配置</h4><p><code>ifconfig</code> 查看(修改)ip地址(重启后无效)</p>
<p><code>ifconfig eth0 192.168.xxx.xxx</code> 修改ip地址</p>
<p>如果想要永久生效</p>
<p>修改 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DEVICE=eth0 #网卡名称</span><br><span class="line">BOOTPROTO=static #获取ip的方式(static/dhcp/bootp/none)</span><br><span class="line"></span><br><span class="line">HWADDR=00:0C:29:B5:B2:69 #MAC地址</span><br><span class="line">IPADDR=12.168.177.129 #IP地址</span><br><span class="line">NETMASK=255.255.255.0 #子网掩码</span><br><span class="line">NETWORK=192.168.177.0 #网络地址</span><br><span class="line">BROADCAST=192.168.0.255 #广播地址</span><br><span class="line">NBOOT=yes #  系统启动时是否设置此网络接口，设置为yes时，系统启动时激活此设备。</span><br></pre></td></tr></table></figure>

<h4 id="域名映射"><a href="#域名映射" class="headerlink" title="域名映射"></a>域名映射</h4><p>&#x2F;etc&#x2F;hosts文件用于在通过主机名进行访问时做ip地址解析之用,相当于windows系统的C:\Windows\System32\drivers\etc\hosts文件的功能</p>
<h4 id="网络服务管理"><a href="#网络服务管理" class="headerlink" title="网络服务管理"></a>网络服务管理</h4><p><code>service network status</code> 查看指定服务的状态</p>
<p><code>service network stop</code> 停止指定服务</p>
<p><code>service network start</code> 启动指定服务</p>
<p><code>service network restart</code> 重启指定服务</p>
<p><code>service --status–all</code> 查看系统中所有后台服务</p>
<p><code>netstat –nltp</code> 查看系统中网络进程的端口监听情况</p>
<p><strong>防火墙设置</strong></p>
<p>防火墙根据配置文件&#x2F;etc&#x2F;sysconfig&#x2F;iptables来控制本机的”出”、”入”网络访问行为。</p>
<p><code>service iptables status</code> 查看防火墙状态</p>
<p><code>service iptables stop</code> 关闭防火墙</p>
<p><code>service iptables start</code> 启动防火墙</p>
<p><code>chkconfig  iptables off</code> 禁止防火墙自启</p>
<h3 id="Linux上软件安装"><a href="#Linux上软件安装" class="headerlink" title="Linux上软件安装"></a>Linux上软件安装</h3><h4 id="Linux上的软件安装的几种常见方式"><a href="#Linux上的软件安装的几种常见方式" class="headerlink" title="Linux上的软件安装的几种常见方式"></a>Linux上的软件安装的几种常见方式</h4><ol>
<li><p>二进制发布包</p>
<p>软件已经针对具体平台编译打包发布，只要解压，修改配置即可</p>
</li>
<li><p>RPM包</p>
<p>软件已经按照redhat的包管理工具规范RPM进行打包发布，需要获取到相应的软件RPM发布包，然后用RPM命令进行安装</p>
</li>
<li><p>Yum在线安装</p>
<p>软件已经以RPM规范打包，但发布在了网络上的一些服务器上，可用yum在线安装服务器上的rpm软件，并且会自动解决软件安装过程中的库依赖问题</p>
</li>
<li><p>源码编译安装</p>
<p>软件以源码工程的形式发布，需要获取到源码工程后用相应开发工具进行编译打包部署。</p>
</li>
</ol>
<h4 id="上传与下载工具"><a href="#上传与下载工具" class="headerlink" title="上传与下载工具"></a>上传与下载工具</h4><ol>
<li><p><strong>FileZilla</strong></p>
<p>主机名：192.168.18.128    用户名：root   密码：***   端口号：22</p>
<p>一般上传到 &#x2F;usr&#x2F;local 目录下 通过<code>cd /usr/local</code> 查看</p>
</li>
<li><p><strong>Irzsz</strong></p>
<p>使用<code>yum install lrzsz</code>安装</p>
<p>设置目录：</p>
<img src="https://pic.imgdb.cn/item/6257099d239250f7c5f39927.jpg" style="zoom: 67%;" /></li>
</ol>
<p>​    上传文件，放到upload文件夹内，<code>rz</code></p>
<p>​    下载文件：<code>sz 文件名</code>（下载到当前目录）</p>
<ol start="3">
<li><p><strong>sftp</strong></p>
<p>使用 alt + P 打开sftp窗口</p>
<p>上传：<code>put 文件目录</code> </p>
<p>下载：<code>get 文件目录</code></p>
</li>
</ol>
<h4 id="Linux上安装JDK"><a href="#Linux上安装JDK" class="headerlink" title="Linux上安装JDK"></a>Linux上安装JDK</h4><p><a href="https://www.timberkito.com/?p=12">yum安装</a></p>
<ul>
<li>上传JDK到Linux服务器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(1) 上传JDK</span><br><span class="line">(2) 卸载open-JDK</span><br><span class="line"></span><br><span class="line">java –version</span><br><span class="line">rpm -qa | grep java</span><br><span class="line"></span><br><span class="line">rpm -e --nodeps java-1.6.0-openjdk-1.6.0.35-1.13.7.1.el6_6.i686</span><br><span class="line">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.79-2.5.5.4.el6.i686</span><br></pre></td></tr></table></figure>

<ul>
<li>在Linux服务器上安装JDK</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* 通常将软件安装到/usr/local</span><br><span class="line">* 直接解压就可以</span><br><span class="line"></span><br><span class="line">tar –xvf  jdk.tar.gz  -C 目标路径</span><br></pre></td></tr></table></figure>

<ul>
<li>配置JDK的环境变量</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> vim /etc/profile</span><br><span class="line"></span><br><span class="line">* 在末尾行添加</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">set</span> java environment</span></span><br><span class="line">JAVA_HOME=/usr/local/jdk1.7.0_71</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib.tools.jar</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export JAVA_HOME CLASSPATH PATH</span><br><span class="line"></span><br><span class="line">* 保存退出（esc  :wq）</span><br><span class="line">source /etc/profile  使更改的配置立即生效</span><br></pre></td></tr></table></figure>

<h4 id="在Linux上安装MySQL"><a href="#在Linux上安装MySQL" class="headerlink" title="在Linux上安装MySQL"></a>在Linux上安装MySQL</h4><p><a href="https://segmentfault.com/a/1190000022843273">教程</a> （ 重新设置密码为 ‘MyNewPass4!’ ）</p>
<ul>
<li>将MySQL的安装文件上传到Linux的服务器</li>
</ul>
<p>​    （1）将MySQL的tar解压</p>
<p>​    （2）将系统自带的MySQL卸载</p>
<p>​        搜索：<code>rpm -qa | grep mysql</code></p>
<p>​        删除：<code>rpm -e --nodeps 文件名</code></p>
<ul>
<li><p>安装MySQL服务端</p>
<p><code>rpm -ivh MySQL-server-5.6.22-1.el6.i686.rpm</code></p>
</li>
<li><p>安装MySQL客户端</p>
</li>
<li><p>MySQL服务加入到系统服务并自动启动操作</p>
</li>
</ul>
<p>​    <code>chkconfig --add mysql</code></p>
<p>​    自动启动：</p>
<p>​    <code>chkconfig mysql on</code></p>
<p>​    查询列表：</p>
<p>​    <code>chkconfig</code></p>
<ul>
<li><p>关于MySQL远程访问设置</p>
<p>在mysql中设置：</p>
<p><code>grant all privileges on *.* to &#39;root&#39; @&#39;%&#39; identified by &#39;root&#39;;</code></p>
<p><code>finish privileges;</code></p>
<p>在linux中很多软件的端口都被”防火墙”限止，我们需要将防火墙关闭</p>
<p>防火墙打开3306端口</p>
<p><code>/sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT</code></p>
<p><code>/etc/rc.d/init.d/iptables save</code></p>
<p><code>/etc/init.d/iptables status</code></p>
<p>学习阶段我们也可以直接将防火墙关闭</p>
<p><code>service iptables stop;</code></p>
</li>
</ul>
<h4 id="在Linux上安装Tomcat"><a href="#在Linux上安装Tomcat" class="headerlink" title="在Linux上安装Tomcat"></a>在Linux上安装Tomcat</h4><p>1.Tomcat上传到linux上</p>
<p>2.将上传的tomcat解压</p>
<p>3.在tomcat&#x2F;bin目录下执行 startup.sh（注意防火墙）<code>./startup.sh</code></p>
<p>4.查看目标 tomcat&#x2F;logs&#x2F;catalina.out</p>
<p><a href="https://blog.csdn.net/Al_assad/article/details/76383107">出现无法连接的错误</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2022/04/12/Redis/</url>
    <content><![CDATA[<p>本文简单介绍了Redis这一种非关系型数据库</p>
<span id="more"></span>

<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Redis是一款高性能的NOSQL系列的非关系型数据库</p>
<h4 id="什么是NOSQL"><a href="#什么是NOSQL" class="headerlink" title="什么是NOSQL"></a>什么是NOSQL</h4><p>NoSQL(NoSQL &#x3D; Not Only SQL)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。</p>
<p>随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</p>
<h5 id="NOSQL和关系型数据库比较"><a href="#NOSQL和关系型数据库比较" class="headerlink" title="NOSQL和关系型数据库比较"></a>NOSQL和关系型数据库比较</h5><p><img src="https://pic.imgdb.cn/item/62558c7c239250f7c5009c49.jpg"></p>
<p>优点：</p>
<p>1）成本：nosql数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。</p>
<p>2）查询速度：nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosql数据库。                </p>
<p>3）存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种格式，而数据库则只支持基础类型。</p>
<p>4）扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。</p>
<p>缺点：</p>
<p>1）维护的工具和资料有限，因为nosql是属于新的技术，不能和关系型数据库十几年的技术同日而语。            </p>
<p>2）不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定用户的学习和使用成本。</p>
<p>3）不提供关系型数据库对事务的处理。</p>
<h5 id="非关系型数据库的优势："><a href="#非关系型数据库的优势：" class="headerlink" title="非关系型数据库的优势："></a>非关系型数据库的优势：</h5><p>1）性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。</p>
<p>2）可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。</p>
<h5 id="关系型数据库的优势："><a href="#关系型数据库的优势：" class="headerlink" title="关系型数据库的优势："></a>关系型数据库的优势：</h5><p>1）复杂查询可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。</p>
<p>2）事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势，反之亦然。</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库，</p>
<p>让NoSQL数据库对关系型数据库的不足进行弥补。</p>
<p>一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据</p>
<h4 id="主流的NOSQL产品"><a href="#主流的NOSQL产品" class="headerlink" title="主流的NOSQL产品"></a>主流的NOSQL产品</h4><p>​        •    键值(Key-Value)存储数据库<br>​                相关产品： Tokyo Cabinet&#x2F;Tyrant、Redis、Voldemort、Berkeley DB<br>​                典型应用： 内容缓存，主要用于处理大量数据的高访问负载。<br>​                数据模型： 一系列键值对<br>​                优势： 快速查询<br>​                劣势： 存储的数据缺少结构化<br>​        •    列存储数据库<br>​                相关产品：Cassandra, HBase, Riak<br>​                典型应用：分布式的文件系统<br>​                数据模型：以列簇式存储，将同一列数据存在一起<br>​                优势：查找速度快，可扩展性强，更容易进行分布式扩展<br>​                劣势：功能相对局限<br>​        •    文档型数据库<br>​                相关产品：CouchDB、MongoDB<br>​                典型应用：Web应用（与Key-Value类似，Value是结构化的）<br>​                数据模型： 一系列键值对<br>​                优势：数据结构要求不严格<br>​                劣势： 查询性能不高，而且缺乏统一的查询语法<br>​        •    图形(Graph)数据库<br>​                相关数据库：Neo4J、InfoGrid、Infinite Graph<br>​                典型应用：社交网络<br>​                数据模型：图结构<br>​                优势：利用图结构相关算法。<br>​                劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。</p>
<h4 id="什么是Redis"><a href="#什么是Redis" class="headerlink" title="什么是Redis"></a>什么是Redis</h4><p>Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次&#x2F;s,写的速度是81000次&#x2F;s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下：</p>
<pre><code>           1) 字符串类型 string
           2) 哈希类型 hash
           3) 列表类型 list
           4) 集合类型 set
           5) 有序集合类型 sortedset
</code></pre>
<h5 id="redis的应用场景"><a href="#redis的应用场景" class="headerlink" title="redis的应用场景"></a>redis的应用场景</h5><p>•    缓存（数据查询、短连接、新闻内容、商品内容等等）<br>•    聊天室的在线好友列表<br>•    任务队列。（秒杀、抢购、12306等等）<br>•    应用排行榜<br>•    网站访问统计<br>•    数据过期处理（可以精确到毫秒<br>•    分布式集群架构中的session分离</p>
<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ol>
<li>官网：<a href="https://redis.io/">https://redis.io</a></li>
<li>中文网：<a href="http://www.redis.net.cn/">http://www.redis.net.cn/</a> （可以查询常用命令）</li>
<li>centos安装redis： <a href="https://zhuanlan.zhihu.com/p/34527270">https://zhuanlan.zhihu.com/p/34527270</a></li>
</ol>
<h3 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h3><h4 id="redis的数据结构"><a href="#redis的数据结构" class="headerlink" title="redis的数据结构"></a>redis的数据结构</h4><ul>
<li>redis存储的是：key,value格式的数据，其中<strong>key都是字符串</strong>，value有5种不同的数据结构<ul>
<li><strong>value的数据结构</strong>：<ol>
<li>字符串类型 <strong>string</strong></li>
<li>哈希类型 <strong>hash</strong> ： map格式  </li>
<li>列表类型 <strong>list</strong> ： linkedlist格式。支持重复元素</li>
<li>集合类型 <strong>set</strong>  ： 不允许重复元素</li>
<li>有序集合类型 <strong>sortedset</strong>：不允许重复元素，且元素有顺序</li>
</ol>
</li>
</ul>
</li>
</ul>
<ol>
<li><strong>字符串类型 string</strong></li>
</ol>
<ul>
<li><p>存储： <code>set key value</code></p>
</li>
<li><p>获取： <code>get key</code></p>
</li>
<li><p>删除： <code>del key</code></p>
</li>
</ul>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set username zhangsan</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; get username</span><br><span class="line">&quot;zhangsan&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; del age</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>哈希类型 hash</strong></li>
</ol>
<ul>
<li><p>存储： <code>hset key field value</code></p>
</li>
<li><p>获取： </p>
<p>（1）<code>hget key field</code>: 获取指定的field对应的值</p>
<p>（2）<code>hgetall key</code>：获取所有的field和value</p>
</li>
<li><p>删除： <code>hdel key field</code></p>
</li>
</ul>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset myhash username lisi</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset myhash password 123</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hget myhash username</span><br><span class="line">&quot;lisi&quot;</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) &quot;username&quot;</span><br><span class="line">2) &quot;zzq&quot;</span><br><span class="line">3) &quot;password&quot;</span><br><span class="line">4) &quot;123&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hdel myhash username</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>**列表类型 list:**可以添加一个元素到列表的头部（左边）或者尾部（右边）</li>
</ol>
<ul>
<li><p>添加：</p>
<p>（1）<code>lpush key value</code>: 将元素加入列表左表</p>
<p>（2）<code>rpush key value</code>：将元素加入列表右边</p>
</li>
<li><p>获取：</p>
<p><code>lrange key start end</code> ：范围获取</p>
</li>
<li><p>删除：</p>
<p>（1）<code>lpop key</code>： 删除列表最左边的元素，并将元素返回</p>
<p>（2）<code>rpop key</code>： 删除列表最右边的元素，并将元素返回</p>
</li>
</ul>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush myList a</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush myList b</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; rpush myList c</span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lrange myList 0 -1</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) &quot;c&quot;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p><strong>集合类型 set</strong> ： 不允许重复元素</p>
<ul>
<li><p>存储：<code>sadd key value</code></p>
</li>
<li><p>获取：<code>smembers key</code>：获取set集合中所有元素</p>
</li>
<li><p>删除：<code>srem key value</code>：删除set集合中的某个元素</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset a</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset a</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; srem myset a</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>有序集合类型 sortedset</strong>：不允许重复元素，且元素有顺序.每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p>
<ul>
<li><p>存储：<code>zadd key score value</code></p>
</li>
<li><p>获取：<code>zrange key start end [withscores]</code></p>
</li>
<li><p>删除：<code>zrem key value</code></p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd mysort 60 zhangsan</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd mysort 50 lisi</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd mysort 80 wangwu</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zrange mysort 0 -1</span><br><span class="line"></span><br><span class="line">1) &quot;lisi&quot;</span><br><span class="line">2) &quot;zhangsan&quot;</span><br><span class="line">3) &quot;wangwu&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zrange mysort 0 -1 withscores</span><br><span class="line">1) &quot;zhangsan&quot;</span><br><span class="line">2) &quot;60&quot;</span><br><span class="line">3) &quot;wangwu&quot;</span><br><span class="line">4) &quot;80&quot;</span><br><span class="line">5) &quot;lisi&quot;</span><br><span class="line">6) &quot;500&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zrem mysort lisi</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>通用命令</p>
</li>
</ol>
<ul>
<li><p><code>keys </code>*  : 查询所有的键</p>
</li>
<li><p><code>type key</code> ： 获取键对应的value的类型</p>
</li>
<li><p><code>del key</code>：删除指定的key value</p>
</li>
</ul>
<h3 id="Redis的持久化"><a href="#Redis的持久化" class="headerlink" title="Redis的持久化"></a>Redis的持久化</h3><p>Redis是一个内存数据库，当Redis服务器重启，获取电脑重启，数据会丢失，我们可以将Redis内存中的数据持久化保存到硬盘的文件中。</p>
<p>如果不进行持久化，那么Redis就相当于一个很大的map集合</p>
<h4 id="Redis持久化机制"><a href="#Redis持久化机制" class="headerlink" title="Redis持久化机制"></a>Redis持久化机制</h4><ol>
<li><p>RDB：默认方式，不需要进行配置，默认就使用这种机制</p>
<ul>
<li>在一定的间隔时间中，检测key的变化情况，然后持久化数据</li>
</ul>
</li>
<li><p>AOF：日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据</p>
</li>
</ol>
<p>linux下查看持久化机制命令：<code>info persistence</code></p>
<p><a href="https://blog.csdn.net/weixin_42510262/article/details/112716638">配置方法</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; INFO persistence</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Persistence</span></span><br><span class="line">loading:0</span><br><span class="line">current_cow_size:0</span><br><span class="line">current_cow_size_age:0</span><br><span class="line">current_fork_perc:0.00</span><br><span class="line">current_save_keys_processed:0</span><br><span class="line">current_save_keys_total:0</span><br><span class="line">rdb_changes_since_last_save:7</span><br><span class="line">rdb_bgsave_in_progress:0</span><br><span class="line">rdb_last_save_time:1649782802</span><br><span class="line">rdb_last_bgsave_status:ok</span><br><span class="line">rdb_last_bgsave_time_sec:0</span><br><span class="line">rdb_current_bgsave_time_sec:-1</span><br><span class="line">rdb_last_cow_size:2256896</span><br><span class="line">aof_enabled:0</span><br><span class="line">aof_rewrite_in_progress:0</span><br><span class="line">aof_rewrite_scheduled:0</span><br><span class="line">aof_last_rewrite_time_sec:-1</span><br><span class="line">aof_current_rewrite_time_sec:-1</span><br><span class="line">aof_last_bgrewrite_status:ok</span><br><span class="line">aof_last_write_status:ok</span><br><span class="line">aof_last_cow_size:0</span><br><span class="line">module_fork_in_progress:0</span><br><span class="line">module_fork_last_cow_size:0</span><br></pre></td></tr></table></figure>



<h3 id="Java客户端-Jedis"><a href="#Java客户端-Jedis" class="headerlink" title="Java客户端  Jedis"></a>Java客户端  Jedis</h3><p>Jedis: 一款java操作redis数据库的工具.</p>
<p>使用步骤：</p>
<ol>
<li><p>下载jedis的jar包</p>
</li>
<li><p>使用（注意打开Redis服务器，并要导入相关jar包，如junit, servlet）</p>
</li>
</ol>
<p>  （包含jedis连接池的使用）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jedis.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.jedis.util.JedisPoolUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jedis的测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速入门</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取连接</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//2. 操作</span></span><br><span class="line">        jedis.set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="comment">//3. 关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * string 数据结构操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取连接</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>();<span class="comment">//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span></span><br><span class="line">        <span class="comment">//2. 操作</span></span><br><span class="line">        <span class="comment">//存储</span></span><br><span class="line">        jedis.set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="comment">//获取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以使用setex()方法存储可以指定过期时间的 key value</span></span><br><span class="line">        jedis.setex(<span class="string">&quot;activecode&quot;</span>,<span class="number">20</span>,<span class="string">&quot;hehe&quot;</span>);<span class="comment">//将activecode：hehe键值对存入redis，并且20秒后自动删除该键值对</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash 数据结构操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取连接</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>();<span class="comment">//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span></span><br><span class="line">        <span class="comment">//2. 操作</span></span><br><span class="line">        <span class="comment">// 存储hash</span></span><br><span class="line">        jedis.hset(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;23&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;gender&quot;</span>,<span class="string">&quot;female&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取hash</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jedis.hget(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取hash的所有map中的数据</span></span><br><span class="line">        Map&lt;String, String&gt; user = jedis.hgetAll(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// keyset</span></span><br><span class="line">        Set&lt;String&gt; keySet = user.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            <span class="comment">//获取value</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> user.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;:&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * list 数据结构操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取连接</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>();<span class="comment">//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span></span><br><span class="line">        <span class="comment">//2. 操作</span></span><br><span class="line">        <span class="comment">// list 存储</span></span><br><span class="line">        jedis.lpush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);<span class="comment">//从左边存</span></span><br><span class="line">        jedis.rpush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);<span class="comment">//从右边存</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// list 范围获取</span></span><br><span class="line">        List&lt;String&gt; mylist = jedis.lrange(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        System.out.println(mylist);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// list 弹出</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">element1</span> <span class="operator">=</span> jedis.lpop(<span class="string">&quot;mylist&quot;</span>);<span class="comment">//c</span></span><br><span class="line">        System.out.println(element1);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">element2</span> <span class="operator">=</span> jedis.rpop(<span class="string">&quot;mylist&quot;</span>);<span class="comment">//c</span></span><br><span class="line">        System.out.println(element2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// list 范围获取</span></span><br><span class="line">        List&lt;String&gt; mylist2 = jedis.lrange(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        System.out.println(mylist2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set 数据结构操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取连接</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>();<span class="comment">//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span></span><br><span class="line">        <span class="comment">//2. 操作</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// set 存储</span></span><br><span class="line">        jedis.sadd(<span class="string">&quot;myset&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;php&quot;</span>,<span class="string">&quot;c++&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set 获取</span></span><br><span class="line">        Set&lt;String&gt; myset = jedis.smembers(<span class="string">&quot;myset&quot;</span>);</span><br><span class="line">        System.out.println(myset);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sortedset 数据结构操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取连接</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>();<span class="comment">//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span></span><br><span class="line">        <span class="comment">//2. 操作</span></span><br><span class="line">        <span class="comment">// sortedset 存储</span></span><br><span class="line">        jedis.zadd(<span class="string">&quot;mysortedset&quot;</span>,<span class="number">3</span>,<span class="string">&quot;亚瑟&quot;</span>);</span><br><span class="line">        jedis.zadd(<span class="string">&quot;mysortedset&quot;</span>,<span class="number">30</span>,<span class="string">&quot;后裔&quot;</span>);</span><br><span class="line">        jedis.zadd(<span class="string">&quot;mysortedset&quot;</span>,<span class="number">55</span>,<span class="string">&quot;孙悟空&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sortedset 获取</span></span><br><span class="line">        Set&lt;String&gt; mysortedset = jedis.zrange(<span class="string">&quot;mysortedset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(mysortedset);</span><br><span class="line">        <span class="comment">//3. 关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * jedis连接池使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//0.创建一个配置对象</span></span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        config.setMaxTotal(<span class="number">50</span>);</span><br><span class="line">        config.setMaxIdle(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//1.创建Jedis连接池对象</span></span><br><span class="line">        <span class="type">JedisPool</span> <span class="variable">jedisPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPool</span>(config,<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPool.getResource();</span><br><span class="line">        <span class="comment">//3. 使用</span></span><br><span class="line">        jedis.set(<span class="string">&quot;hehe&quot;</span>,<span class="string">&quot;heihei&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 关闭 归还到连接池中</span></span><br><span class="line">        jedis.close();;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * jedis连接池工具类使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test8</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//通过连接池工具类获取</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> JedisPoolUtils.getJedis();</span><br><span class="line">        <span class="comment">//3. 使用</span></span><br><span class="line">        jedis.set(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 关闭 归还到连接池中</span></span><br><span class="line">        jedis.close();;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>连接池工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> JedisPool工具类</span></span><br><span class="line"><span class="comment">    加载配置文件，配置连接池的参数</span></span><br><span class="line"><span class="comment">    提供获取连接的方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisPoolUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> JedisPoolUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jedis.properties&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Properties对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//关联文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pro.load(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取数据，设置到JedisPoolConfig中</span></span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        config.setMaxTotal(Integer.parseInt(pro.getProperty(<span class="string">&quot;maxTotal&quot;</span>)));</span><br><span class="line">        config.setMaxIdle(Integer.parseInt(pro.getProperty(<span class="string">&quot;maxIdle&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化JedisPool</span></span><br><span class="line">        jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(config,pro.getProperty(<span class="string">&quot;host&quot;</span>),Integer.parseInt(pro.getProperty(<span class="string">&quot;port&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedis</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>jedis.properties配置设置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">maxTotal</span>=<span class="string">50</span></span><br><span class="line"><span class="attr">maxIdle</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet</title>
    <url>/2022/04/12/servlet/</url>
    <content><![CDATA[<p>本文简单介绍了Servlet的相关概念</p>
<span id="more"></span>

<h3 id="Servlet：-server-applet"><a href="#Servlet：-server-applet" class="headerlink" title="Servlet： server applet"></a>Servlet： server applet</h3><ul>
<li><p>概念：运行在服务器端的小程序</p>
<ul>
<li>Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。</li>
<li>将来我们自定义一个类，实现Servlet接口，复写方法。</li>
</ul>
</li>
<li><p>快速入门：</p>
<ol>
<li><p>创建JavaEE项目</p>
</li>
<li><p>定义一个类，实现Servlet接口</p>
<ul>
<li>public class ServletDemo1 implements Servlet</li>
</ul>
</li>
<li><p>实现接口中的抽象方法</p>
</li>
<li><p>配置Servlet<br>  在web.xml中配置：</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.web.servlet.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>执行原理：</p>
<ol>
<li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li>
<li>查找web.xml文件，是否有对应的<code>&lt;url-pattern&gt;</code>标签体内容。</li>
<li>如果有，则在找到对应的<code>&lt;servlet-class&gt;</code>全类名</li>
<li>tomcat会将字节码文件加载进内存，并且创建其对象</li>
<li>调用其方法</li>
</ol>
</li>
<li><p>Servlet中的生命周期方法：</p>
<ol>
<li>被创建：执行init方法，只执行一次<ul>
<li>Servlet什么时候被创建？<ul>
<li>默认情况下，第一次被访问时，Servlet被创建</li>
<li>可以配置执行Servlet的创建时机。<ul>
<li>在<code>&lt;servlet&gt;</code>标签下配置<ol>
<li>第一次被访问时，创建</li>
</ol>
<ul>
<li><code>&lt;load-on-startup&gt;</code>的值为负数</li>
</ul>
</li>
</ul>
<ol start="2">
<li>在服务器启动时，创建<ul>
<li><code>&lt;load-on-startup&gt;</code>的值为0或正整数</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li><p>Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的<br>      * 多个用户同时访问时，可能存在线程安全问题。<br>      * 解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值</p>
<ol start="2">
<li>提供服务：执行service方法，执行多次<ul>
<li>每次访问Servlet时，Service方法都会被调用一次。</li>
</ul>
</li>
<li>被销毁：执行destroy方法，只执行一次<ul>
<li>Servlet被销毁时执行。服务器关闭时，Servlet被销毁</li>
<li>只有服务器正常关闭时，才会执行destroy方法。</li>
<li>destroy方法在Servlet被销毁之前执行，一般用于释放资源</li>
</ul>
</li>
</ol>
</li>
<li><p>Servlet3.0：</p>
<ul>
<li><p>好处：</p>
<ul>
<li>支持注解配置。可以不需要web.xml了。</li>
</ul>
</li>
<li><p>步骤：</p>
<ol>
<li>创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml</li>
<li>定义一个类，实现Servlet接口</li>
<li>复写方法</li>
<li>在类上使用@WebServlet注解，进行配置</li>
</ol>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat</title>
    <url>/2022/04/12/Tomcat/</url>
    <content><![CDATA[<p>本文中简单介绍了web的相关概念，另外着重介绍了web服务器软件：Tomcat的基础知识</p>
<span id="more"></span>

<h3 id="Web相关概念"><a href="#Web相关概念" class="headerlink" title="Web相关概念"></a>Web相关概念</h3><ol>
<li><p><strong>软件架构</strong></p>
<ul>
<li><p>C&#x2F;S：客户端&#x2F;服务器端</p>
</li>
<li><p>B&#x2F;S：浏览器&#x2F;服务器端</p>
</li>
</ul>
</li>
<li><p><strong>资源分类</strong></p>
<ul>
<li><p><strong>静态资源</strong>：所有用户访问后，得到的结果都是一样的，称为静态资源。静态资源可以直接被浏览器解析</p>
<p>如： html,css,JavaScript</p>
</li>
<li><p><strong>动态资源</strong>：每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器</p>
<p>如：servlet&#x2F;jsp,php,asp….</p>
<img src="https://pic.imgdb.cn/item/625571df239250f7c5d34f65.jpg" style="zoom: 67%;" /></li>
</ul>
</li>
<li><p><strong>网络通信三要素</strong></p>
<ul>
<li><p><strong>IP</strong>：电子设备(计算机)在网络中的唯一标识。</p>
</li>
<li><p><strong>端口</strong>：应用程序在计算机中的唯一标识。 0~65536</p>
</li>
<li><p><strong>传输协议</strong>：规定了数据传输的规则</p>
</li>
<li><p><strong>基础协议</strong>：</p>
<ul>
<li><p>TCP：安全协议，三次握手。 速度稍慢</p>
</li>
<li><p>UDP：不安全协议。 速度快</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="Web服务器软件"><a href="#Web服务器软件" class="headerlink" title="Web服务器软件"></a>Web服务器软件</h3><ul>
<li><p>服务器：安装了服务器软件的计算机</p>
</li>
<li><p>服务器软件：接收用户的请求，处理请求，做出响应</p>
</li>
<li><p>web服务器软件：接收用户的请求，处理请求，做出响应。</p>
<ul>
<li>在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目</li>
<li>web容器（动态资源必须在web容器中运行）</li>
</ul>
</li>
<li><p>常见的java相关的web服务器软件：</p>
<ul>
<li>webLogic：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li>
<li>webSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li>
<li>JBOSS：JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li>
<li><strong>Tomcat</strong>：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet&#x2F;jsp。开源的，免费的。</li>
</ul>
</li>
<li><p><strong>JavaEE：Java语言在企业级开发中使用的技术规范的总和</strong>，一共规定了13项大的规范</p>
</li>
<li><p>Tomcat：web服务器软件</p>
<ol>
<li><p>下载：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></p>
</li>
<li><p>安装：解压压缩包即可。</p>
<ul>
<li>注意：安装目录建议不要有中文和空格</li>
</ul>
<p> <img src="C:\Users\win10\AppData\Roaming\Typora\typora-user-images\image-20220412205215019.png" alt="Tomcat目录结构">
 </p>
</li>
<li><p>卸载：删除目录就行了</p>
</li>
<li><p>启动：</p>
<ul>
<li><p>bin&#x2F;startup.bat ,双击运行该文件即可</p>
<p>   （如果出现乱码问题，需要打开conf&#x2F;logging.properties，找到<code>java.util.logging.ConsoleHandler.encoding = UTF-8</code>，将UTF-8修改为GDB，保存后重启）</p>
</li>
<li><p>访问：浏览器输入：<a href="http://localhost:8080/">http://localhost:8080</a> 回车访问自己（我的本地ip为192.168.17.1）<br>            http:&#x2F;&#x2F;别人的ip:8080 访问别人</p>
</li>
<li><p>可能遇到的问题：</p>
<ol>
<li><p>黑窗口一闪而过：</p>
<ul>
<li>原因： 没有正确配置JAVA_HOME环境变量</li>
<li>解决方案：正确配置JAVA_HOME环境变量</li>
</ul>
</li>
<li><p>启动报错（出现403错误，为端口被占用的问题）：</p>
<p> 暴力：找到占用的端口号，并且找到对应的进程，杀死该进程</p>
<ul>
<li>cmd输入 netstat -ano  （或加入端口号搜索更为方便<code>netstat -an0 | findstr 8080</code>）</li>
</ul>
<p> 温柔：修改自身的端口号</p>
</li>
</ol>
<ul>
<li>在tomcat目录下打开：conf&#x2F;server.xml</li>
<li><code>&lt;Connector port=&quot;8888&quot; protocol=&quot;HTTP/1.1&quot;     connectionTimeout=&quot;20000&quot;     redirectPort=&quot;8445&quot; /&gt;</code><ul>
<li>一般会将tomcat的默认端口号修改为80。80端口号是http协议的默认端口号。<ul>
<li>好处：在访问时，就不用输入端口号</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>关闭：</p>
<ol>
<li>正常关闭：<ul>
<li>bin&#x2F;shutdown.bat</li>
<li>ctrl+c</li>
</ul>
</li>
<li>强制关闭：点击启动窗口的×</li>
</ol>
</li>
<li><p>配置:</p>
<p> <strong>部署项目的方式：</strong>（三种方式）</p>
<ol>
<li><p>直接将项目放到webapps目录下即可。</p>
<ul>
<li>&#x2F;hello：项目的访问路径–&gt;虚拟目录</li>
<li>简化部署：将项目打成一个war包（简单起见可以先压缩成zip再改后缀为war），再将war包放置到webapps目录下。<ul>
<li>war包会自动解压缩</li>
</ul>
</li>
</ul>
</li>
<li><p>配置conf&#x2F;server.xml文件<br> 在<code>&lt;Host&gt;</code>标签体中配置<br> <code>&lt;Context docBase=&quot;D:\hello&quot; path=&quot;/hehe&quot; /&gt;</code></p>
<ul>
<li>docBase:项目存放的路径</li>
<li>path：虚拟目录</li>
</ul>
</li>
<li><p>在conf\Catalina\localhost创建任意名称的xml文件。在文件中编写<br> <code>&lt;Context docBase=&quot;D:\hello&quot; /&gt;</code></p>
<ul>
<li>虚拟目录：xml文件的名称</li>
</ul>
</li>
</ol>
<p> <strong>静态项目和动态项目：</strong></p>
<ul>
<li><p>目录结构</p>
<ul>
<li>java动态项目的目录结构：<br>  – 项目的根目录<br>  – WEB-INF目录：<br>      – web.xml：web项目的核心配置文件<br>      – classes目录：放置字节码文件的目录<br>      – lib目录：放置依赖的jar包</li>
</ul>
</li>
<li><p>将Tomcat集成到IDEA中，并且创建JavaEE的项目，部署项目。</p>
</li>
</ul>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>XML</title>
    <url>/2022/04/12/XML/</url>
    <content><![CDATA[<p>本文中包含XML的基础知识，包含基本概念、语法及解析</p>
<span id="more"></span>

<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Extensible Markup Language 可扩展标记语言</p>
<ul>
<li>可扩展：标签都是自定义的。 <code>&lt;user&gt;  &lt;student&gt;</code></li>
<li>功能：<strong>存储数据</strong><ol>
<li>作为配置文件使用</li>
<li>在网络中传输（与web service有关）</li>
</ol>
</li>
<li>xml与html的区别<ol>
<li>xml标签都是自定义的，html标签是预定义。</li>
<li>xml的语法非常严格，html语法松散</li>
<li>xml是存储数据的，html是展示数据</li>
</ol>
</li>
<li>w3c:万维网联盟</li>
</ul>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul>
<li><p>基本语法：</p>
<ol>
<li>xml文档的后缀名 .xml</li>
<li>xml第一行必须定义为文档声明</li>
<li>xml文档中有且仅有一个根标签</li>
<li>属性值必须使用引号(单双都可)引起来</li>
<li>标签必须正确关闭</li>
<li>xml标签名称区分大小写（html标签不区分大小写）</li>
</ol>
</li>
<li><p>快速入门：</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&#x27;1&#x27;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">gender</span>&gt;</span>male<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&#x27;2&#x27;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>lisi<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">age</span>&gt;</span>24<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">gender</span>&gt;</span>female<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>  （XML可以被浏览器解析，因此可以直接拖到浏览器中判断是否写对）</p>
</li>
<li><p>组成部分：</p>
<ol>
<li>文档声明<ol>
<li>格式：<code>&lt;?xml 属性列表 ?&gt;</code></li>
<li>属性列表：</li>
</ol>
<ul>
<li>version：版本号，必须的属性</li>
<li>encoding：编码方式。告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1</li>
<li>standalone：是否独立<ul>
<li>取值：<br>* yes：不依赖其他文件<br>* no：依赖其他文件</li>
</ul>
</li>
</ul>
</li>
<li>指令(了解)：结合css的<ul>
<li><code>&lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;a.css&quot; ?&gt;</code></li>
</ul>
</li>
<li>标签：标签名称自定义的<ul>
<li>规则：<ul>
<li>名称可以包含字母、数字以及其他的字符 </li>
<li>名称不能以数字或者标点符号开始 </li>
<li>名称不能以字母 xml（或者 XML、Xml 等等）开始 </li>
<li>名称不能包含空格</li>
</ul>
</li>
</ul>
</li>
<li>属性：<br> id属性值唯一</li>
<li>文本：<ul>
<li>CDATA区：在该区域中的数据会被原样展示<ul>
<li>格式：  <code>&lt;![CDATA[ 数据 ]]&gt;</code>   (Alt+Enter)</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li><p>约束：规定xml文档的书写规则<br>  * 作为框架的使用者(程序员)：<br>      1. 能够在xml中引入约束文档<br>  2. 能够简单的读懂约束文档</p>
<ul>
<li><p>分类：</p>
<ol>
<li>DTD:一种简单的约束技术</li>
<li>Schema:一种复杂的约束技术</li>
</ol>
</li>
<li><p>DTD：<br>      * 引入dtd文档到xml文档中<br>          * 内部dtd：将约束规则定义在xml文档中<br>  * 外部dtd：将约束的规则定义在外部的dtd文件中<br>       * 本地：<code>&lt;!DOCTYPE 根标签名 SYSTEM &quot;dtd文件的位置&quot;&gt;</code><br>       * 网络：<code>&lt;!DOCTYPE 根标签名 PUBLIC &quot;dtd文件名字&quot; &quot;dtd文件的位置URL&quot;&gt;</code></p>
</li>
<li><p>Schema:<br>   * 引入：<br>    1. 填写xml文档的根元素<br>    2. 引入xsi前缀.  xmlns:xsi&#x3D;”<a href="http://www.w3.org/2001/XMLSchema-instance&quot;">http://www.w3.org/2001/XMLSchema-instance&quot;</a><br>    3. 引入xsd文件命名空间.  xsi:schemaLocation&#x3D;”<a href="http://www.itcast.cn/xml">http://www.itcast.cn/xml</a>  student.xsd”<br>    4. 为每一个xsd约束声明一个前缀,作为标识  xmlns&#x3D;”<a href="http://www.itcast.cn/xml&quot;">http://www.itcast.cn/xml&quot;</a> </p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">xmlns</span>=<span class="string">&quot;http://www.itcast.cn/xml&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.itcast.cn/xml  student.xsd&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">&quot;heima_0001&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>操作xml文档，将文档中的数据读取到内存中</p>
<ul>
<li><p>操作xml文档</p>
<ol>
<li>解析(读取)：将文档中的数据读取到内存中</li>
<li>写入：将内存中的数据保存到xml文档中。持久化的存储</li>
</ol>
</li>
<li><p>解析xml的方式（两种思想）：</p>
<ol>
<li>DOM：将标记语言文档一次性加载进内存，在内存中形成一颗dom树 (一般用于服务端)<ul>
<li>优点：操作方便，可以对文档进行CRUD的所有操作</li>
<li>缺点：占内存</li>
</ul>
</li>
<li>SAX：逐行读取，基于事件驱动的。<ul>
<li>优点：不占内存。</li>
<li>缺点：只能读取，不能增删改</li>
</ul>
</li>
</ol>
</li>
<li><p>xml常见的解析器：<br>  1. JAXP：sun公司提供的解析器，支持dom和sax两种思想<br>  2. DOM4J：一款非常优秀的解析器<br>  3. Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。<br>  4. PULL：Android操作系统内置的解析器，sax方式的。</p>
</li>
<li><p>Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</p>
<ul>
<li>步骤：<br>        1. 导入jar包<br>          2. 获取Document对象<br>          3. 获取对应的标签Element对象<br>          4. 获取数据</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jsoup快速入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsoupDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, URISyntaxException &#123;</span><br><span class="line">        <span class="comment">//2.获取Document对象，根据xml文档获取</span></span><br><span class="line">        <span class="comment">//2.1获取student.xml的path</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> JsoupDemo1.class.getClassLoader().getResource(<span class="string">&quot;student.xml&quot;</span>).toURI().getPath();</span><br><span class="line">        <span class="comment">//2.2解析xml文档，加载文档进内存，获取dom树---&gt;Document</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">File</span>(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//3.获取元素对象 Element</span></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">elements</span> <span class="operator">=</span> document.getElementsByTag(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(elements.size());</span><br><span class="line">        <span class="comment">//3.1获取第一个name的Element对象</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">element</span> <span class="operator">=</span> elements.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//3.2获取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> element.text();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p>对象的使用：</p>
<ol>
<li><p>Jsoup：工具类，可以解析html或xml文档，返回Document</p>
<ul>
<li>parse：解析html或xml文档，返回Document<ul>
<li><code>parse(File in, String charsetName)</code>：解析xml或html文件的。</li>
<li><code>parse(String html)</code>：解析xml或html字符串</li>
<li><code>parse(URL url, int timeoutMillis)</code>：通过网络路径获取指定的html或xml的文档对象</li>
</ul>
</li>
</ul>
</li>
<li><p>Document：文档对象。代表内存中的dom树</p>
<ul>
<li>获取Element对象<ul>
<li><code>getElementById(String id)</code>：根据id属性值获取唯一的element对象</li>
<li><code>getElementsByTag(String tagName)</code>：根据标签名称获取元素对象集合</li>
<li><code>getElementsByAttribute(String key)</code>：根据属性名称获取元素对象集合</li>
<li><code>getElementsByAttributeValue(String key, String value)</code>：根据对应的属性名和属性值获取元素对象集合</li>
</ul>
</li>
</ul>
</li>
<li><p>Elements：元素Element对象的集合。可以当做 <code>ArrayList&lt;Element&gt;</code>来使用</p>
</li>
<li><p>Element：元素对象</p>
<ol>
<li><p>获取子元素对象</p>
<ul>
<li><code>getElementById(String id)</code>：根据id属性值获取唯一的element对象</li>
<li><code>getElementsByTag(String tagName)</code>：根据标签名称获取元素对象集合</li>
<li><code>getElementsByAttribute(String key)</code>：根据属性名称获取元素对象集合</li>
<li><code>getElementsByAttributeValue(String key, String value)</code>：根据对应的属性名和属性值获取元素对象集合</li>
</ul>
</li>
<li><p>获取属性值</p>
<ul>
<li><code>String attr(String key)</code>：根据属性名称获取属性值</li>
</ul>
</li>
<li><p>获取文本内容</p>
<ul>
<li><code>String text()</code>:获取文本内容</li>
<li><code>String html()</code>:获取标签体的所有内容(包括字标签的字符串内容)</li>
</ul>
</li>
</ol>
</li>
<li><p>Node：节点对象</p>
<ul>
<li>是Document和Element的父类</li>
</ul>
</li>
</ol>
</li>
<li><p>快捷查询方式：</p>
<ol>
<li>selector:选择器<ul>
<li>使用的方法：<code>Elements select(String cssQuery)</code><ul>
<li>语法：参考Selector类中定义的语法</li>
</ul>
</li>
</ul>
</li>
<li>XPath：XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言<ul>
<li>使用Jsoup的Xpath需要额外导入jar包。</li>
<li>查询w3cshool参考手册，使用xpath的语法完成查询</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *XPath查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsoupDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, XpathSyntaxErrorException &#123;</span><br><span class="line">        <span class="comment">//1.获取student.xml的path</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> JsoupDemo6.class.getClassLoader().getResource(<span class="string">&quot;student.xml&quot;</span>).toURI().getPath();</span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">File</span>(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.根据document对象，创建JXDocument对象</span></span><br><span class="line">        <span class="type">JXDocument</span> <span class="variable">jxDocument</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JXDocument</span>(document);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.结合xpath语法查询</span></span><br><span class="line">        <span class="comment">//4.1查询所有student标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes = jxDocument.selN(<span class="string">&quot;//student&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.2查询所有student标签下的name标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes2 = jxDocument.selN(<span class="string">&quot;//student/name&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes2) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.3查询student标签下带有id属性的name标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes3 = jxDocument.selN(<span class="string">&quot;//student/name[@id]&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes3) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//4.4查询student标签下带有id属性的name标签 并且id属性值为itcast</span></span><br><span class="line"></span><br><span class="line">        List&lt;JXNode&gt; jxNodes4 = jxDocument.selN(<span class="string">&quot;//student/name[@id=&#x27;itcast&#x27;]&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes4) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC、数据库连接池、JDBCTemplate</title>
    <url>/2022/04/02/JDBC/</url>
    <content><![CDATA[<p>概述：本文记录了JDBC (Java DataBase Connectivity) 的相关知识，JDBC的基本概念级用法，数据库的连接池和JDBCTemplate。</p>
<span id="more"></span>

<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h3 id="JDBC的基本概念"><a href="#JDBC的基本概念" class="headerlink" title="JDBC的基本概念"></a>JDBC的基本概念</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Java DataBase Connectivity   是Java数据库连接， Java语言操作数据库</p>
<p>JDBC本质：其实是官方（sun公司）<strong>定义的一套操作所有关系型数据库的规则，即接口</strong>。</p>
<p>各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</p>
<p><img src="https://pic.imgdb.cn/item/6247db5a27f86abb2a4748c1.jpg"></p>
<h4 id="完整的连接步骤："><a href="#完整的连接步骤：" class="headerlink" title="完整的连接步骤："></a>完整的连接步骤：</h4><p>步骤：</p>
<p>（注意检查JDK的版本是否对应，另外注意executeUpdate只能用于操作Update语句，不能用于Select等语句）</p>
<ol>
<li><p>导入驱动jar包 如mysql-connector-java-8.0.13.jar（mysql8.0之前的要用另外的版本）<br> （1）复制jar包到项目的libs目录下<br> （2）右键–&gt;Add As Library</p>
</li>
<li><p>注册驱动</p>
</li>
<li><p>获取数据库连接对象 Connection </p>
<p>（注意账号密码对应，数据库名字对应，设置useSSL和serverTimezone）</p>
</li>
<li><p>定义sql</p>
</li>
<li><p>获取执行sql语句的对象 Statement</p>
</li>
<li><p>执行sql，接受返回结果</p>
</li>
<li><p>处理结果</p>
</li>
<li><p>释放资源</p>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC快速入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 导入驱动jar包</span></span><br><span class="line">        <span class="comment">//2.注册驱动 mysql 5 之后注册驱动可以省略</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//3.获取数据库连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/bjpowernode?useSSL=false&amp;serverTimezone=GMT%2B8&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//4.定义sql语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_user set name = &#x27;abc&#x27; where id = 2;&quot;</span>;</span><br><span class="line">        <span class="comment">//5.获取执行sql的对象 Statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="comment">//6.执行sql</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line">        <span class="comment">//7.处理结果</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="comment">//8.释放资源</span></span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="详解各个对象"><a href="#详解各个对象" class="headerlink" title="详解各个对象"></a>详解各个对象</h4><h5 id="DriverManager：驱动管理对象"><a href="#DriverManager：驱动管理对象" class="headerlink" title="DriverManager：驱动管理对象"></a>DriverManager：驱动管理对象</h5><p>功能：</p>
<ol>
<li>注册驱动：告诉程序该使用哪一个数据库驱动jar<br> static void registerDriver(Driver driver) : 注册与给定的驱动程序 DriverManager 。</li>
</ol>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写代码使用：  Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class="line"><span class="comment">//通过查看源码发现：在com.mysql.cj.jdbc.Driver类中存在静态代码块</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.sql.DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException E) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  注意：mysql5之后的驱动jar包可以省略注册驱动的步骤。</p>
<ol start="2">
<li>获取数据库连接：</li>
</ol>
<ul>
<li><p>方法：static Connection getConnection(String url, String user, String password) </p>
</li>
<li><p>参数：</p>
<ul>
<li><p>url：指定连接的路径<br>    * <strong>语法：jdbc:mysql:&#x2F;&#x2F;ip地址(域名):端口号&#x2F;数据库名称</strong><br>            * 例子：jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;db3<br>            * 细节：<strong>如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:&#x2F;&#x2F;&#x2F;数据库名称</strong></p>
</li>
<li><p>user：用户名</p>
</li>
<li><p>password：密码</p>
</li>
</ul>
</li>
</ul>
<h5 id="Connection：数据库连接对象"><a href="#Connection：数据库连接对象" class="headerlink" title="Connection：数据库连接对象"></a>Connection：数据库连接对象</h5><p>功能：</p>
<ol>
<li>获取执行sql 的对象<ul>
<li>Statement createStatement()</li>
<li>PreparedStatement prepareStatement(String sql)</li>
</ul>
</li>
<li>管理事务：<ul>
<li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务</li>
<li>提交事务：commit() </li>
<li>回滚事务：rollback()</li>
</ul>
</li>
</ol>
<h5 id="Statement：执行sql的对象"><a href="#Statement：执行sql的对象" class="headerlink" title="Statement：执行sql的对象"></a>Statement：执行sql的对象</h5><p>执行sql</p>
<ul>
<li><p>boolean execute(String sql) ：可以执行任意的sql </p>
</li>
<li><p>int executeUpdate(String sql) ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句</p>
<p>返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。</p>
</li>
<li><p>ResultSet executeQuery(String sql)  ：执行DQL（select)语句</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以插入操作为例，更加标准的代码，包括异常的处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//2. 定义sql</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user(id,name,birth) values(2, &#x27;章齐&#x27;, &#x27;1998-05-28&#x27;);\n&quot;</span>;</span><br><span class="line">            <span class="comment">//3.获取Connection对象</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/bjpowernode?useSSL=false&amp;serverTimezone=GMT%2B8&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            <span class="comment">//4.获取执行sql的对象 Statement</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//5.执行sql</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);<span class="comment">//影响的行数</span></span><br><span class="line">            <span class="comment">//6.处理结果</span></span><br><span class="line">            System.out.println(count);</span><br><span class="line">            <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;添加成功！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;添加失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//stmt.close();</span></span><br><span class="line">            <span class="comment">//7. 释放资源</span></span><br><span class="line">            <span class="comment">//避免空指针异常</span></span><br><span class="line">            <span class="keyword">if</span>(stmt != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="ResultSet：结果集对象-封装查询结果"><a href="#ResultSet：结果集对象-封装查询结果" class="headerlink" title="ResultSet：结果集对象,封装查询结果"></a>ResultSet：结果集对象,封装查询结果</h5><ul>
<li>boolean next(): 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true</li>
<li>getXxx(参数):获取数据<ul>
<li>Xxx：代表数据类型   如： int getInt() ,    String getString()</li>
<li>参数：<ol>
<li>int：代表列的编号,从1开始   如： getString(1)</li>
<li>String：代表列名称。 如： getDouble(“balance”)</li>
</ol>
</li>
</ul>
</li>
</ul>
<h5 id="PreparedStatement：执行sql的对象"><a href="#PreparedStatement：执行sql的对象" class="headerlink" title="PreparedStatement：执行sql的对象"></a>PreparedStatement：执行sql的对象</h5><ol>
<li>SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题<ol>
<li>输入用户随便，输入密码：a’ or ‘a’ &#x3D; ‘a</li>
<li>sql：select * from user where username &#x3D; ‘fhdsjkf’ and password &#x3D; ‘a’ or ‘a’ &#x3D; ‘a’</li>
</ol>
</li>
<li>解决sql注入问题：使用PreparedStatement对象来解决</li>
<li>预编译的SQL：参数使用?作为占位符</li>
<li>步骤：<ol>
<li>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar</li>
<li>注册驱动</li>
<li>获取数据库连接对象 Connection</li>
<li>定义sql<ul>
<li>注意：sql的参数使用？作为占位符。 如：select * from user where username &#x3D; ? and password &#x3D; ?;</li>
</ul>
</li>
<li>获取执行sql语句的对象 PreparedStatement  Connection.prepareStatement(String sql) </li>
<li>给？赋值：<ul>
<li>方法： setXxx(参数1,参数2)<ul>
<li>参数1：？的位置编号 从1 开始</li>
<li>参数2：？的值</li>
</ul>
</li>
</ul>
</li>
<li>执行sql，接受返回结果，不需要传递sql语句</li>
<li>处理结果</li>
<li>释放资源</li>
</ol>
</li>
<li><strong>注意：后期都会使用PreparedStatement来完成增删改查的所有操作</strong><ol>
<li>可以防止SQL注入</li>
<li>效率更高</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.itcast.util.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 	* 需求：</span></span><br><span class="line"><span class="comment"> * 		1. 通过键盘录入用户名和密码</span></span><br><span class="line"><span class="comment"> * 		2. 判断用户是否登录成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo9</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.键盘录入，接受用户名和密码</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        <span class="comment">//2.调用方法</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JDBCDemo9</span>().login2(username, password);</span><br><span class="line">        <span class="comment">//3.判断结果，输出不同语句</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名或密码错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录方法，存在SQL注入的问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">login</span><span class="params">(String username ,String password)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="literal">null</span> || password == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//连接数据库判断是否登录成功</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span>  <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn =  JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where username = &#x27;&quot;</span>+username+<span class="string">&quot;&#x27; and password = &#x27;&quot;</span>+password+<span class="string">&quot;&#x27; &quot;</span>;</span><br><span class="line">            System.out.println(sql);</span><br><span class="line">            <span class="comment">//3.获取执行sql的对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//4.执行查询</span></span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            <span class="comment">//5.判断</span></span><br><span class="line">           <span class="keyword">return</span> rs.next();<span class="comment">//如果有下一行，则返回true</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(rs,stmt,conn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录方法,使用PreparedStatement实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">login2</span><span class="params">(String username ,String password)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="literal">null</span> || password == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//连接数据库判断是否登录成功</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span>  <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn =  JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where username = ? and password = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//3.获取执行sql的对象</span></span><br><span class="line">            pstmt = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//4.给?赋值</span></span><br><span class="line">            pstmt.setString(<span class="number">1</span>,username);</span><br><span class="line">            pstmt.setString(<span class="number">2</span>,password);</span><br><span class="line">            <span class="comment">//5.执行查询,不需要传递sql</span></span><br><span class="line">            rs = pstmt.executeQuery();</span><br><span class="line">            <span class="comment">//6.判断</span></span><br><span class="line">            <span class="keyword">return</span> rs.next();<span class="comment">//如果有下一行，则返回true</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(rs,pstmt,conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="抽取JDBC工具类-：-JDBCUtils"><a href="#抽取JDBC工具类-：-JDBCUtils" class="headerlink" title="抽取JDBC工具类 ： JDBCUtils"></a>抽取JDBC工具类 ： JDBCUtils</h3><ul>
<li>目的：简化书写（减少重复书写的代码）</li>
<li>分析：<ol>
<li><p>注册驱动也抽取</p>
</li>
<li><p>抽取一个方法获取连接对象</p>
<ul>
<li>需求：不想传递参数（麻烦），还得保证工具类的通用性。</li>
<li>解决：配置文件<br>  jdbc.properties<br>  url&#x3D;<br>  user&#x3D;<br>  password&#x3D;</li>
</ul>
</li>
<li><p>抽取一个方法释放资源</p>
</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件的读取，只需要读取一次即可拿到这些值。使用静态代码块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//读取资源文件，获取值。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 创建Properties集合类。</span></span><br><span class="line">            <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取src路径下的文件的方式---&gt;ClassLoader 类加载器</span></span><br><span class="line">            <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> JDBCUtils.class.getClassLoader();</span><br><span class="line">            <span class="type">URL</span> <span class="variable">res</span>  <span class="operator">=</span> classLoader.getResource(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> res.getPath();</span><br><span class="line">           <span class="comment">// System.out.println(path);///D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties</span></span><br><span class="line">            <span class="comment">//2. 加载文件</span></span><br><span class="line">           <span class="comment">// pro.load(new FileReader(&quot;D:\\IdeaProjects\\itcast\\day04_jdbc\\src\\jdbc.properties&quot;));</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(path));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3. 获取数据，赋值</span></span><br><span class="line">            url = pro.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user = pro.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = pro.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            driver = pro.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            <span class="comment">//4. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Statement stmt,Connection conn)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( stmt != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( conn != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet rs,Statement stmt, Connection conn)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( rs != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( stmt != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( conn != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JDBC控制事务"><a href="#JDBC控制事务" class="headerlink" title="JDBC控制事务"></a>JDBC控制事务</h3><ol>
<li>事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</li>
<li>操作：<ol>
<li>开启事务</li>
<li>提交事务</li>
<li>回滚事务</li>
</ol>
</li>
<li>使用Connection对象来管理事务<ul>
<li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务<ul>
<li>在执行sql之前开启事务</li>
</ul>
</li>
<li>提交事务：commit() <ul>
<li>当所有sql都执行完提交事务</li>
</ul>
</li>
<li>回滚事务：rollback() <ul>
<li>在catch中回滚事务</li>
</ul>
</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.itcast.util.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo10</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取连接</span></span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            <span class="comment">//2.1 张三 - 500</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance - ? where id = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//2.2 李四 + 500</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance + ? where id = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//3.获取执行sql对象</span></span><br><span class="line">            pstmt1 = conn.prepareStatement(sql1);</span><br><span class="line">            pstmt2 = conn.prepareStatement(sql2);</span><br><span class="line">            <span class="comment">//4. 设置参数</span></span><br><span class="line">            pstmt1.setDouble(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">            pstmt1.setInt(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            pstmt2.setDouble(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">            pstmt2.setInt(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//5.执行sql</span></span><br><span class="line">            pstmt1.executeUpdate();</span><br><span class="line">            <span class="comment">// 手动制造异常</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            pstmt2.executeUpdate();</span><br><span class="line">            <span class="comment">//如果没有一场发生，则提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//事务回滚</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                    conn.rollback();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(pstmt1,conn);</span><br><span class="line">            JDBCUtils.close(pstmt2,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><ol>
<li><p>概念：其实就是一个容器(集合)，存放数据库连接的容器。<br> 当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，（不会将连接释放掉）会将连接对象归还给容器。</p>
</li>
<li><p>好处：</p>
<ul>
<li><p>节约资源</p>
</li>
<li><p>用户访问高效（避免了多次向底层申请资源（连接对象））</p>
</li>
</ul>
</li>
<li><p>实现：</p>
<p> <strong>标准接口：DataSource</strong>   javax.sql包下的</p>
<p> <strong>方法</strong>：</p>
<ul>
<li><strong>获取连接</strong>：getConnection()</li>
<li><strong>归还连接</strong>：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接</li>
</ul>
<p> 一般我们不去实现它，由数据库厂商来实现</p>
<ul>
<li><p>C3P0：数据库连接池技术</p>
</li>
<li><p>Druid：数据库连接池实现技术，由阿里巴巴提供的</p>
</li>
</ul>
</li>
<li><p>C3P0：数据库连接池技术</p>
<p> 步骤：</p>
<ol>
<li><p>导入jar包 (两个) c3p0-0.9.5.2.jar mchange-commons-java-0.2.12.jar ，</p>
<ul>
<li>不要忘记导入数据库驱动jar包</li>
</ul>
</li>
<li><p>定义配置文件：</p>
<ul>
<li>名称： c3p0.properties 或者 c3p0-config.xml</li>
<li>路径：直接将文件放在src目录下即可。</li>
</ul>
</li>
<li><p>创建核心对象 数据库连接池对象 ComboPooledDataSource</p>
</li>
<li><p>获取连接： getConnection</p>
</li>
</ol>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建数据库连接池对象</span></span><br><span class="line"><span class="type">DataSource</span> <span class="variable">ds</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line"><span class="comment">//2. 获取连接对象</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ds.getConnection();</span><br></pre></td></tr></table></figure>

<p>注意xml文件配置（特别注意在 jdbcUrl 转义&amp;的写法（&amp;amp））</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用默认的配置读取连接池对象 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!--  连接参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/bjpowernode?useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 连接池参数 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--初始化申请的连接数量--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--最大的连接数量--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--超时时间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;otherc3p0&quot;</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--  连接参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/bjpowernode?useSSL=false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 连接池参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>Druid：数据库连接池实现技术，由阿里巴巴提供的</p>
<ol>
<li>步骤：<ol>
<li>导入jar包 druid-1.0.9.jar</li>
<li>定义配置文件：<ul>
<li>是properties形式的</li>
<li>可以叫任意名称，可以放在任意目录下</li>
</ul>
</li>
<li>加载配置文件。Properties</li>
<li>获取数据库连接池对象：通过工厂来来获取  DruidDataSourceFactory</li>
<li>获取连接：getConnection</li>
</ol>
</li>
</ol>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//3.加载配置文件</span></span><br><span class="line">  <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">  <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> DruidDemo.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">  pro.load(is);</span><br><span class="line">  <span class="comment">//4.获取连接池对象</span></span><br><span class="line">  <span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"><span class="comment">//5.获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ds.getConnection();</span><br></pre></td></tr></table></figure>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/bjpowernode?useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>定义工具类<ol>
<li><p>定义一个类 JDBCUtils</p>
</li>
<li><p>提供静态代码块加载配置文件，初始化连接池对象</p>
</li>
<li><p>提供方法</p>
<ul>
<li><p>获取连接方法：通过数据库连接池获取连接</p>
</li>
<li><p>释放资源</p>
</li>
<li><p>获取连接池的方法</p>
</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<ul>
<li><p>代码：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid连接池的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils</span> &#123;</span><br><span class="line">    <span class="comment">//1.定义成员变量 DataSource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.加载配置文件</span></span><br><span class="line">            <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">            <span class="comment">//2.获取DataSource</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Statement stmt,Connection conn)</span>&#123;</span><br><span class="line">       close(<span class="literal">null</span>,stmt,conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet rs , Statement stmt, Connection conn)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();<span class="comment">//归还连接</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>使用工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.datasource.druid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.utils.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用新的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidDemo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 完成添加操作：给account表添加一条记录</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取连接</span></span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_class values(?,?)&quot;</span>;</span><br><span class="line">            <span class="comment">//3.获取pstmt对象</span></span><br><span class="line">            pstmt = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//4.给？赋值</span></span><br><span class="line">            pstmt.setInt(<span class="number">1</span>,<span class="number">200</span>);</span><br><span class="line">            pstmt.setString(<span class="number">2</span>,<span class="string">&quot;class1&quot;</span>);</span><br><span class="line">            <span class="comment">//5.执行sql</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line">            System.out.println(count);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//6. 释放资源</span></span><br><span class="line">            JDBCUtils.close(pstmt,conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Spring-JdbcTemplate"><a href="#Spring-JdbcTemplate" class="headerlink" title="Spring  JdbcTemplate"></a>Spring  JdbcTemplate</h2><p>它是spring框架中提供的一个对象，是对原始繁琐的Jdbc API对象的简单封装。spring框架为我们提供了很多的操作模板类。例如：操作关系型数据的JdbcTemplate和HibernateTemplate，操作nosql数据库的RedisTemplate，操作消息队列的JmsTemplate等等。</p>
<ul>
<li><p>Spring框架对JDBC的简单封装。提供了一个<strong>JdbcTemplate</strong>对象简化JDBC的开发</p>
</li>
<li><p><strong>步骤：</strong></p>
<ol>
<li><p>导入jar包</p>
</li>
<li><p>创建JdbcTemplate对象。依赖于数据源DataSource</p>
</li>
</ol>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">JdbcTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(ds);</span><br></pre></td></tr></table></figure>
</code></pre>
<ol start="3">
<li>调用JdbcTemplate的方法来完成CRUD的操作<br>* <code>update()</code>:执行DML语句。增、删、改语句</li>
</ol>
<pre><code>* ```queryForMap()```:查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合

     注意：这个方法查询的结果集长度只能是1

* ```queryForList()```:查询结果将结果集封装为list集合

     ​    注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中

* ```query()```:查询结果，将结果封装为JavaBean对象

 * query的参数：RowMapper
      一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装
                * new BeanPropertyRowMapper&lt;类型&gt;(类型.class)

* ```queryForObject()```：查询结果，将结果封装为对象

 * 一般用于聚合函数的查询

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbctemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JdbcTemplate入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTemplateDemo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.导入jar包</span></span><br><span class="line">        <span class="comment">//2.创建JDBCTemplate对象</span></span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(JDBCUtils.getDataSource());</span><br><span class="line">        <span class="comment">//3.调用方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_class set classname = &#x27;class2&#x27; where classno = ?&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> template.update(sql, <span class="number">200</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<p><strong>使用maven框架的步骤：</strong></p>
<ul>
<li><p>导入spring-jdbc和spring-tx坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建数据库表和实体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建account表和Account实体</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoney</span><span class="params">(<span class="type">double</span> money)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建JdbcTemplate对象</p>
</li>
<li><p>执行数据库操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTemplateTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//测试JdbcTemplate开发步骤</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException &#123;</span><br><span class="line">        <span class="comment">//创建数据源对象</span></span><br><span class="line">        <span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">        dataSource.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">        dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        <span class="comment">//设置数据源对象  知道数据库在哪</span></span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">//执行操作</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> jdbcTemplate.update(<span class="string">&quot;insert into account values(?,?)&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">        System.out.println(row);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>Spring产生JdbcTemplate对象</strong></p>
<p>我们可以将JdbcTemplate的创建权交给Spring，将数据源DataSource的创建权也交给Spring，在Spring容器内部将数据源DataSource注入到JdbcTemplate模版对象中，配置如下：</p>
<p>applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载jdbc.properties--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--数据源对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--jdbc模板对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//测试Spring产生jdbcTemplate对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> app.getBean(JdbcTemplate.class);</span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> jdbcTemplate.update(<span class="string">&quot;insert into account values(?,?)&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">    System.out.println(row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>使用练习：</p>
<p>table emp格式：</p>
<p><img src="https://pic.imgdb.cn/item/62547ea4239250f7c59b6709.jpg"></p>
<ul>
<li>设计一个emp类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="keyword">private</span> Integer mgr;</span><br><span class="line">    <span class="keyword">private</span> Date joindate;</span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line">    <span class="keyword">private</span> Double bonus;</span><br><span class="line">    <span class="keyword">private</span> Integer dept_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEname</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEname</span><span class="params">(String ename)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getJob_id</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJob_id</span><span class="params">(String job)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getMgr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mgr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMgr</span><span class="params">(Integer mgr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mgr = mgr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getJoindate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> joindate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJoindate</span><span class="params">(Date joindate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.joindate = joindate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(Double salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getBonus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bonus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBonus</span><span class="params">(Double bonus)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getDept_id</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dept_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept_id</span><span class="params">(Integer dept_id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dept_id = dept_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Emp&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, ename=&#x27;&quot;</span> + ename + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, job_id=&quot;</span> + job +</span><br><span class="line">                <span class="string">&quot;, mgr=&quot;</span> + mgr +</span><br><span class="line">                <span class="string">&quot;, joindate=&quot;</span> + joindate +</span><br><span class="line">                <span class="string">&quot;, salary=&quot;</span> + salary +</span><br><span class="line">                <span class="string">&quot;, bonus=&quot;</span> + bonus +</span><br><span class="line">                <span class="string">&quot;, dept_id=&quot;</span> + dept_id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用Junit进行测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbctemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.Emp;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTemplateDemo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Junit单元测试，可以让方法独立执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取JDBCTemplate对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">JdbcTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(JDBCUtils.getDataSource());</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 修改1号数据的 salary 为 10000</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 定义sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update emp set SAL = 1000 where EMPNO = 7369&quot;</span>;</span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> template.update(sql);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2. 添加一条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into emp(empno,ename,deptno) values(?,?,?)&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> template.update(sql, <span class="number">1015</span>, <span class="string">&quot;郭靖&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.删除刚才添加的记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from emp where empno = ?&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> template.update(sql, <span class="number">1015</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4.查询id为1001的记录，将其封装为Map集合</span></span><br><span class="line"><span class="comment">     * 注意：这个方法查询的结果集长度只能是1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from emp where empno = ? or empno = ?&quot;</span>;</span><br><span class="line">        Map&lt;String, Object&gt; map = template.queryForMap(sql, <span class="number">1015</span>,<span class="number">7369</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="comment">//&#123;id=1001, ename=孙悟空, job_id=4, mgr=1004, joindate=2000-12-17, salary=10000.00, bonus=null, dept_id=20&#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5. 查询所有记录，将其封装为List</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_class&quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; stringObjectMap : list) &#123;</span><br><span class="line">            System.out.println(stringObjectMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 6. 查询所有记录，将其封装为Emp对象的List集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from emp&quot;</span>;</span><br><span class="line">        List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span> <span class="title class_">RowMapper</span>&lt;Emp&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Emp <span class="title function_">mapRow</span><span class="params">(ResultSet rs, <span class="type">int</span> i)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">                <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;EMPNO&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">ename</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;ENAME&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;JOB&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">mgr</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;MGR&quot;</span>);</span><br><span class="line">                <span class="type">Date</span> <span class="variable">joindate</span> <span class="operator">=</span> rs.getDate(<span class="string">&quot;HIREDATE&quot;</span>);</span><br><span class="line">                <span class="type">double</span> <span class="variable">salary</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;SAL&quot;</span>);</span><br><span class="line">                <span class="type">double</span> <span class="variable">bonus</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;COMM&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">dept_id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;DEPTNO&quot;</span>);</span><br><span class="line"></span><br><span class="line">                emp.setId(id);</span><br><span class="line">                emp.setEname(ename);</span><br><span class="line">                emp.setJob_id(job);</span><br><span class="line">                emp.setMgr(mgr);</span><br><span class="line">                emp.setJoindate(joindate);</span><br><span class="line">                emp.setSalary(salary);</span><br><span class="line">                emp.setBonus(bonus);</span><br><span class="line">                emp.setDept_id(dept_id);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> emp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 6. 查询所有记录，将其封装为Emp对象的List集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6_2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from emp&quot;</span>;</span><br><span class="line">        List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Emp&gt;(Emp.class));</span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 7. 查询总记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(empno) from emp&quot;</span>;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">total</span> <span class="operator">=</span> template.queryForObject(sql, Long.class);</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Junit、反射、注解</title>
    <url>/2022/04/01/javaweb01/</url>
    <content><![CDATA[<p>本系列记录了JavaWeb领域服务端程序开发的基础知识。</p>
<p>本文中包含Junit单元测试，反射，注解</p>
<span id="more"></span>

<h3 id="Web的整体结构"><a href="#Web的整体结构" class="headerlink" title="Web的整体结构"></a>Web的整体结构</h3><p>首先熟悉一下Web的整体结构以及各部分都做些什么</p>
<p><img src="https://pic.imgdb.cn/item/6246c46d27f86abb2a91f1a8.jpg"></p>
<h3 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a>Junit单元测试</h3><ul>
<li><p>测试分类：</p>
<ol>
<li>黑盒测试：不需要写代码，给输入值，看程序是否能够输出期望的值。</li>
<li>白盒测试：需要写代码的。关注程序具体的执行流程。</li>
</ol>
</li>
<li><p>Junit使用：白盒测试</p>
<ul>
<li><p>步骤：</p>
<ol>
<li><p>定义一个测试类(测试用例)</p>
<ul>
<li>建议：<ul>
<li>测试类名：被测试的类名Test        如CalculatorTest</li>
<li>包名：xxx.xxx.xx.test        cn.itcast.test</li>
</ul>
</li>
</ul>
</li>
<li><p>定义测试方法：可以独立运行</p>
<ul>
<li>建议：<ul>
<li>方法名：test测试的方法名        testAdd()  </li>
<li>返回值：void</li>
<li>参数列表：空参</li>
</ul>
</li>
</ul>
</li>
<li><p>给方法加 @Test</p>
</li>
<li><p>导入junit依赖环境</p>
</li>
</ol>
</li>
<li><p>判定结果：</p>
<ul>
<li>红色：失败</li>
<li>绿色：成功</li>
<li>一般我们会使用断言操作来处理结果<ul>
<li>Assert.assertEquals(期望的结果,运算的结果);</li>
</ul>
</li>
</ul>
</li>
<li><p>补充：</p>
<ul>
<li>@Before:<ul>
<li>修饰的方法会在测试方法之前被自动执行</li>
</ul>
</li>
<li>@After:<ul>
<li>修饰的方法会在测试方法执行之后自动被执行</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="反射：框架设计的灵魂"><a href="#反射：框架设计的灵魂" class="headerlink" title="反射：框架设计的灵魂"></a>反射：框架设计的灵魂</h3><p><img src="https://pic.imgdb.cn/item/6247082127f86abb2a229a6f.jpg"></p>
<ul>
<li><p>框架：半成品软件。可以在框架的基础上进行软件开发，简化编码</p>
</li>
<li><p><strong>反射：将类的各个组成部分封装为其他对象，这就是反射机制</strong></p>
<ul>
<li>好处：<ol>
<li>可以在程序运行过程中，操作这些对象。</li>
<li>可以解耦，提高程序的可扩展性。</li>
</ol>
</li>
</ul>
</li>
<li><p>获取Class类对象的方式（三个阶段有不同的方式）：</p>
<ol>
<li>Class.forName(“全类名”)：将字节码文件加载进内存，返回Class对象<ul>
<li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li>
</ul>
</li>
<li>类名.class：通过类名的属性class获取<ul>
<li>多用于参数的传递</li>
</ul>
</li>
<li>对象.getClass()：getClass()方法在Object类中定义着。<ul>
<li>多用于对象的获取字节码的方式</li>
</ul>
</li>
</ol>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">       获取Class对象的方式：</span></span><br><span class="line"><span class="comment">           1. Class.forName(&quot;全类名&quot;)：将字节码文件加载进内存，返回Class对象</span></span><br><span class="line"><span class="comment">           2. 类名.class：通过类名的属性class获取</span></span><br><span class="line"><span class="comment">           3. 对象.getClass()：getClass()方法在Object类中定义着。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">	</span><br><span class="line">       <span class="comment">//1.Class.forName(&quot;全类名&quot;)</span></span><br><span class="line">       <span class="type">Class</span> <span class="variable">cls1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;cn.itcast.domain.Person&quot;</span>);</span><br><span class="line">       System.out.println(cls1);</span><br><span class="line">       <span class="comment">//2.类名.class</span></span><br><span class="line">       <span class="type">Class</span> <span class="variable">cls2</span> <span class="operator">=</span> Person.class;</span><br><span class="line">       System.out.println(cls2);</span><br><span class="line">       <span class="comment">//3.对象.getClass()</span></span><br><span class="line">       <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">       <span class="type">Class</span> <span class="variable">cls3</span> <span class="operator">=</span> p.getClass();</span><br><span class="line">       System.out.println(cls3);</span><br><span class="line">	</span><br><span class="line">       <span class="comment">//== 比较三个对象</span></span><br><span class="line">       System.out.println(cls1 == cls2);<span class="comment">//true</span></span><br><span class="line">       System.out.println(cls1 == cls3);<span class="comment">//true</span></span><br><span class="line">	</span><br><span class="line">       <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Student.class;</span><br><span class="line">       System.out.println(c == cls1);<span class="comment">//false</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>结论：<br>同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</li>
</ul>
</li>
<li><p>Class对象功能：</p>
<ul>
<li>获取功能（一共13个方法）：<ol>
<li><p>获取成员变量们</p>
<ul>
<li><p>Field[ ] getFields() ：获取所有<strong>public修饰的</strong>成员变量</p>
</li>
<li><p>Field getField(String name)   获取<strong>指定名称</strong>的 public修饰的成员变量</p>
</li>
<li><p>Field[ ] getDeclaredFields()  获取<strong>所有的</strong>成员变量，不考虑修饰符</p>
</li>
<li><p>Field getDeclaredField(String name)</p>
</li>
</ul>
</li>
<li><p>获取构造方法们</p>
<ul>
<li><p>Constructor&lt;?&gt;[ ] getConstructors()  </p>
</li>
<li><p>Constructor<T> getConstructor(类&lt;?&gt;… parameterTypes)  </p>
</li>
<li><p>Constructor<T> getDeclaredConstructor(类&lt;?&gt;… parameterTypes)  </p>
</li>
<li><p>Constructor&lt;?&gt;[ ] getDeclaredConstructors()</p>
</li>
</ul>
</li>
<li><p>获取成员方法们：</p>
<ul>
<li><p>Method[ ] getMethods()  </p>
</li>
<li><p>Method getMethod(String name, 类&lt;?&gt;… parameterTypes)  </p>
</li>
<li><p>Method[ ] getDeclaredMethods()  </p>
</li>
<li><p>Method getDeclaredMethod(String name, 类&lt;?&gt;… parameterTypes)</p>
</li>
</ul>
</li>
<li><p>获取全类名    </p>
<ul>
<li>String getName()</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><p>Field：成员变量</p>
<ul>
<li>操作：<ol>
<li><p><strong>设置值</strong></p>
<ul>
<li>void set(Object obj, Object value)</li>
</ul>
</li>
<li><p><strong>获取值</strong></p>
<ul>
<li>get(Object obj)</li>
</ul>
</li>
<li><p>忽略访问权限修饰符的<strong>安全检查</strong></p>
<ul>
<li>setAccessible(true):暴力反射</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><p>Constructor:构造方法</p>
<ul>
<li><strong>创建</strong>对象：<ul>
<li><p>T newInstance(Object… initargs)  </p>
</li>
<li><p>如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance()方法</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Method：方法对象</p>
<ul>
<li><p><strong>执行</strong>方法：</p>
<ul>
<li>Object invoke(Object obj, Object… args)</li>
</ul>
</li>
<li><p>获取方法名称：</p>
<ul>
<li>String getName(): 获取方法名</li>
</ul>
</li>
</ul>
</li>
<li><p>案例：</p>
<ul>
<li>需求：写一个”框架”，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法<ul>
<li>实现：<ol>
<li>配置文件</li>
<li>反射</li>
</ol>
</li>
<li>步骤：<ol>
<li>将需要创建的对象的全类名和需要执行的方法定义在配置文件中</li>
<li>在程序中加载读取配置文件</li>
<li>使用反射技术来加载类文件进内存</li>
<li>创建对象</li>
<li>执行方法</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 框架类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//可以创建任意类的对象，可以执行任意方法</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            前提：不能改变该类的任何代码。可以创建任意类的对象，可以执行任意方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.加载配置文件</span></span><br><span class="line">        <span class="comment">//1.1创建Properties对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//1.2加载配置文件，转换为一个集合</span></span><br><span class="line">        <span class="comment">//1.2.1获取class目录下的配置文件</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ReflectTest.class.getClassLoader();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> classLoader.getResourceAsStream(<span class="string">&quot;pro.properties&quot;</span>);</span><br><span class="line">        pro.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取配置文件中定义的数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> pro.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> pro.getProperty(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.加载该类进内存</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">        <span class="comment">//4.创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">        <span class="comment">//5.获取方法对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">//6.执行方法</span></span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ul>
<li><p>概念：说明程序的。给计算机看的</p>
</li>
<li><p>注释：用文字描述程序的。给程序员看的</p>
</li>
<li><p>定义：注解（Annotation），是一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</p>
</li>
<li><p>概念描述：</p>
<ul>
<li>JDK1.5之后的新特性</li>
<li>说明程序的</li>
<li>使用注解：@注解名称</li>
</ul>
</li>
<li><p>作用分类：</p>
<ul>
<li>编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</li>
<li>编写文档：通过代码里标识的注解生成文档【生成文档doc文档】</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注解javadoc演示</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> itcat</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnoDemo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算两数的和</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b 整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两数的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/**** </span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Description</span>: add </span></span><br><span class="line"><span class="comment">       *   * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span> b </span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span>: int </span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Author</span>: Mr.Cao</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@Date</span>: 2018/6/18 </span></span><br><span class="line"><span class="comment">       */</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b )</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: summ</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: [a, b]</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: int</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: Mr.Cao</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2018/6/18    tab+a+/</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span>  <span class="type">int</span> <span class="title function_">summ</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>代码分析：通过代码里标识的注解对代码进行分析【使用反射】</li>
</ul>
</li>
<li><p>JDK中预定义的一些注解</p>
<ul>
<li>@Override    ：检测被该注解标注的方法是否是继承自父类&#x2F;父接口的</li>
<li>@Deprecated：该注解标注的内容，表示已过时</li>
<li>@SuppressWarnings：压制警告<ul>
<li>一般传递参数all  @SuppressWarnings(“all”)</li>
</ul>
</li>
</ul>
</li>
<li><p>自定义注解</p>
<ul>
<li>格式：<br>      元注解<br>      public @interface 注解名称{<br>             属性列表;<br>      }</li>
<li>本质：<strong>注解本质上就是一个接口，该接口默认继承Annotation接口</strong><ul>
<li>public interface MyAnno extends java.lang.annotation.Annotation {}</li>
</ul>
</li>
<li><strong>属性：接口中的抽象方法</strong><ul>
<li>要求：<ol>
<li>属性的返回值类型有下列取值<ul>
<li>基本数据类型</li>
<li>String</li>
<li>枚举enum</li>
<li>注解</li>
<li>以上类型的数组</li>
</ul>
</li>
<li>定义了属性，在使用时需要给属性赋值<ol>
<li>如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。</li>
<li>如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可。</li>
<li>数组赋值时，值使用{}包裹。如果数组中只有一个值，则{}可以省略</li>
</ol>
</li>
</ol>
</li>
</ul>
</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">    Person <span class="title function_">per</span><span class="params">()</span>;<span class="comment">//Person是一个枚举类</span></span><br><span class="line">    MyAnno2 <span class="title function_">anno2</span><span class="params">()</span>;</span><br><span class="line">    String[] strs();</span><br><span class="line">    <span class="comment">/*String name() default &quot;张三&quot;; 设置默认值*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyAnno(value=12,per = Person.P3,anno2 = @MyAnno2,strs=&#123;&quot;bbb&quot;,&quot;aaa&quot;&#125;)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>元注解：用于描述注解的注解<ul>
<li><strong>@Target</strong>：描述注解能够作用的位置<ul>
<li>ElementType取值：<ul>
<li>TYPE：可以作用于类上</li>
<li>METHOD：可以作用于方法上</li>
<li>FIELD：可以作用于成员变量上</li>
</ul>
</li>
</ul>
</li>
<li><strong>@Retention</strong>：描述注解被保留的阶段<ul>
<li>@Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到</li>
</ul>
</li>
<li><strong>@Documented</strong>：描述注解是否被抽取到api文档中</li>
<li><strong>@Inherited</strong>：描述注解是否被子类继承</li>
</ul>
</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD,ElementType.FIELD&#125;)</span></span><br><span class="line">	<span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">	<span class="meta">@Documented</span></span><br><span class="line">	<span class="meta">@Inherited</span></span><br><span class="line">	<span class="keyword">public</span> <span class="meta">@interface</span> MyAnno3 &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">* 在程序使用(解析)注解：获取注解中定义的属性值</span><br><span class="line"></span><br><span class="line">  <span class="number">1.</span> 获取注解定义的位置的对象  （Class，Method,Field）</span><br><span class="line">  <span class="number">2.</span> 获取指定的注解</span><br><span class="line">    * getAnnotation(Class)</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  <span class="comment">//其实就是在内存中生成了一个该注解接口的子类实现对象</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProImpl</span> <span class="keyword">implements</span> <span class="title class_">Pro</span>&#123;</span><br><span class="line">  	<span class="keyword">public</span> String <span class="title function_">className</span><span class="params">()</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;cn.itcast.annotation.Demo1&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">methodName</span><span class="params">()</span>&#123;</span><br><span class="line">      	<span class="keyword">return</span> <span class="string">&quot;show&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>调用注解中的抽象方法获取配置的属性值</li>
</ol>
</li>
<li><p>注解解析图</p>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/62470dba27f86abb2a30d961.jpg"></p>
<ul>
<li><p>案例：简单的测试框架</p>
</li>
<li><p>小结：</p>
<ol>
<li>以后大多数时候，我们会使用注解，而不是自定义注解</li>
<li>注解给谁用？</li>
<li>编译器</li>
<li>给解析程序用</li>
<li>注解不是程序的一部分，可以理解为注解就是一个标签</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小明定义的计算器类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        str.toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;1 + 0 =&quot;</span> + (<span class="number">1</span> + <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sub</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1 - 0 =&quot;</span> + (<span class="number">1</span> - <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//乘法</span></span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mul</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1 * 0 =&quot;</span> + (<span class="number">1</span> * <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//除法</span></span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">div</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1 / 0 =&quot;</span> + (<span class="number">1</span> / <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;永无bug...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Check &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单的测试框架</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 当主方法执行后，会自动自行被检测的所有方法(加了Check注解的方法)，判断方法是否有异常，记录到文件中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCheck</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.创建计算器对象</span></span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">        <span class="comment">//2.获取字节码文件对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> c.getClass();</span><br><span class="line">        <span class="comment">//3.获取所有方法</span></span><br><span class="line">        Method[] methods = cls.getMethods();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//出现异常的次数</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;bug.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="comment">//4.判断方法上是否有Check注解</span></span><br><span class="line">            <span class="keyword">if</span>(method.isAnnotationPresent(Check.class))&#123;</span><br><span class="line">                <span class="comment">//5.有，执行</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    method.invoke(c);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">//6.捕获异常</span></span><br><span class="line">                    <span class="comment">//记录到文件中</span></span><br><span class="line">                    number ++;</span><br><span class="line"></span><br><span class="line">                    bw.write(method.getName()+ <span class="string">&quot; 方法出异常了&quot;</span>);</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    bw.write(<span class="string">&quot;异常的名称:&quot;</span> + e.getCause().getClass().getSimpleName());</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    bw.write(<span class="string">&quot;异常的原因:&quot;</span>+e.getCause().getMessage());</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    bw.write(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bw.write(<span class="string">&quot;本次测试一共出现 &quot;</span>+number+<span class="string">&quot; 次异常&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bw.flush();</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEAerror</title>
    <url>/2022/04/01/IDEAerror/</url>
    <content><![CDATA[<p>概述：本文记录了使用IDEA过程中遇到的错误以及解决方案</p>
<span id="more"></span>



<h4 id="IDEA-Java错误：不支持发行版本"><a href="#IDEA-Java错误：不支持发行版本" class="headerlink" title="IDEA Java错误：不支持发行版本"></a>IDEA Java错误：不支持发行版本</h4><p><a href="https://blog.csdn.net/Deeeelete/article/details/104382752?utm_medium=distribute.pc_relevant.none-task-blog-baidulandingword-3&spm=1001.2101.3001.4242"><em>解决方案</em></a></p>
<p>查看几个地方：</p>
<p>（1）项目结构 - 项目 - SDK版本</p>
<p>（2）项目结构 - 模块 - 源 - 语言级别</p>
<p>（3）项目结构 - 模块 - 依赖 - 模块SDK</p>
<p>（4）设置 - Java编译器 - 项目字节码版本和目标字节码版本</p>
<h4 id="Cannot-resolve-symbol-’XXX‘-无法解析的符号-、"><a href="#Cannot-resolve-symbol-’XXX‘-无法解析的符号-、" class="headerlink" title="Cannot resolve symbol ’XXX‘ (无法解析的符号)、"></a>Cannot resolve symbol ’XXX‘ (无法解析的符号)、</h4><p>一般先检查项目结构中是否已经选择了合适的JDK</p>
<p><a href="https://blog.csdn.net/he99774/article/details/78254262"><em>解决方案</em></a></p>
<h4 id="mysql驱动连接-Cannot-load-driver-class-com-mysql-cj-jdbc-Driver"><a href="#mysql驱动连接-Cannot-load-driver-class-com-mysql-cj-jdbc-Driver" class="headerlink" title="mysql驱动连接 Cannot load driver class:com.mysql.cj.jdbc.Driver"></a>mysql驱动连接 Cannot load driver class:com.mysql.cj.jdbc.Driver</h4><p>（1）检查MySQL版本</p>
<p>（2）注意新版本MySQL的写法</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/bjpowernode?useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<p>（3）pom.xml中进行版本修改,在库中删除原来的版本，再重新打开项目</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="启动Web项目时出现org-apache-catalina-LifecycleException-协议处理程序初始化失败"><a href="#启动Web项目时出现org-apache-catalina-LifecycleException-协议处理程序初始化失败" class="headerlink" title="启动Web项目时出现org.apache.catalina.LifecycleException: 协议处理程序初始化失败"></a>启动Web项目时出现<code>org.apache.catalina.LifecycleException: 协议处理程序初始化失败</code></h4><p>原因：8080端口被占用了</p>
<p>解决方案：cmd中<code>netstat -ano | findstr 8080</code>找到对应进程杀死</p>
<p>补充：</p>
<p><img src="https://pic.imgdb.cn/item/6262e777239250f7c5cb5445.jpg"></p>
<h4 id="使用SpringBoot时出现Failed-to-read-candidate-component-class"><a href="#使用SpringBoot时出现Failed-to-read-candidate-component-class" class="headerlink" title="使用SpringBoot时出现Failed to read candidate component class"></a>使用SpringBoot时出现<code>Failed to read candidate component class</code></h4><p>原因：SpringBoot版本比较低，但是编译器设置版本过高，降低编译环境版本（如降到8）</p>
<h4 id="本机ip记录"><a href="#本机ip记录" class="headerlink" title="本机ip记录"></a>本机ip记录</h4><p>192.168.1.210</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven-基础</title>
    <url>/2022/03/31/mavenbasic/</url>
    <content><![CDATA[<p>概述：本文主要记录Maven工具的思想和基本用法。包括环境配置，基础概念，项目构建，依赖管理等部分</p>
<span id="more"></span>



<h2 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h2><h3 id="传统项目管理状态分析"><a href="#传统项目管理状态分析" class="headerlink" title="传统项目管理状态分析"></a>传统项目管理状态分析</h3><p>（1）jar包不统一，jar包不兼容</p>
<p>（2）工程升级维护过程繁琐</p>
<h3 id="Maven是什么"><a href="#Maven是什么" class="headerlink" title="Maven是什么"></a>Maven是什么</h3><p>本质是一个项目管理工具，将项目开发和管理过程抽象成一个项目对象模型（POM，Project Object Model）</p>
<h3 id="Maven的作用"><a href="#Maven的作用" class="headerlink" title="Maven的作用"></a>Maven的作用</h3><p>（1）项目构建：提供标准的、跨平台的自动化项目构建方式</p>
<p>（2）依赖管理：方便快捷的管理项目依赖的资源（jar包），避免资源间的版本冲突问题</p>
<p>（3）统一开发结构：提供标准的、统一的项目结构</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h3><p><a href="https://maven.apache.org/"><em>官网</em></a></p>
<p>解压即安装</p>
<h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><p>（1）依赖Java，需要配置JAVA_HOME</p>
<p>（2）设置MAVEN自身的运行环境，需要配置MAVEN_HOME（复制所在路径，在系统变量和环境变量中都加以设置）</p>
<p>配置完成后可以在cmd中输入 mvn 检查是否成功</p>
<h2 id="MAVEN基础概念"><a href="#MAVEN基础概念" class="headerlink" title="MAVEN基础概念"></a>MAVEN基础概念</h2><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><p>仓库用于存储资源，包含各种jar包</p>
<p>仓库分类：</p>
<ol>
<li><p>本地仓库：自己电脑上存储资源的仓库，连接远程仓库获取资源</p>
</li>
<li><p>远程仓库：非本机电脑上的仓库，为本地仓库提供资源</p>
<p>（1）中央仓库：Maven团队维护，存储所有字眼的仓库</p>
<p>（2）私服：部门&#x2F;公司范围内存储资源的仓库，从中央仓库获取资源</p>
</li>
<li><p>私服的作用：</p>
<p>（1）保存具有版权的资源，包含购买或自主研发的jar，中央仓库中的jar都是开源的，不能存储具有版权的资源</p>
<p>（2）一定范围内共享资源，仅对内部开放，不对外共享</p>
</li>
</ol>
<h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><p>坐标：</p>
<p>用于在Maven中描述仓库中资源的位置。  <a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a></p>
<p>Maven坐标主要组成：</p>
<p>（1）groupID：定义当前Maven项目隶属组织名称</p>
<p>（2）artifactID：定义当前Maven项目名称（通常是模块名称）</p>
<p>（3）version：定义当前项目版本号</p>
<p>（4）packaging：定义该项目的打包方式</p>
<p>Maven坐标的作用：使用唯一标识，唯一性定位资源位置，通过该标识可以将资源的识别与下载工作交由机器完成</p>
<p><a href="https://www.mvnrepository.com/">https://www.mvnrepository.com</a></p>
<h3 id="本地仓库配置"><a href="#本地仓库配置" class="headerlink" title="本地仓库配置"></a>本地仓库配置</h3><p>本地仓库配置决定了资源下载到哪里</p>
<p>命令行中输入mvn 即可在 C:\Users\win10 中生成一个空的 .m2文件夹，为默认的仓库</p>
<p>如果想要将本地仓库设置在别的位置，需要如下配置：</p>
<p>（1）打开Maven目录下（我的电脑在 F:\Tools\apache-maven-3.8.5\conf）的settings.xml</p>
<p>（2）将文件中<code>&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code>复制到下一行未被注释的地方，并将其中路径换成我们自己决定的repository文件夹的位置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>F:\MyDocuments\Maven\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="远程仓库的配置"><a href="#远程仓库的配置" class="headerlink" title="远程仓库的配置"></a>远程仓库的配置</h3><p>远程仓库决定了资源从哪里来</p>
<p>默认是从<a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a> 中下载的（不挂梯子会比较慢）</p>
<p>镜像仓库配置（阿里云）</p>
<h3 id="全局setting与用户setting的区别"><a href="#全局setting与用户setting的区别" class="headerlink" title="全局setting与用户setting的区别"></a>全局setting与用户setting的区别</h3><p>全局setting定义了当前计算机中Maven的公共配置</p>
<p>用户setting定义了当前用户的配置</p>
<h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><h3 id="Maven项目构建命令（手动制作）"><a href="#Maven项目构建命令（手动制作）" class="headerlink" title="Maven项目构建命令（手动制作）"></a>Maven项目构建命令（手动制作）</h3><p>需要在项目目录带有pom.xml层级下进行执行</p>
<p>Maven构建命令使用mvn开头，后面添加功能参数，可以一次执行多个命令，使用空格分隔</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn compile			#编译</span><br><span class="line">mvn clean			#清理</span><br><span class="line">mvn test 			#测试</span><br><span class="line">mvn package			#打包</span><br><span class="line">mvn install			#安装到本地仓库</span><br></pre></td></tr></table></figure>

<h3 id="插件创建工程"><a href="#插件创建工程" class="headerlink" title="插件创建工程"></a>插件创建工程</h3><h3 id="IDEA创建工程"><a href="#IDEA创建工程" class="headerlink" title="IDEA创建工程"></a>IDEA创建工程</h3><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><h3 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h3><p>依赖指当前项目运行所需的jar，一个项目可以设置多个依赖</p>
<p>格式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--指定了当前pom的版本，4.0.0是固定的 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">	<span class="comment">&lt;!-- 主项目标识，用来定义当前maven属于哪个实际的项目 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>反写的公司网址 + 项目名<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 模块名，maven项目和实际的项目不是一一对应的关系，maven项目提现的是模块化的概念，一个实际项目往往会被划分为很多个模块 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>项目名 + 模块名<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 当前项目版本号，一般有三个数字组成 第一个数字：大版本号 第二个数字：分支版本号 第三个数字：先版本号 snapshot: 快照 alpha： </span></span><br><span class="line"><span class="comment">		内测版本 beta： 公测版本 Release： 稳定版本 GA： 正式发布版本 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1snapshot<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- maven项目打包方式，默认情况为jar，还可打包为war，zip，pom等 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span><span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 项目描述名 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 项目地址 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 项目描述 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 开发人员列表 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">developers</span>&gt;</span><span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 许可证信息 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">licenses</span>&gt;</span><span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 组织信息 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">organization</span>&gt;</span><span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">	<span class="comment">&lt;!-- 依赖列表 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 依赖项目 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">type</span>&gt;</span><span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 依赖范围，控制依赖与三种依赖范围的关系 --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 开发中要使用某一个jar，就要将该jar包引入到项目的classpath中 --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- maven提供了三种classpath： 1.编译 2.测试 3.运行 --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 下面的test表明junit只存在于测试的classpath中 --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- maven为scope提供了六个属性：</span></span><br><span class="line"><span class="comment">									compile（默认，编译测试运行都有效）， </span></span><br><span class="line"><span class="comment">									provided（编译和测试）servlet, </span></span><br><span class="line"><span class="comment">									runtime（测试和运行）jdbc, </span></span><br><span class="line"><span class="comment">									test（测试）junit, </span></span><br><span class="line"><span class="comment">									system（编译和测试，与本机系统相关联，可移植性差）, </span></span><br><span class="line"><span class="comment">									import（导入的范围，只使用在dependencyManagerment中，表示从其他的pom中导入dependency的配置） --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 设置依赖是否可选 --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 有两个值，true和false，默认是false，继承，若为true，子项目必须显式的引用该依赖 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span><span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 排除依赖传递的列表 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">	<span class="comment">&lt;!-- 依赖管理 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 这里定义的依赖不会被运行，即不会被引用为实际的依赖，主要是供子模块集成用 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">	<span class="comment">&lt;!-- 为构建行为提供相应的支持 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 插件列表 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 插件 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">	<span class="comment">&lt;!-- 用于子模块中对于父模块的继承 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 聚合运行多个maven项目 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">module</span>&gt;</span><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h3><p>依赖具有传递性：</p>
<p>（1）直接依赖：在当前项目中通过依赖配置建立的依赖关系</p>
<p>（2）间接依赖：被资源的资源如果依赖其他资源，当前项目间接依赖其他资源</p>
<h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><p>依赖的jar默认情况可以在任何地方使用，可以通过scope标签设定其作用范围</p>
<p>作用范围：</p>
<p>（1）主程序范围有效（main文件夹范围内）</p>
<p>（2）测试程序范围有效（test文件夹范围内）</p>
<p>（3）是否参与打包（package指令范围内）</p>
<img src="https://pic.imgdb.cn/item/6245facd27f86abb2a6cf794.jpg" alt="image1" style="zoom:48%;" />



<h3 id="依赖范围传递性"><a href="#依赖范围传递性" class="headerlink" title="依赖范围传递性"></a>依赖范围传递性</h3><p>带有依赖范围的资源在进行传递时，作用范围将收到影响</p>
<img src="https://pic.imgdb.cn/item/6245fb6d27f86abb2a6d85b3.jpg" alt="image2" style="zoom:45%;" />



<h2 id="生命周期与插件"><a href="#生命周期与插件" class="headerlink" title="生命周期与插件"></a>生命周期与插件</h2><h3 id="项目构建生命周期"><a href="#项目构建生命周期" class="headerlink" title="项目构建生命周期"></a>项目构建生命周期</h3><p>Maven构建生命周期描述的是一次构建过程经历了多少个事件</p>
<p>Maven对项目构建的生命周期划分为三套：</p>
<p>（1）clean：清理工作</p>
<p>（2）default：核心工作，例如编译，测试，打包，部署等</p>
<p>（3）site：产生报告，发布站点等</p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p><a href="https://maven.apache.org/plugins/index.html"><em>maven官网提供的插件</em></a></p>
<p>插件与生命周期内的阶段绑定，在执行到对应生命周期时执行对应的插件功能</p>
<p>默认maven在各个生命周期上绑定有预设的功能</p>
<p>通过插件可以自定义其他功能</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java与C++的差异</title>
    <url>/2022/03/31/java-basic/</url>
    <content><![CDATA[<p>概述：本文主要记录Java中与C++有明显差异的语言特性</p>
<span id="more"></span>

<h2 id="与C-的差异"><a href="#与C-的差异" class="headerlink" title="与C++的差异"></a>与C++的差异</h2><p>（1）C++ 支持指针，而 Java 没有指针的概念。</p>
<p>（2）C++ 支持多继承，而 Java 不支持多重继承，但允许一个类实现多个接口。</p>
<p>（3）Java 是完全面向对象的语言，并且还取消了 C&#x2F;C++ 中的结构和联合，使编译程序更加简洁</p>
<p>（4）Java 自动进行无用内存回收操作，不再需要程序员进行手动删除，而 C++ 中必须由程序释放内存资源，这就增加了程序员的负担。</p>
<p>（5）Java 不支持操作符重载，而操作符重载则被认为是 C++ 的突出特征。</p>
<p>（6）Java 允许预处理，但不支持预处理器功能，所以为了实现预处理，它提供了引入语句（import），但它与 C++ 预处理器的功能类似。</p>
<p>（7）Java 不支持缺省参数函数，而 C++ 支持 。</p>
<p>（8）C 和 C++ 不支持字符串变量，在 C 和 C++ 程序中使用“Null”终止符代表字符串的结束。在 Java 中字符串是用类对象（String 和 StringBuffer）来实现的</p>
<p>（9）Java 不提供 goto 语句，虽然 Java 指定 goto 作为关键字，但不支持它的使用，这使程序更简洁易读。不过Java中的break&#x2F;continue可以带标签（标签必须放在希望跳出的最外层循环之前，并且必须紧跟一个冒号），用于从内层循环中跳出</p>
<p>（10）Java 不支持 C++ 中的自动强制类型转换，如果需要，必须由程序显式进行强制类型转换。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Good questions —— 数组篇</title>
    <url>/2022/03/31/questions/</url>
    <content><![CDATA[<p>概述：本文记录了我在<a href="https://leetcode-cn.com/"><em>Leetcode</em></a>刷题过程中遇到的与数组相关的优质题目及解题思路</p>
<span id="more"></span>

<h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><p>给定一个不含重复数字的数组 nums ，返回其 <a href="https://leetcode-cn.com/problems/permutations/"><em>所有可能的全排列</em></a> 。可以 <strong>按任意顺序</strong> 返回答案。 </p>
<p>思路：</p>
<p>使用<strong>dfs+回溯</strong>。比较经典的回溯题。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dfs(回溯)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vis</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="built_in">dfs</span>(nums,vis);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,vector&lt;<span class="type">int</span>&gt;&amp; vis)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>()==nums.<span class="built_in">size</span>())</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i!=nums.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                vis[i]=<span class="number">1</span>;</span><br><span class="line">                path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">                <span class="built_in">dfs</span>(nums,vis);</span><br><span class="line">                path.<span class="built_in">pop_back</span>();</span><br><span class="line">                vis[i]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>非递归版本：</p>
<p>思路：</p>
<p>（1）通过实现<a href="https://leetcode-cn.com/problems/next-permutation/">下一个排列</a>函数来实现找到全部排列</p>
<p>（2）下一个排列：<strong>从后往前</strong>搜索数组，找到第一个逆序对。如&lt;3,4,7,6,5&gt;中4是第一个出现逆序的。将4置换为&lt;7,6,5&gt;中比4大且最小的那个数（即5），数组变为&lt;3,5,7,6,4&gt;。再将&lt;7,6,4&gt;部分升序排列（实际上反转就是排序）即可，变为&lt;3,5,4,6,7&gt;即为下一个排列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">nextPermutation</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=nums.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&lt;=nums[i<span class="number">-1</span>])&#123;</span><br><span class="line">                <span class="keyword">if</span>(i<span class="number">-1</span>==<span class="number">0</span>)      <span class="comment">//已经为最大的排列（全降序），那么下一个即为最小的排列（全升序）</span></span><br><span class="line">                    <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找到第一个逆序发生的索引i-1</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=nums.<span class="built_in">size</span>()<span class="number">-1</span>;j&gt;i<span class="number">-1</span>;--j)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums[j]&gt;nums[i<span class="number">-1</span>])&#123;</span><br><span class="line">                        <span class="built_in">swap</span>(nums[j],nums[i<span class="number">-1</span>]);</span><br><span class="line">                        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>()+i,nums.<span class="built_in">end</span>());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>给定一个可包含重复数字的数组 nums ，返回其 <em>所有可能的</em><a href="https://leetcode-cn.com/problems/permutations-ii/"><em>全排列</em></a> 。你可以 <strong>按任意顺序</strong> 返回答案。 </p>
<p>思路：</p>
<p>（1）相较于上一题，这题需要多考虑去重的问题，即在同一层中，如果可选择的范围（未被访问过的范围）包含重复的数字，那么只能选择第一个，跳过重复的部分。</p>
<p>（2）另外要预先对nums进行排序，保证重复的数字都是相邻的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permuteUnique</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());<span class="comment">//为了使重复的数都相邻</span></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vis</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="built_in">dfs</span>(nums,vis);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,vector&lt;<span class="type">int</span>&gt;&amp; vis)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>()==nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i!=nums.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="comment">//要保证在同一层中使用的是不同的数</span></span><br><span class="line">            <span class="comment">//对于有重复的数，要找到第一个未被使用过的</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i]==nums[i<span class="number">-1</span>] &amp;&amp; vis[i<span class="number">-1</span>]==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(vis[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                vis[i]=<span class="number">1</span>;</span><br><span class="line">                path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">                <span class="built_in">dfs</span>(nums,vis);</span><br><span class="line">                path.<span class="built_in">pop_back</span>();</span><br><span class="line">                vis[i]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="最长递增子序列问题"><a href="#最长递增子序列问题" class="headerlink" title="最长递增子序列问题"></a>最长递增子序列问题</h2><p>题目来源：<a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/">最长递增子序列</a>LIS问题及 <a href="https://leetcode-cn.com/problems/minimum-operations-to-make-the-array-k-increasing/submissions/">变体</a></p>
<p>给定一个整数数组 nums ，找到其中最长严格递增子序列的长度。</p>
<p>子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</p>
<p>（1）动态规划方法，时间复杂度O(n^2)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态规划：dp[i]=max(dp[i],dp[j]+1)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(nums.size(),<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i!=nums.<span class="built_in">size</span>();++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j!=i;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]&lt;nums[i])</span><br><span class="line">                dp[i]=<span class="built_in">max</span>(dp[i],dp[j]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="built_in">max_element</span>(dp.<span class="built_in">begin</span>(),dp.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>（2）维护一个记录长度为i时递增子序列末尾元素的最小值，时间复杂度O(n)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//维护一个数组 temp[i]，表示长度为 i 的最长上升子序列的末尾元素的最小值，temp[0] = nums[0]</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">        temp.<span class="built_in">emplace_back</span>(nums[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i!=nums.<span class="built_in">size</span>();++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;temp.<span class="built_in">back</span>())</span><br><span class="line">            temp.<span class="built_in">emplace_back</span>(nums[i]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//注意这里要使用lower_bound</span></span><br><span class="line">                <span class="keyword">auto</span> it=<span class="built_in">lower_bound</span>(temp.<span class="built_in">begin</span>(),temp.<span class="built_in">end</span>(),nums[i]);</span><br><span class="line">                <span class="comment">//if(it==temp.end())</span></span><br><span class="line">                <span class="comment">//continue;</span></span><br><span class="line">                temp[it-temp.<span class="built_in">begin</span>()]=nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="原地哈希"><a href="#原地哈希" class="headerlink" title="原地哈希"></a>原地哈希</h2><p>（1）要求在数组中<a href="https://leetcode-cn.com/problems/find-all-duplicates-in-an-array/">找出所有出现两次的整数</a>，时间复杂度O(n)，空间复杂度O(1)</p>
<p>思想：原地哈希</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="type">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//思想，将nums[nums[i]-1]位置的数值加上n（由于是出现两次，直接取反也行）</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i!=n;++i)&#123;</span><br><span class="line">            nums[(nums[i]<span class="number">-1</span>)%n]+=n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i!=n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>((nums[i]<span class="number">-1</span>)/n==<span class="number">2</span>)</span><br><span class="line">                res.<span class="built_in">push_back</span>(i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>（2）要求在长度为n的数组中[找到没有出现在[1,n]<a href="https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/"><em>范围内的数字</em></a></p>
<p>思想：将nums中出现过的数字作为索引，将对应位置取反</p>
<h2 id="打印螺旋矩阵"><a href="#打印螺旋矩阵" class="headerlink" title="打印螺旋矩阵"></a>打印螺旋矩阵</h2><p>题目来源：<a href="https://leetcode-cn.com/problems/spiral-matrix/">打印螺旋矩阵</a>：</p>
<p>思路：</p>
<p>（1）想到按层来遍历可以省去空间复杂度</p>
<p>（2）定义四个变量（left，right，top，bottom）来控制每一层的边界</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Good questions —— 链表篇</title>
    <url>/2022/03/31/questions03/</url>
    <content><![CDATA[<p>概述：本文记录了刷题过程中与链表相关的优质题目及解题思路</p>
<span id="more"></span>

<h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a><a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/">反转链表</a></h2><p>（需要完全掌握递归和非递归写法）</p>
<p>（1）迭代</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">迭代方法</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* pre=<span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* cur=head;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            ListNode* temp = cur-&gt;next;  <span class="comment">//暂存后继节点</span></span><br><span class="line">            cur-&gt;next=pre;</span><br><span class="line">            pre=cur;</span><br><span class="line">            cur=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;<span class="comment">//注意返回的是pre而不是cur，cur在出循环后是nullptr</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>（2）递归</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">recur</span>(head, <span class="literal">nullptr</span>);           <span class="comment">// 调用递归并返回</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">recur</span><span class="params">(ListNode* cur, ListNode* pre)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">nullptr</span>) <span class="keyword">return</span> pre;        <span class="comment">// 终止条件</span></span><br><span class="line">        ListNode* res = <span class="built_in">recur</span>(cur-&gt;next, cur); <span class="comment">// 递归后继节点</span></span><br><span class="line">        cur-&gt;next = pre;                       <span class="comment">// 修改节点引用指向</span></span><br><span class="line">        <span class="keyword">return</span> res;                            <span class="comment">// 返回反转链表的头节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="复杂链表的复制"><a href="#复杂链表的复制" class="headerlink" title="复杂链表的复制"></a><a href="https://leetcode-cn.com/problems/fu-za-lian-biao-de-fu-zhi-lcof/">复杂链表的复制</a></h2><p>思路：</p>
<p>（1）哈希表存储所有原节点到新复制的节点的映射</p>
<p>（2）原地复制（在链表每个节点后复制一个新节点），再处理所有的next和random指针，最后断开原链表与新链表之间的连接</p>
<h2 id="重排链表"><a href="#重排链表" class="headerlink" title="重排链表"></a><a href="https://leetcode-cn.com/problems/LGjMqU/">重排链表</a></h2><p>时间O(n), 空间O(1)思想：</p>
<p>（1）找到链表中间节点，并断开</p>
<p>（2）反转后半部分的链表</p>
<p>（3）合并两个链表</p>
<h2 id="k个一组反转链表"><a href="#k个一组反转链表" class="headerlink" title="k个一组反转链表"></a><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/submissions/">k个一组反转链表</a></h2><p>思想：</p>
<p>（1）设计一个反转[head,tail]区间的节点的函数，并<strong>返回反转后的头和尾</strong></p>
<p>（2）注意<strong>保存头结点的前一节点</strong>，用于连接局部反转后的链表</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Good questions —— 二叉树篇</title>
    <url>/2022/03/31/questions02/</url>
    <content><![CDATA[<p>概述：本文记录了刷题过程中与二叉树相关的优质题目及解题思路</p>
<span id="more"></span>

<h2 id="二叉树的前中后序遍历"><a href="#二叉树的前中后序遍历" class="headerlink" title="二叉树的前中后序遍历"></a>二叉树的前中后序遍历</h2><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><p>（1）递归实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(TreeNode* node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        res.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">        <span class="built_in">dfs</span>(node-&gt;left);</span><br><span class="line">        <span class="built_in">dfs</span>(node-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>（2）迭代实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        stack&lt;TreeNode*&gt; stk;</span><br><span class="line">        stk.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!stk.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            TreeNode* temp=stk.<span class="built_in">top</span>();</span><br><span class="line">            stk.<span class="built_in">pop</span>();       <span class="comment">//必须先pop出来</span></span><br><span class="line">            res.<span class="built_in">push_back</span>(temp-&gt;val);<span class="comment">//根节点先push到结果数组中</span></span><br><span class="line">            <span class="keyword">if</span>(temp-&gt;right) stk.<span class="built_in">push</span>(temp-&gt;right);</span><br><span class="line">            <span class="keyword">if</span>(temp-&gt;left)  stk.<span class="built_in">push</span>(temp-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>（3）风格统一的迭代写法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代2 用这种写法与中序风格统一</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        stack&lt;TreeNode*&gt; stk;</span><br><span class="line">        TreeNode* cur= root;</span><br><span class="line">        <span class="keyword">while</span>(!stk.<span class="built_in">empty</span>() || cur!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="comment">//前序遍历在节点入栈时即可直接将val放到res中</span></span><br><span class="line">            <span class="keyword">if</span>(cur!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">                stk.<span class="built_in">push</span>(cur);</span><br><span class="line">                cur=cur-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;<span class="comment">//当访问到最底层时</span></span><br><span class="line">                <span class="comment">//关键步骤，理解cur的改变</span></span><br><span class="line">                cur=stk.<span class="built_in">top</span>()-&gt;right;</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>（1）递归实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(root-&gt;left);</span><br><span class="line">        res.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">dfs</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>（2）迭代实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        stack&lt;TreeNode*&gt; stk;</span><br><span class="line">        TreeNode* cur=root;</span><br><span class="line">        <span class="keyword">while</span>(!stk.<span class="built_in">empty</span>()||cur!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="comment">// 指针来访问节点，访问到最底层</span></span><br><span class="line">            <span class="keyword">if</span>(cur!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="comment">// 将访问的节点放进栈</span></span><br><span class="line">                stk.<span class="built_in">push</span>(cur);</span><br><span class="line">                cur=cur-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//从栈里弹出的数据，就是要处理的数据（放进result数组里的数据）</span></span><br><span class="line">                res.<span class="built_in">push_back</span>(stk.<span class="built_in">top</span>()-&gt;val);<span class="comment">//中</span></span><br><span class="line">                cur=stk.<span class="built_in">top</span>()-&gt;right;</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>（1）递归实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.确定终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">        <span class="comment">//前中后序遍历只需要改换这三条的顺序</span></span><br><span class="line">        <span class="built_in">postorderTraversal</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">postorderTraversal</span>(root-&gt;right);</span><br><span class="line">        res.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>（2）迭代实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代2 可与前中后序相应写法风格相统一，思想是中右左顺序遍历，最后reverse</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        stack&lt;TreeNode*&gt; stk;</span><br><span class="line">        TreeNode* cur= root;</span><br><span class="line">        <span class="keyword">while</span>(!stk.<span class="built_in">empty</span>() || cur!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">                stk.<span class="built_in">push</span>(cur);</span><br><span class="line">                cur=cur-&gt;right;  <span class="comment">//注意这里是right,前序是left</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//当访问到最底层时&#123;</span></span><br><span class="line">                <span class="comment">//关键步骤，理解cur的改变</span></span><br><span class="line">                cur=stk.<span class="built_in">top</span>()-&gt;left; <span class="comment">//这里是left，前序是right</span></span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(),res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h2><h3 id="从前序和中序遍历序列构造二叉树"><a href="#从前序和中序遍历序列构造二叉树" class="headerlink" title="从前序和中序遍历序列构造二叉树"></a><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">从前序和中序遍历序列构造二叉树</a></h3><p>思路：</p>
<p>（1）明白前序遍历的第一个节点永远是根节点</p>
<p>（2）用哈希表记录中序遍历中每个节点值对应的索引位置</p>
<p>（3）结合（1）（2）可知根节点在中序遍历中的位置，从而可以知道<strong>左子树和右子树的大小</strong></p>
<p>（4）递归地进行左右子树的构建，<strong>函数返回根节点</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;      <span class="comment">//&#123;value, index in inorder array&#125;</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, vector&lt;<span class="type">int</span>&gt;&amp; inorder)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = preorder.<span class="built_in">size</span>();    <span class="comment">//两个数组长度相等</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i!=inorder.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            mp[inorder[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode* root = <span class="built_in">rebuild</span>(preorder,inorder,<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">rebuild</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; pv,vector&lt;<span class="type">int</span>&gt;&amp; iv,<span class="type">int</span> pl,<span class="type">int</span> pr, <span class="type">int</span> il, <span class="type">int</span> ir)</span></span>&#123;</span><br><span class="line">        <span class="comment">//注意不要落下递归的终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(pr&lt;pl) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">//前序遍历的第一个节点即为根节点</span></span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(pv[pl]);</span><br><span class="line">        <span class="comment">//在中序遍历中找到对应根节点，即可知道左子树和右子树的大小</span></span><br><span class="line">        <span class="type">int</span> leftsize = mp[pv[pl]] - il;</span><br><span class="line">        root-&gt;left = <span class="built_in">rebuild</span>(pv,iv,pl+<span class="number">1</span>,pl+leftsize,il,il+leftsize<span class="number">-1</span>);</span><br><span class="line">        root-&gt;right = <span class="built_in">rebuild</span>(pv,iv,pl+leftsize+<span class="number">1</span>,pr,il+leftsize+<span class="number">1</span>,ir);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="从中序遍历和后序遍历序列构造二叉树"><a href="#从中序遍历和后序遍历序列构造二叉树" class="headerlink" title="从中序遍历和后序遍历序列构造二叉树"></a>从中序遍历和后序遍历序列构造二叉树</h3><p>思路近似，都是要计算出左右子树的大小，然后进行递归</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;      <span class="comment">//&#123;value, index in inorder array&#125;</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = inorder.<span class="built_in">size</span>();    <span class="comment">//两个数组长度相等</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i!=inorder.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            mp[inorder[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode* root = <span class="built_in">rebuild</span>(inorder,postorder,<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">rebuild</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; iv,vector&lt;<span class="type">int</span>&gt;&amp; pv,<span class="type">int</span> il,<span class="type">int</span> ir, <span class="type">int</span> pl, <span class="type">int</span> pr)</span></span>&#123;</span><br><span class="line">        <span class="comment">//注意不要落下递归的终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(ir&lt;il) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">//后序遍历的最后一个节点即为根节点</span></span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(pv[pr]);</span><br><span class="line">        <span class="comment">//在中序遍历中找到对应根节点，即可知道左子树和右子树的大小</span></span><br><span class="line">        <span class="type">int</span> leftsize = mp[pv[pr]] - il;</span><br><span class="line">        root-&gt;left = <span class="built_in">rebuild</span>(iv,pv,il,il+leftsize<span class="number">-1</span>,pl,pl+leftsize<span class="number">-1</span>);</span><br><span class="line">        root-&gt;right = <span class="built_in">rebuild</span>(iv,pv,il+leftsize+<span class="number">1</span>,ir,pl+leftsize,pr<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="二叉搜索树中第k小的元素"><a href="#二叉搜索树中第k小的元素" class="headerlink" title="二叉搜索树中第k小的元素"></a>二叉搜索树中第k小的元素</h2><p>给定一个二叉搜索树的根节点 root ，和一个整数 k ，请你设计一个算法查<a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/">找其中第 k 个最小元素（从 1 开始计数）</a>。</p>
<p>思路：</p>
<p>（1）要反应过来二叉搜索树的中序遍历即为一个升序数组</p>
<p>（2）取升序数组中的第k个就行</p>
<p>如果要搜索第k大的元素，其实只要调整一下遍历的顺序，先遍历右子树，再遍历左子树即可</p>
<h2 id="二叉树中节点和最大的路径"><a href="#二叉树中节点和最大的路径" class="headerlink" title="二叉树中节点和最大的路径"></a>二叉树中节点和最大的路径</h2><ol>
<li>求二叉树中<a href="https://leetcode-cn.com/problems/jC7MId/"><em>节点之和最大的路径</em></a>，必须至少包含一个节点</li>
</ol>
<p>思路：</p>
<p>（1）关键就是想清楚递归的返回值：应该返回包含当前节点在内的并且最多只包含左右子树其中之一边的最大路径。</p>
<p>（2）在递归的过程中不断更新一个最大路径和，包含当前节点并且可以同时包含左右子树的节点。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(root);</span><br><span class="line">        <span class="keyword">return</span> maxsum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> lval = <span class="built_in">max</span>(<span class="number">0</span>,<span class="built_in">dfs</span>(root-&gt;left));<span class="comment">//包含根节点root的单条路径的最大值</span></span><br><span class="line">        <span class="type">int</span> rval = <span class="built_in">max</span>(<span class="number">0</span>,<span class="built_in">dfs</span>(root-&gt;right));</span><br><span class="line">        maxsum = <span class="built_in">max</span>(maxsum,root-&gt;val+lval+rval);</span><br><span class="line">        <span class="keyword">return</span> root-&gt;val + <span class="built_in">max</span>(lval,rval);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> maxsum = INT_MIN;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
